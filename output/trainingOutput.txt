Train Size: 1243
Test Size: 1243
Using 12 threads
=========================
Training iteration 0
=========================
0 : ================== [0]
Sample type: TemporalSentence
Phrase:            week
Sentence:          On the other hand, it's turning out to be another very bad financial week for Asia.
ref_time:          1998-01-08
Gold type:         DURATION
gold val:          P1W
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Correct parses:
week:d => (week:d) => (DURATION,P1W)
Correct. No update.
Sample processing time 0.1030
1 : ================== [0]
Sample type: TemporalSentence
Phrase:            the last twenty four hours
Sentence:          In the last twenty four hours, the value of the Indonesian stock market has fallen by twelve percent.
ref_time:          1998-01-08
Gold type:         DURATION
gold val:          P1D
Executing the phrase: the last twenty four hours
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), twenty four hours :- NP : (*:<d,<n,d>> day:d 1:n)]
Executing the phrase: the last twenty four hours
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), twenty four hours :- NP : (*:<d,<n,d>> day:d 1:n)]
Executing the phrase: the last twenty four hours
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), twenty four hours :- NP : (*:<d,<n,d>> day:d 1:n)]
Executing the phrase: the last twenty four hours
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), twenty four hours :- NP : (*:<d,<n,d>> day:d 1:n)]
Executing the phrase: the last twenty four hours
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), twenty four hours :- NP : (*:<d,<n,d>> day:d 1:n)]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r)) => (DURATION,P1D)
Correct. No update.
Sample processing time 0.0430
2 : ================== [0]
Sample type: TemporalSentence
Phrase:            five year
Sentence:          In Singapore, stocks hit a five year low.
ref_time:          1998-01-08
Gold type:         DURATION
gold val:          P5Y
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 5:n) => ((*:<d,<n,d>> year:d 5:n)) => (DURATION,P5Y)
Bad violating parse: ((*:<d,<n,d>> year:d 5:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d 5:n))) => (DATE,0))
Update: {TEMPORAL_CONTEXT_temporal_ref_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=1.0, TEMPORAL_REFERENCE_temporal_reftemporal_refnotTempRef=-1.0, TEMPORAL_TYPE_d=1.0, TEMPORAL_TYPE_s=-1.0}
Sample processing time 0.0140
3 : ================== [0]
Sample type: TemporalSentence
Phrase:            four year
Sentence:          In the Philippines, a four year low.
ref_time:          1998-01-08
Gold type:         DURATION
gold val:          P4Y
Executing the phrase: four year
with logic: (*:<d,<n,d>> year:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), year :- NP : year:d]
Executing the phrase: four year
with logic: (*:<d,<n,d>> year:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), year :- NP : year:d]
Executing the phrase: four year
with logic: (*:<d,<n,d>> year:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), year :- NP : year:d]
Executing the phrase: four year
with logic: (*:<d,<n,d>> year:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), year :- NP : year:d]
Executing the phrase: four year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 4:n))
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 4:n) => ((*:<d,<n,d>> year:d 4:n)) => (DURATION,P4Y)
Correct. No update.
Sample processing time 0.0070
4 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Now with new construction under way, three of his buyers have backed out.
ref_time:          1998-01-08
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0090
5 : ================== [0]
Sample type: TemporalSentence
Phrase:            october
Sentence:          She estimates her properties, worth a hundred thirty million dollars in October, are worth only half that now.
ref_time:          1998-01-08
Gold type:         DATE
gold val:          1997-10
Executing the phrase: october
with logic: october:s
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (previous:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (this:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (next:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: october:s
and lexical entries: [october :- NP : october:s]
Correct parses:
october:s => ((previous:<s,<r,s>> october:s ref_time:r)) => (DATE,1997-10)
Bad violating parse: (october:s, (october:s) => (DATE,XXXX-10))
Bad violating parse: (october:s, (october:s) => (DATE,XXXX-10))
Update: {TEMPORAL_CONTEXT__none_VBP=-1.0, TEMPORAL_CONTEXT__previous_VBP=1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0}
Sample processing time 0.0170
6 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          She estimates her properties, worth a hundred thirty million dollars in October, are worth only half that now.
ref_time:          1998-01-08
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0090
7 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past three months
Sentence:          But in the past three months, stocks have plunged, interest rates have soared and the downturn all across Asia means that people are not spending here.
ref_time:          1998-01-08
Gold type:         DURATION
gold val:          P3M
Executing the phrase: the past three months
with logic: (*:<d,<n,d>> months:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: (*:<d,<n,d>> months:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: (*:<d,<n,d>> months:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: (*:<d,<n,d>> months:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 3:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 3:n) => ((*:<d,<n,d>> months:d 3:n)) => (DURATION,P3M)
Correct. No update.
Sample processing time 0.0160
8 : ================== [0]
Sample type: TemporalSentence
Phrase:            ten years
Sentence:          And at the big brokerage houses, after ten years of boom, they're talking about layoffs.
ref_time:          1998-01-08
Gold type:         DURATION
gold val:          P10Y
Executing the phrase: ten years
with logic: (*:<d,<n,d>> years:d 10:n)
and lexical entries: [ten :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), years :- NP : years:d]
Executing the phrase: ten years
with logic: (*:<d,<n,d>> years:d 10:n)
and lexical entries: [ten :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), years :- NP : years:d]
Executing the phrase: ten years
with logic: (*:<d,<n,d>> years:d 10:n)
and lexical entries: [ten :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), years :- NP : years:d]
Executing the phrase: ten years
with logic: (*:<d,<n,d>> years:d 10:n)
and lexical entries: [ten :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), years :- NP : years:d]
Executing the phrase: ten years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 10:n))
and lexical entries: [ten :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 10:n) => ((*:<d,<n,d>> years:d 10:n)) => (DURATION,P10Y)
Correct. No update.
Sample processing time 0.0070
9 : ================== [0]
Sample type: TemporalSentence
Phrase:            a couple of years
Sentence:          I think that the mood is fairly gloomy, and I think it's not going to change for a couple of years.
ref_time:          1998-01-08
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: a couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, a couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: a couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, a couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: a couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, a couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: a couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, a couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: a couple of years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, a couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Correct parses:
(*:<d,<n,d>> years:d 2:n) => ((*:<d,<n,d>> years:d 2:n)) => (DURATION,P2Y)
Correct. No update.
Sample processing time 0.0130
10 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          In Washington today, the Federal Aviation Administration released air traffic control tapes from the night the TWA Flight eight hundred went down.
ref_time:          1998-01-14
Gold type:         DATE
gold val:          1998-01-14
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-01-14)
Correct. No update.
Sample processing time 0.0060
11 : ================== [0]
Sample type: TemporalSentence
Phrase:            a minute and a half
Sentence:          But a minute and a half later, a pilot from a nearby flight calls in.
ref_time:          1998-01-14
Gold type:         DURATION
gold val:          PT1M30S
No correct parses. No update.
Sample processing time 0.0020
12 : ================== [0]
Sample type: TemporalSentence
Phrase:            nearly forty years
Sentence:          For nearly forty years, the United States has said categorically it would not tolerate totalitarian rule in its own backyard.
ref_time:          1998-01-20
Gold type:         DURATION
gold val:          P40Y
Executing the phrase: nearly forty years
with logic: (*:<d,<n,d>> years:d 40:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), forty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 40:n)), years :- NP : years:d]
Executing the phrase: nearly forty years
with logic: (*:<d,<n,d>> years:d 40:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), forty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 40:n)), years :- NP : years:d]
Executing the phrase: nearly forty years
with logic: (*:<d,<n,d>> years:d 40:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), forty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 40:n)), years :- NP : years:d]
Executing the phrase: nearly forty years
with logic: (*:<d,<n,d>> years:d 40:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), forty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 40:n)), years :- NP : years:d]
Executing the phrase: nearly forty years
with logic: (*:<d,<n,d>> years:d 40:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), forty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 40:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 40:n) => ((*:<d,<n,d>> years:d 40:n)) => (DURATION,P40Y)
Correct. No update.
Sample processing time 0.0070
13 : ================== [0]
Sample type: TemporalSentence
Phrase:            this evening
Sentence:          At the end of the broadcast this evening, one more trip around Havana to see what it's been like since the last time.
ref_time:          1998-01-20
Gold type:         TIME
gold val:          1998-01-20TEV
No correct parses. No update.
Sample processing time 0.0010
14 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Finally today, we learned that the space agency has finally taken a giant leap forward.
ref_time:          1998-03-04
Gold type:         DATE
gold val:          1998-03-04
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-03-04)
Correct. No update.
Sample processing time 0.0120
15 : ================== [0]
Sample type: TemporalSentence
Phrase:            december
Sentence:          Air Force Lieutenant Colonel Eileen Collins will be named commander of the Space Shuttle Columbia for a mission in December.
ref_time:          1998-03-04
Gold type:         DATE
gold val:          1998-12
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Correct parses:
december:s => ((next:<s,<r,s>> december:s ref_time:r)) => (DATE,1998-12)
Bad violating parse: (december:s, ((previous:<s,<r,s>> december:s ref_time:r)) => (DATE,1997-12))
Update: {TEMPORAL_CONTEXT__nextMD_VBN=1.0, TEMPORAL_CONTEXT__previousMD_VBN=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0}
Sample processing time 0.0120
16 : ================== [0]
Sample type: TemporalSentence
Phrase:            twenty years
Sentence:          It wasn't until twenty years after the first astronauts were chosen that NASA finally included six women, and they were all scientists, not pilots.
ref_time:          1998-03-04
Gold type:         DURATION
gold val:          P20Y
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 20:n))
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 20:n) => ((*:<d,<n,d>> years:d 20:n)) => (DURATION,P20Y)
Correct. No update.
Sample processing time 0.0100
17 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          No woman has actually been in charge of a mission until now.
ref_time:          1998-03-04
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0070
18 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          In space, some say female pilots were held up until now by the lack of piloting opportunities for them in the military.
ref_time:          1998-03-04
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0060
19 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Iraq's Saddam Hussein, facing U.S. and Arab troops at the Saudi border, today sought peace on another front by promising to withdraw from Iranian territory and release soldiers captured during the Iran-Iraq war.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1990-08-15)
Correct. No update.
Sample processing time 0.0080
20 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Also today, King Hussein of Jordan arrived in Washington seeking to mediate the Persian Gulf crisis.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1990-08-15)
Correct. No update.
Sample processing time 0.0030
21 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          President Bush on Tuesday said the United States may extend its naval quarantine to Jordan's Red Sea port of Aqaba to shut off Iraq's last unhindered trade route.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-14
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Correct parses:
tuesday:s => ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1990-08-14)
Bad violating parse: (tuesday:s, ((next:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1990-08-21))
Update: {TEMPORAL_CONTEXT__next_VBD=-1.0, TEMPORAL_CONTEXT__previous_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_WEEKDAY_notSameDay_next=-1.0, TEMPORAL_WEEKDAY_notSameDay_previous=1.0}
Sample processing time 0.0430
22 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          In another mediation effort, the Soviet Union said today it had sent an envoy to the Middle East on a series of stops to include Baghdad.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1990-08-15)
Correct. No update.
Sample processing time 0.0050
23 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          President Bush today denounced Saddam's ``ruinous policies of war,'' and said the United States is ``striking a blow for the principle that might does not make right.''
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1990-08-15)
Correct. No update.
Sample processing time 0.0050
24 : ================== [0]
Sample type: TemporalSentence
Phrase:            some time
Sentence:          In a speech delivered at the Pentagon, Bush seemed to suggest that American forces could be in the gulf region for some time.
ref_time:          1990-08-15
Gold type:         DURATION
gold val:          PXM
Executing the phrase: some time
with logic: months:d
and lexical entries: [some time :- NP : months:d]
Executing the phrase: some time
with logic: months:d
and lexical entries: [some time :- NP : months:d]
Executing the phrase: some time
with logic: months:d
and lexical entries: [some time :- NP : months:d]
Executing the phrase: some time
with logic: months:d
and lexical entries: [some time :- NP : months:d]
Executing the phrase: some time
with logic: (temporal_ref:<d,s> months:d)
and lexical entries: [some time :- NP : months:d]
Correct parses:
months:d => (months:d) => (DURATION,PXM)
Correct. No update.
Sample processing time 0.0080
25 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          The U.S. military buildup in Saudi Arabia continued at fever pace, with Syrian troops now part of a multinational force camped out in the desert to guard the Saudi kingdom from any new thrust by Iraq.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0060
26 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          In a letter to President Hashemi Rafsanjani of Iran, read by a broadcaster over Baghdad radio, Saddam said he will begin withdrawing troops from Iranian territory on Friday and release Iranian prisoners of war.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-10
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1990-08-10)
Correct. No update.
Sample processing time 0.0090
27 : ================== [0]
Sample type: TemporalSentence
Phrase:            august 1988
Sentence:          Saddam appeared to accept a border demarcation treaty he had rejected in peace talks following the August 1988 cease-fire of the eight-year war with Iran.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1988-08
Executing the phrase: august 1988
with logic: (intersect:<s*,s> 1988:r august:s)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (intersect:<s*,s> 1988:r august:s)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Correct parses:
(intersect:<s*,s> 1988:r august:s) => ((intersect:<s*,s> 1988:r august:s)) => (DATE,1988-08)
Correct. No update.
Sample processing time 0.0080
28 : ================== [0]
Sample type: TemporalSentence
Phrase:            eight year
Sentence:          Saddam appeared to accept a border demarcation treaty he had rejected in peace talks following the August 1988 cease-fire of the eight-year war with Iran.
ref_time:          1990-08-15
Gold type:         DURATION
gold val:          P8Y
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 8:n))
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 8:n) => ((*:<d,<n,d>> year:d 8:n)) => (DURATION,P8Y)
Correct. No update.
Sample processing time 0.0080
29 : ================== [0]
Sample type: TemporalSentence
Phrase:            aug. 2
Sentence:          The move seemed aimed at heading off more trouble with Iran, which had condemned Iraq's invasion of Kuwait on Aug. 2 but also criticized the multinational force dispatched to Saudi Arabia.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-02
Executing the phrase: aug. 2
with logic: (intersect:<s*,s> august:s 2d:s)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (intersect:<s*,s> august:s 2d:s)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Correct parses:
(intersect:<s*,s> august:s 2d:s) => ((this:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)) => (DATE,1990-08-02)
Correct. No update.
Sample processing time 0.0090
30 : ================== [0]
Sample type: TemporalSentence
Phrase:            up to 180 days
Sentence:          Bush can call up to 200,000 reservists for up to 180 days without seeking congressional approval.
ref_time:          1990-08-15
Gold type:         DURATION
gold val:          P180D
Executing the phrase: up to 180 days
with logic: (*:<d,<n,d>> days:d 180:n)
and lexical entries: [up to :- NP/NP : (lambda $0:d $0), 180 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 180:n)), days :- NP : days:d]
Executing the phrase: up to 180 days
with logic: (*:<d,<n,d>> days:d 180:n)
and lexical entries: [up to :- NP/NP : (lambda $0:d $0), 180 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 180:n)), days :- NP : days:d]
Executing the phrase: up to 180 days
with logic: (*:<d,<n,d>> days:d 180:n)
and lexical entries: [up to :- NP/NP : (lambda $0:d $0), 180 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 180:n)), days :- NP : days:d]
Executing the phrase: up to 180 days
with logic: (*:<d,<n,d>> days:d 180:n)
and lexical entries: [up to :- NP/NP : (lambda $0:d $0), 180 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 180:n)), days :- NP : days:d]
Executing the phrase: up to 180 days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 180:n))
and lexical entries: [up to :- NP/NP : (lambda $0:d $0), 180 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 180:n)), days :- NP : days:d]
Correct parses:
(*:<d,<n,d>> days:d 180:n) => ((*:<d,<n,d>> days:d 180:n)) => (DURATION,P180D)
Correct. No update.
Sample processing time 0.0060
31 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          Soviet Foreign Ministry spokesman Yuri Gremitskikh said special ambassador Mikhail Sytenko left Tuesday for consultations with the governments of Syria, Jordan, Egypt and other Arab countries.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-14
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Correct parses:
tuesday:s => ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1990-08-14)
Correct. No update.
Sample processing time 0.0070
32 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Sytenko, a former deputy secretary-general of the United Nations, is also expected to visit Baghdad, Gremitskikh said at a regular news briefing today.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1990-08-15)
Correct. No update.
Sample processing time 0.0080
33 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Spokesman Yuri Gremitskikh said the first group of 230 evacuees was assembling in Baghdad today, but evacuation plans were hampered by desert heat and lack of transportation.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1990-08-15)
Correct. No update.
Sample processing time 0.0070
34 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          The British Foreign Office said today conditions in Kuwait appear to be deteriorating.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1990-08-15)
Correct. No update.
Sample processing time 0.0040
35 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          The Iraqi ambassador to Venezuela said on Tuesday that Iraq would retaliate against Venezuela and other OPEC oil cartel members if they boost oil production to fill the gap created by blocked supplies from Iraq and Kuwait.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-14
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Correct parses:
tuesday:s => ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1990-08-14)
Correct. No update.
Sample processing time 0.0050
36 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          With Kuwait now ``annexed,'' Iraq has control of 20 percent of the world's oil reserves.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
37 : ================== [0]
Sample type: TemporalSentence
Phrase:            aug. 6
Sentence:          The U.N. Security Council on Aug. 6 ordered a global embargo on trade with Iraq as punishment for seizing Kuwait.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-06
Executing the phrase: aug. 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Correct parses:
(intersect:<s*,s> august:s 6d:s) => ((this:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)) => (DATE,1990-08-06)
Correct. No update.
Sample processing time 0.0050
38 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          Twelve Arab League nations voted for an Arab force to protect Saudi Arabia, with the vanguard of Syria's contingent arriving Tuesday, according to diplomatic sources in Riyadh, the Saudi capital.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-07
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Bad violating parse: (tuesday:s, ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1990-08-14))
No correct parses. No update.
Sample processing time 0.0080
39 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          The predominantly Moslem nation of Bangladesh said today its troops would join multinational forces in Saudi Arabia.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1990-08-15)
Correct. No update.
Sample processing time 0.0050
40 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          Truckloads of goods rolled into Iraq from Jordan on Tuesday and Iraqi-bound cargo was unloaded from ships at the Red Sea port ofAqaba despite the U.N.-ordered sanctions.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-07
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Bad violating parse: (tuesday:s, ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1990-08-14))
No correct parses. No update.
Sample processing time 0.0050
41 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          King Hussein was reportedly carrying a message to Bush from Iraq's Saddam, with whom the king met Monday.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-06
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Bad violating parse: (monday:s, ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1990-08-13))
No correct parses. No update.
Sample processing time 0.0070
42 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          The monarch will meet Bush on Thursday in Kennebunkport, Maine.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-09
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1990-08-09)
Correct. No update.
Sample processing time 0.0040
43 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Crown Prince Hassan, King Hussein's brother and political adviser, was asked today about the message the king was said to be carrying.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1990-08-15)
Correct. No update.
Sample processing time 0.0060
44 : ================== [0]
Sample type: TemporalSentence
Phrase:            this crucial moment
Sentence:          In an interview from Jordan on ABC, he declined to discuss details, but said: ``I don't think that his majesty would be traveling at this crucial moment if the Iraqi leadership did not have a rational approach to the future.''
ref_time:          1990-08-15
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: this crucial moment
with logic: present_ref:r
and lexical entries: [this crucial moment :- NP : present_ref:r]
Executing the phrase: this crucial moment
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [this crucial moment :- NP : present_ref:r]
Executing the phrase: this crucial moment
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [this crucial moment :- NP : present_ref:r]
Executing the phrase: this crucial moment
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [this crucial moment :- NP : present_ref:r]
Executing the phrase: this crucial moment
with logic: present_ref:r
and lexical entries: [this crucial moment :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0070
45 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          On Tuesday, the United States and Soviet Union conferred in Washington on putting an anti-Iraq naval blockade under a United Nations umbrella.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-07
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Bad violating parse: (tuesday:s, ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1990-08-14))
No correct parses. No update.
Sample processing time 0.0040
46 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          Bush told a news conference on Tuesday that the naval barricade now in force might be extended to Jordan's Aqaba ``if it is a hole through which commerce flows'' in and out of Iraq.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-07
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Bad violating parse: (tuesday:s, ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1990-08-14))
No correct parses. No update.
Sample processing time 0.0040
47 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Bush told a news conference on Tuesday that the naval barricade now in force might be extended to Jordan's Aqaba ``if it is a hole through which commerce flows'' in and out of Iraq.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0040
48 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          In Saudi Arabia, today is the eighth day of ``Desert Shield,'' the operation designed to confront an estimated 200,000 Iraqi soldiers now in Kuwait.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1990-08-15)
Correct. No update.
Sample processing time 0.0030
49 : ================== [0]
Sample type: TemporalSentence
Phrase:            eighth day
Sentence:          In Saudi Arabia, today is the eighth day of ``Desert Shield,'' the operation designed to confront an estimated 200,000 Iraqi soldiers now in Kuwait.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: eighth day
with logic: (nth:<d,<n,s>> day:d 8o:n)
and lexical entries: [eighth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 8o:n)), day :- NP : day:d]
Executing the phrase: eighth day
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> day:d 8o:n) ref_time:r)
and lexical entries: [eighth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 8o:n)), day :- NP : day:d]
Executing the phrase: eighth day
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> day:d 8o:n) ref_time:r)
and lexical entries: [eighth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 8o:n)), day :- NP : day:d]
Executing the phrase: eighth day
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> day:d 8o:n) ref_time:r)
and lexical entries: [eighth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 8o:n)), day :- NP : day:d]
Executing the phrase: eighth day
with logic: (nth:<d,<n,s>> day:d 8o:n)
and lexical entries: [eighth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 8o:n)), day :- NP : day:d]
Bad violating parse: ((nth:<d,<n,s>> day:d 8o:n), ((previous:<s,<r,s>> (nth:<d,<n,s>> day:d 8o:n) ref_time:r)) => (DATE,1990-08-08))
No correct parses. No update.
Sample processing time 0.0050
50 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          In Saudi Arabia, today is the eighth day of ``Desert Shield,'' the operation designed to confront an estimated 200,000 Iraqi soldiers now in Kuwait.
ref_time:          1990-08-15
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0070
51 : ================== [0]
Sample type: TemporalSentence
Phrase:            weeks
Sentence:          At least 50,000 U.S. troops are expected to be committed to Desert Shield within weeks, including Marines, Army air assault forces, paratroopers and infantry.
ref_time:          1990-08-15
Gold type:         DURATION
gold val:          PXW
Executing the phrase: weeks
with logic: weeks:d
and lexical entries: [weeks :- NP : weeks:d]
Executing the phrase: weeks
with logic: weeks:d
and lexical entries: [weeks :- NP : weeks:d]
Executing the phrase: weeks
with logic: weeks:d
and lexical entries: [weeks :- NP : weeks:d]
Executing the phrase: weeks
with logic: weeks:d
and lexical entries: [weeks :- NP : weeks:d]
Executing the phrase: weeks
with logic: (temporal_ref:<d,s> weeks:d)
and lexical entries: [weeks :- NP : weeks:d]
Correct parses:
weeks:d => (weeks:d) => (DURATION,PXW)
Correct. No update.
Sample processing time 0.0050
52 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          The Persian Gulf showdown between Iraq and the United States took a more personal turn Thursday when Iraq's Saddam Hussein called President Bush a liar and said the outbreak of holy war could bring thousands of Americans home in coffins.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          1990-08-16
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((this:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1990-08-16)
Bad violating parse: (thursday:s, ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1990-08-09))
Update: {TEMPORAL_CONTEXT__previous_VBD=-1.0, TEMPORAL_CONTEXT__this_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0, TEMPORAL_WEEKDAY_sameDay__previous=-1.0, TEMPORAL_WEEKDAY_sameDay__this=1.0}
Sample processing time 0.0130
53 : ================== [0]
Sample type: TemporalSentence
Phrase:            two week
Sentence:          Bush, commenting on the two-week gulf crisis from his vacation home in Maine, said he saw little reason to be optimistic about a settlement of the dispute, which stems from Iraq's invasion of oil-wealthy Kuwait and its subsequent military buildup on the border of Saudi Arabia.
ref_time:          1990-08-16
Gold type:         DURATION
gold val:          P2W
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> week:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Correct parses:
(*:<d,<n,d>> week:d 2:n) => ((*:<d,<n,d>> week:d 2:n)) => (DURATION,P2W)
Correct. No update.
Sample processing time 0.0040
54 : ================== [0]
Sample type: TemporalSentence
Phrase:            two hour
Sentence:          After a two-hour meeting at his Kennebunkport home with King Hussein of Jordan, Bush said, ``I did not come away with any feeling of hope'' that Iraq would withdraw its army from Kuwait.
ref_time:          1990-08-16
Gold type:         DURATION
gold val:          PT2H
Executing the phrase: two hour
with logic: (*:<d,<n,d>> hour:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), hour :- NP : hour:d]
Executing the phrase: two hour
with logic: (*:<d,<n,d>> hour:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), hour :- NP : hour:d]
Executing the phrase: two hour
with logic: (*:<d,<n,d>> hour:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), hour :- NP : hour:d]
Executing the phrase: two hour
with logic: (*:<d,<n,d>> hour:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), hour :- NP : hour:d]
Executing the phrase: two hour
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> hour:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), hour :- NP : hour:d]
Correct parses:
(*:<d,<n,d>> hour:d 2:n) => ((*:<d,<n,d>> hour:d 2:n)) => (DURATION,PT2H)
Correct. No update.
Sample processing time 0.0030
55 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          Bush also said Thursday that King Hussein assured him Jordan would close the last remaining free port to most Iraqi trade as the economic embargo on materials to Iraq continued unabated.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          1990-08-16
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((this:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1990-08-16)
Correct. No update.
Sample processing time 0.0040
56 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          In Washington, Pentagon spokesman Pete Williams said Iraq has continued to increase its armed forces in Kuwait and they now number about 160,000.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0050
57 : ================== [0]
Sample type: TemporalSentence
Phrase:            aug. 2
Sentence:          Saddam has been under international quarantine since his Aug. 2 power-grab, or what he calls an ``eternal merger'' with Kuwait.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          1990-08-02
Executing the phrase: aug. 2
with logic: (intersect:<s*,s> august:s 2d:s)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (intersect:<s*,s> august:s 2d:s)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Correct parses:
(intersect:<s*,s> august:s 2d:s) => ((this:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)) => (DATE,1990-08-02)
Correct. No update.
Sample processing time 0.0040
58 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          In a long verbal attack read on Iraqi television Thursday, Saddam repeatedly called Bush ``a liar'' and said a shooting war could produce body bags courtesy of Baghdad.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          1990-08-16
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((this:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1990-08-16)
Correct. No update.
Sample processing time 0.0040
59 : ================== [0]
Sample type: TemporalSentence
Phrase:            a fairly lengthy period
Sentence:          ``We're there to stay for a fairly lengthy period.''
ref_time:          1990-08-16
Gold type:         DURATION
gold val:          PXX
No correct parses. No update.
Sample processing time 0.0020
60 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Iraq now controls 20 percent of the world's oil reserves with its conquest of Kuwait.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
61 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Aqaba is Iraq's only outlet now that an international noose has tightened.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
62 : ================== [0]
Sample type: TemporalSentence
Phrase:            a day earlier
Sentence:          A day earlier, scores of trucks, many with Iraqi license plates, streamed north out of Aqaba to Amman and onto the desert highway bound for Iraq.
ref_time:          1990-08-16
Gold type:         DURATION
gold val:          P1D
No correct parses. No update.
Sample processing time 0.0010
63 : ================== [0]
Sample type: TemporalSentence
Phrase:            this week
Sentence:          The Jordanian monarch met this week with Saddam, but he told reporters he had no message from Baghdad.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          1990-W33
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(this:<d,<r,s>> week:d ref_time:r) => ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1990-W33)
Correct. No update.
Sample processing time 0.0030
64 : ================== [0]
Sample type: TemporalSentence
Phrase:            wednesday
Sentence:          Thirty-two of the 159 U.N. members had filed compliance reports by Wednesday, and all were honoring the sanctions Iraq.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          1990-08-15
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Correct parses:
wednesday:s => ((previous:<s,<r,s>> wednesday:s ref_time:r)) => (DATE,1990-08-15)
Bad violating parse: (wednesday:s, ((this:<s,<r,s>> wednesday:s ref_time:r)) => (DATE,1990-WXX-3))
Update: {TEMPORAL_CONTEXT__previous_VBN=1.0, TEMPORAL_CONTEXT__this_VBN=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0, TEMPORAL_WEEKDAY_notSameDay_previous=1.0, TEMPORAL_WEEKDAY_notSameDay_this=-1.0}
Sample processing time 0.0060
65 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          Also Thursday, Saudi Arabia called for an emergency conference of the Organization of Petroleum Exporting Countries to discuss how much oil to pump.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          1990-08-16
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((this:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1990-08-16)
Correct. No update.
Sample processing time 0.0030
66 : ================== [0]
Sample type: TemporalSentence
Phrase:            september
Sentence:          Reports attributed to the Japanese foreign ministry said Saudi Arabia told U.S., European and Japanese oil companies of a 15-20 percent cutback in its oil supply in September.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          1990-09
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Correct parses:
september:s => ((next:<s,<r,s>> september:s ref_time:r)) => (DATE,1990-09)
Bad violating parse: (september:s, ((previous:<s,<r,s>> september:s ref_time:r)) => (DATE,1989-09))
Update: {TEMPORAL_CONTEXT__next_VBD=1.0, TEMPORAL_CONTEXT__previous_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0}
Sample processing time 0.0080
67 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          Meanwhile, Egypt's official Middle East News Agency said Thursday that Saddam was the target of an assassination attempt, which led to ``large-scale'' arrests, including some close associates of the Iraqi strongman.
ref_time:          1990-08-16
Gold type:         DATE
gold val:          1990-08-16
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((this:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1990-08-16)
Correct. No update.
Sample processing time 0.0050
68 : ================== [0]
Sample type: TemporalSentence
Phrase:            210 years
Sentence:          CANBERRA, Australia (AP)_ Turning its back on 210 years of loyalty to the British royal family, a constitutional convention voted overwhelmingly Friday to make Australia a republic under its own president.
ref_time:          1998-02-13
Gold type:         DURATION
gold val:          P210Y
Executing the phrase: 210 years
with logic: (*:<d,<n,d>> years:d 210:n)
and lexical entries: [210 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 210:n)), years :- NP : years:d]
Executing the phrase: 210 years
with logic: (*:<d,<n,d>> years:d 210:n)
and lexical entries: [210 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 210:n)), years :- NP : years:d]
Executing the phrase: 210 years
with logic: (*:<d,<n,d>> years:d 210:n)
and lexical entries: [210 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 210:n)), years :- NP : years:d]
Executing the phrase: 210 years
with logic: (*:<d,<n,d>> years:d 210:n)
and lexical entries: [210 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 210:n)), years :- NP : years:d]
Executing the phrase: 210 years
with logic: (*:<d,<n,d>> years:d 210:n)
and lexical entries: [210 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 210:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 210:n) => ((*:<d,<n,d>> years:d 210:n)) => (DURATION,P210Y)
Correct. No update.
Sample processing time 0.0040
69 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          CANBERRA, Australia (AP)_ Turning its back on 210 years of loyalty to the British royal family, a constitutional convention voted overwhelmingly Friday to make Australia a republic under its own president.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-02-13
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-13)
Correct. No update.
Sample processing time 0.0060
70 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          Prime Minister John Howard, a monarchist himself, promised to put the question to a national referendum next year after convention delegates voted 89-52 for a republic, with 11 abstentions.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1999
Executing the phrase: next year
with logic: year:d
and lexical entries: [next :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: next year
with logic: year:d
and lexical entries: [next :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: next year
with logic: year:d
and lexical entries: [next :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: next year
with logic: year:d
and lexical entries: [next :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: next year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [next :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1999)
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Update: {LEX#439=1.0, LEX#833=-1.0, TEMPORAL_CONTEXT__next_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=-1.0, TEMPORAL_TYPE_d=-1.0, TEMPORAL_TYPE_s=1.0}
Sample processing time 0.0140
71 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Treasurer Peter Costello, Environment Minister Robert Hill and Attorney General Daryl Williams all voted to support the republic Friday.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-02-13
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-13)
Bad violating parse: (friday:s, ((next:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-20))
Update: {TEMPORAL_CONTEXT__next_VB=-1.0, TEMPORAL_CONTEXT__this_VB=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0, TEMPORAL_WEEKDAY_sameDay__next=-1.0, TEMPORAL_WEEKDAY_sameDay__this=1.0}
Sample processing time 0.0060
72 : ================== [0]
Sample type: TemporalSentence
Phrase:            2000
Sentence:          Pro-republicans hope to have an Australian president by the opening of the 2000 Olympics and the 100th anniversary of Australian federation.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          2000
Executing the phrase: 2000
with logic: 2000:r
and lexical entries: [2000 :- NP : 2000:r]
Executing the phrase: 2000
with logic: (previous:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [2000 :- NP : 2000:r]
Executing the phrase: 2000
with logic: (this:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [2000 :- NP : 2000:r]
Executing the phrase: 2000
with logic: (next:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [2000 :- NP : 2000:r]
Executing the phrase: 2000
with logic: 2000:r
and lexical entries: [2000 :- NP : 2000:r]
Correct parses:
2000:r => (2000:r) => (DATE,2000)
Correct. No update.
Sample processing time 0.0040
73 : ================== [0]
Sample type: TemporalSentence
Phrase:            several years ago
Sentence:          Polls have shown public support for a republic increasing, rising from about 35 percent several years ago to about 51 percent this year, as pro-monarchist sentiment diminishes.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: several years ago
with logic: past_ref:r
and lexical entries: [several years ago :- NP : past_ref:r]
Executing the phrase: several years ago
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [several years ago :- NP : past_ref:r]
Executing the phrase: several years ago
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [several years ago :- NP : past_ref:r]
Executing the phrase: several years ago
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [several years ago :- NP : past_ref:r]
Executing the phrase: several years ago
with logic: past_ref:r
and lexical entries: [several years ago :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0050
74 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Polls have shown public support for a republic increasing, rising from about 35 percent several years ago to about 51 percent this year, as pro-monarchist sentiment diminishes.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1998)
Correct. No update.
Sample processing time 0.0060
75 : ================== [0]
Sample type: TemporalSentence
Phrase:            1901
Sentence:          Australia has been independent since 1901, but like many Commonwealth nations it still recognizes the British monarch as its head of state.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1901
Executing the phrase: 1901
with logic: 1901:r
and lexical entries: [1901 :- NP : 1901:r]
Executing the phrase: 1901
with logic: (previous:<s,<r,s>> 1901:r ref_time:r)
and lexical entries: [1901 :- NP : 1901:r]
Executing the phrase: 1901
with logic: (this:<s,<r,s>> 1901:r ref_time:r)
and lexical entries: [1901 :- NP : 1901:r]
Executing the phrase: 1901
with logic: (next:<s,<r,s>> 1901:r ref_time:r)
and lexical entries: [1901 :- NP : 1901:r]
Executing the phrase: 1901
with logic: 1901:r
and lexical entries: [1901 :- NP : 1901:r]
Correct parses:
1901:r => (1901:r) => (DATE,1901)
Correct. No update.
Sample processing time 0.0030
76 : ================== [0]
Sample type: TemporalSentence
Phrase:            20th century
Sentence:          ``It's no secret that she's indicated to me... she is a 20th century democrat, understands that the role of the crown in Australia rests in the hands of the Australian people as it has for almost a hundred years.''
ref_time:          1998-02-13
Gold type:         DATE
gold val:          19
Executing the phrase: 20th century
with logic: 19:r
and lexical entries: [20th century :- NP : 19:r]
Executing the phrase: 20th century
with logic: (previous:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [20th century :- NP : 19:r]
Executing the phrase: 20th century
with logic: (this:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [20th century :- NP : 19:r]
Executing the phrase: 20th century
with logic: (next:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [20th century :- NP : 19:r]
Executing the phrase: 20th century
with logic: 19:r
and lexical entries: [20th century :- NP : 19:r]
Correct parses:
19:r => (19:r) => (DATE,19)
Correct. No update.
Sample processing time 0.0040
77 : ================== [0]
Sample type: TemporalSentence
Phrase:            almost a hundred years
Sentence:          ``It's no secret that she's indicated to me... she is a 20th century democrat, understands that the role of the crown in Australia rests in the hands of the Australian people as it has for almost a hundred years.''
ref_time:          1998-02-13
Gold type:         DURATION
gold val:          P100Y
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n))
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> years:d 100:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> years:d 100:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> years:d 100:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> years:d 100:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 100:n))
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Bad violating parse: ((*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n), ((*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n), ((*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n), ((*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n), ((*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> (*:<d,<n,d>> years:d 100:n) 1:n))) => (DATE,119))
Bad violating parse: ((*:<d,<n,d>> years:d 100:n), ((*:<d,<n,d>> years:d 100:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> years:d 100:n), ((*:<d,<n,d>> years:d 100:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> years:d 100:n), ((*:<d,<n,d>> years:d 100:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> years:d 100:n), ((*:<d,<n,d>> years:d 100:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> years:d 100:n), ((temporal_ref:<d,s> (*:<d,<n,d>> years:d 100:n))) => (DATE,119))
No correct parses. No update.
Sample processing time 0.0160
78 : ================== [0]
Sample type: TemporalSentence
Phrase:            1996
Sentence:          Former prime minister Paul Keating, who put the republic issue in the spotlight in his unsuccessful 1996 campaign for re-election, welcomed the result.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1996
Executing the phrase: 1996
with logic: 1996:r
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (previous:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (this:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (next:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: 1996:r
and lexical entries: [1996 :- NP : 1996:r]
Correct parses:
1996:r => (1996:r) => (DATE,1996)
Correct. No update.
Sample processing time 0.0040
79 : ================== [0]
Sample type: TemporalSentence
Phrase:            august
Sentence:          CANBERRA, Australia (AP)_ Qantas will almost double its flights between Australia and India by August in the search for new markets untouched by the crippling Asian financial crisis.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-08
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (this:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (next:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Correct parses:
august:s => ((next:<s,<r,s>> august:s ref_time:r)) => (DATE,1998-08)
Correct. No update.
Sample processing time 0.0040
80 : ================== [0]
Sample type: TemporalSentence
Phrase:            a month
Sentence:          This move comes barely a month after Qantas suspended a number of services between Australia, Indonesia, Thailand and Malaysia in the wake of the Asian economic crisis.
ref_time:          1998-02-13
Gold type:         DURATION
gold val:          P1M
Executing the phrase: a month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: a month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: a month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: a month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: a month
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> month:d 1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: a month
with logic: month:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: a month
with logic: month:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: a month
with logic: month:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: a month
with logic: month:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: a month
with logic: (temporal_ref:<d,s> month:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Correct parses:
month:d => (month:d) => (DURATION,P1M)
Bad violating parse: ((*:<d,<n,d>> month:d 1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> month:d 1:n))) => (DATE,1998-09))
Bad violating parse: (month:d, ((temporal_ref:<d,s> month:d)) => (DATE,1998-07))
Update: {LEX#566=0.5, LEX#750=-0.5, TEMPORAL_CONTEXT_temporal_ref_VBZ=-1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=1.0, TEMPORAL_REFERENCE_temporal_reftemporal_refnotTempRef=-1.0, TEMPORAL_TYPE_d=1.0, TEMPORAL_TYPE_s=-1.0}
Sample processing time 0.0060
81 : ================== [0]
Sample type: TemporalSentence
Phrase:            current
Sentence:          Qantas plans daily flights between Sydney and Bombay, up from the current four flights a week, to boost business and tourism ties with India, the airline announced Friday.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
82 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Qantas plans daily flights between Sydney and Bombay, up from the current four flights a week, to boost business and tourism ties with India, the airline announced Friday.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-02-13
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-13)
Correct. No update.
Sample processing time 0.0050
83 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          In a joint statement with Tourism Minister Andrew Thomson, it said two new flights would leave Bombay on Monday and Tuesday nights from March 30, with the third departing each Thursday from August 6.
ref_time:          1998-02-13
Gold type:         SET
gold val:          XXXX-WXX-1TNI
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Bad violating parse: (monday:s, ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1998-02-09))
No correct parses. No update.
Sample processing time 0.0040
84 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday nights
Sentence:          In a joint statement with Tourism Minister Andrew Thomson, it said two new flights would leave Bombay on Monday and Tuesday nights from March 30, with the third departing each Thursday from August 6.
ref_time:          1998-02-13
Gold type:         SET
gold val:          XXXX-WXX-2TNI
No correct parses. No update.
Sample processing time 0.0010
85 : ================== [0]
Sample type: TemporalSentence
Phrase:            march 30
Sentence:          In a joint statement with Tourism Minister Andrew Thomson, it said two new flights would leave Bombay on Monday and Tuesday nights from March 30, with the third departing each Thursday from August 6.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-03-30
Executing the phrase: march 30
with logic: (intersect:<s*,s> march:s 30d:s)
and lexical entries: [march :- NP : march:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: march 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> march:s 30d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: march 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> march:s 30d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: march 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> march:s 30d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: march 30
with logic: (intersect:<s*,s> march:s 30d:s)
and lexical entries: [march :- NP : march:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> march:s 30d:s) => ((next:<s,<r,s>> (intersect:<s*,s> march:s 30d:s) ref_time:r)) => (DATE,1998-03-30)
Correct. No update.
Sample processing time 0.0050
86 : ================== [0]
Sample type: TemporalSentence
Phrase:            each thursday
Sentence:          In a joint statement with Tourism Minister Andrew Thomson, it said two new flights would leave Bombay on Monday and Tuesday nights from March 30, with the third departing each Thursday from August 6.
ref_time:          1998-02-13
Gold type:         SET
gold val:          XXXX-WXX-4
No correct parses. No update.
Sample processing time 0.0000
87 : ================== [0]
Sample type: TemporalSentence
Phrase:            august 6
Sentence:          In a joint statement with Tourism Minister Andrew Thomson, it said two new flights would leave Bombay on Monday and Tuesday nights from March 30, with the third departing each Thursday from August 6.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-08-06
Executing the phrase: august 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [august :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: august 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [august :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: august 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [august :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: august 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [august :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: august 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [august :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Correct parses:
(intersect:<s*,s> august:s 6d:s) => ((next:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)) => (DATE,1998-08-06)
Correct. No update.
Sample processing time 0.0060
88 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          CAGUAS, Puerto Rico (AP)_ Kidnappers kept their promise to kill a store owner they took hostage and police found the man's dismembered and decapitated body Friday wrapped in plastic garbage bags.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-02-13
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-13)
Correct. No update.
Sample processing time 0.0050
89 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Police confirmed Friday that the body found along a highway in this municipality 15 miles south of San Juan belonged to Jorge Hernandez, 49.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-02-13
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-13)
Correct. No update.
Sample processing time 0.0030
90 : ================== [0]
Sample type: TemporalSentence
Phrase:            10 p.m. wednesday
Sentence:          Hernandez was kidnapped from his small, neighborhood store in the town of Trujillo Alto at 10 p.m. Wednesday, police said.
ref_time:          1998-02-13
Gold type:         TIME
gold val:          1998-02-11T22:00
No correct parses. No update.
Sample processing time 0.0010
91 : ================== [0]
Sample type: TemporalSentence
Phrase:            noon thursday
Sentence:          His kidnappers demanded a ransom of dlrs 1 million, but negotiations broke off at noon Thursday.
ref_time:          1998-02-13
Gold type:         TIME
gold val:          1998-02-12T12:00
No correct parses. No update.
Sample processing time 0.0000
92 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent years
Sentence:          While some Latin American countries such as Mexico and Colombia have suffered from a rash of kidnappings in recent years, the crime has not been common in this U.S. commonwealth.
ref_time:          1998-02-13
Gold type:         DURATION
gold val:          PXY
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Bad violating parse: (past_ref:r, (past_ref:r) => (DATE,PAST_REF))
Bad violating parse: (past_ref:r, ((previous:<s,<r,s>> past_ref:r ref_time:r)) => (DATE,PAST_REF))
Bad violating parse: (past_ref:r, ((next:<s,<r,s>> past_ref:r ref_time:r)) => (DATE,PAST_REF))
Bad violating parse: (past_ref:r, (past_ref:r) => (DATE,PAST_REF))
No correct parses. No update.
Sample processing time 0.0040
93 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          O'SMACH, Cambodia (AP)_ The top commander of a Cambodian resistance force said Thursday he has sent a team to recover the remains of a British mine removal expert kidnapped and presumed killed by Khmer Rouge guerrillas almost two years ago.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          1998-02-19
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((this:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1998-02-19)
Correct. No update.
Sample processing time 0.0040
94 : ================== [0]
Sample type: TemporalSentence
Phrase:            almost two years ago
Sentence:          O'SMACH, Cambodia (AP)_ The top commander of a Cambodian resistance force said Thursday he has sent a team to recover the remains of a British mine removal expert kidnapped and presumed killed by Khmer Rouge guerrillas almost two years ago.
ref_time:          1998-02-19
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: almost two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: almost two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: almost two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: almost two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: almost two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)) => (DATE,1996))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)) => (DATE,1996))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)) => (DATE,1996))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)) => (DATE,1996))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)) => (DATE,1996))
No correct parses. No update.
Sample processing time 0.0080
95 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next two weeks
Sentence:          Gen. Nhek Bunchhay, a loyalist of ousted Cambodian Prime Minister Prince Norodom Ranariddh, said in an interview with The Associated Press at his hilltop headquarters that he hopes to recover the remains of Christopher Howes within the next two weeks.
ref_time:          1998-02-19
Gold type:         DURATION
gold val:          P2W
Executing the phrase: the next two weeks
with logic: (next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Correct parses:
(next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r) => ((next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)) => (DURATION,P2W)
Correct. No update.
Sample processing time 0.0090
96 : ================== [0]
Sample type: TemporalSentence
Phrase:            march 1996
Sentence:          Howes had been working for the Britain-based Mines Advisory Group when he was abducted with his Cambodian interpreter Houn Hourth in March 1996.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          1996-03
Executing the phrase: march 1996
with logic: (intersect:<s*,s> march:s 1996:r)
and lexical entries: [march :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 march:s)), 1996 :- NP : 1996:r, march :- NP : march:s, 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 1996
with logic: (previous:<s,<r,s>> (intersect:<s*,s> march:s 1996:r) ref_time:r)
and lexical entries: [march :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 march:s)), 1996 :- NP : 1996:r, march :- NP : march:s, 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 1996
with logic: (this:<s,<r,s>> (intersect:<s*,s> march:s 1996:r) ref_time:r)
and lexical entries: [march :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 march:s)), 1996 :- NP : 1996:r, march :- NP : march:s, 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 1996
with logic: (next:<s,<r,s>> (intersect:<s*,s> march:s 1996:r) ref_time:r)
and lexical entries: [march :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 march:s)), 1996 :- NP : 1996:r, march :- NP : march:s, 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 1996
with logic: (intersect:<s*,s> march:s 1996:r)
and lexical entries: [march :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 march:s)), 1996 :- NP : 1996:r, march :- NP : march:s, 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Correct parses:
(intersect:<s*,s> march:s 1996:r) => ((intersect:<s*,s> march:s 1996:r)) => (DATE,1996-03)
Correct. No update.
Sample processing time 0.0050
97 : ================== [0]
Sample type: TemporalSentence
Phrase:            11th century
Sentence:          Howes' team was clearing mines 17 kilometers (10 miles) from Angkor Wat, the fabled 11th century temple that is Cambodia's main tourist attraction, when it was attacked.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          10
Executing the phrase: 11th century
with logic: 10:r
and lexical entries: [11th century :- NP : 10:r]
Executing the phrase: 11th century
with logic: (previous:<s,<r,s>> 10:r ref_time:r)
and lexical entries: [11th century :- NP : 10:r]
Executing the phrase: 11th century
with logic: (this:<s,<r,s>> 10:r ref_time:r)
and lexical entries: [11th century :- NP : 10:r]
Executing the phrase: 11th century
with logic: (next:<s,<r,s>> 10:r ref_time:r)
and lexical entries: [11th century :- NP : 10:r]
Executing the phrase: 11th century
with logic: 10:r
and lexical entries: [11th century :- NP : 10:r]
Correct parses:
10:r => (10:r) => (DATE,10)
Correct. No update.
Sample processing time 0.0040
98 : ================== [0]
Sample type: TemporalSentence
Phrase:            january this year
Sentence:          In January this year, British police officers who had been searching for Howes concluded he had probably been killed soon after being captured.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          1998-01
Executing the phrase: january this year
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: january this year
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: january this year
with logic: (this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: january this year
with logic: (next:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: january this year
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s) => ((intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s)) => (DATE,1998-01)
Correct. No update.
Sample processing time 0.0040
99 : ================== [0]
Sample type: TemporalSentence
Phrase:            weeks or months
Sentence:          The Foreign Office said it had informed the family of Howes, 37 years old when he was kidnapped, that he probably died within weeks or months of his capture on March 26, 1996.
ref_time:          1998-02-19
Gold type:         DURATION
gold val:          PXW
Executing the phrase: weeks or months
with logic: weeks:d
and lexical entries: [weeks or months :- NP : weeks:d]
Executing the phrase: weeks or months
with logic: weeks:d
and lexical entries: [weeks or months :- NP : weeks:d]
Executing the phrase: weeks or months
with logic: weeks:d
and lexical entries: [weeks or months :- NP : weeks:d]
Executing the phrase: weeks or months
with logic: weeks:d
and lexical entries: [weeks or months :- NP : weeks:d]
Executing the phrase: weeks or months
with logic: (temporal_ref:<d,s> weeks:d)
and lexical entries: [weeks or months :- NP : weeks:d]
Correct parses:
weeks:d => (weeks:d) => (DURATION,PXW)
Correct. No update.
Sample processing time 0.0050
100 : ================== [0]
Sample type: TemporalSentence
Phrase:            march 26 1996
Sentence:          The Foreign Office said it had informed the family of Howes, 37 years old when he was kidnapped, that he probably died within weeks or months of his capture on March 26, 1996.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          1996-03-26
Executing the phrase: march 26 1996
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r)
and lexical entries: [march :- NP : march:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 26 1996
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 26 1996
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 26 1996
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 26 1996
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r)
and lexical entries: [march :- NP : march:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r) => ((intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r)) => (DATE,1996-03-26)
Correct. No update.
Sample processing time 0.0070
101 : ================== [0]
Sample type: TemporalSentence
Phrase:            22 months
Sentence:          ``Obviously, it is deeply discouraging for the family after 22 months, but there is no proof of life.
ref_time:          1998-02-19
Gold type:         DURATION
gold val:          P22M
Executing the phrase: 22 months
with logic: (*:<d,<n,d>> months:d 22:n)
and lexical entries: [22 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 22:n)), months :- NP : months:d]
Executing the phrase: 22 months
with logic: (*:<d,<n,d>> months:d 22:n)
and lexical entries: [22 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 22:n)), months :- NP : months:d]
Executing the phrase: 22 months
with logic: (*:<d,<n,d>> months:d 22:n)
and lexical entries: [22 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 22:n)), months :- NP : months:d]
Executing the phrase: 22 months
with logic: (*:<d,<n,d>> months:d 22:n)
and lexical entries: [22 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 22:n)), months :- NP : months:d]
Executing the phrase: 22 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 22:n))
and lexical entries: [22 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 22:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 22:n) => ((*:<d,<n,d>> months:d 22:n)) => (DURATION,P22M)
Correct. No update.
Sample processing time 0.0040
102 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          Thai military officials who monitor Cambodian affairs said privately Thursday that Britain, through its embassies in Thailand and Cambodia, has been pushing hard to resolve the Howes case as the second anniversary of his abduction nears.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          1998-02-19
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((this:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1998-02-19)
Correct. No update.
Sample processing time 0.0030
103 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Nhek Bunchhay, who had been closely involved in the search for Howes before having to flee the Cambodian capital after a coup d'etat last year, appeared confident he would find Howes' remains.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          1997
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1997)
Correct. No update.
Sample processing time 0.0040
104 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Nhek Bunchhay said he now believed Howes had been killed within a week of his capture by a Khmer Rouge faction loyal to Pol Pot, then the guerrilla group's leader.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
105 : ================== [0]
Sample type: TemporalSentence
Phrase:            a week
Sentence:          Nhek Bunchhay said he now believed Howes had been killed within a week of his capture by a Khmer Rouge faction loyal to Pol Pot, then the guerrilla group's leader.
ref_time:          1998-02-19
Gold type:         DURATION
gold val:          P1W
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Correct parses:
week:d => (week:d) => (DURATION,P1W)
Correct. No update.
Sample processing time 0.0040
106 : ================== [0]
Sample type: TemporalSentence
Phrase:            the late 1970s
Sentence:          Pol Pot is considered responsible for the radical policies that led to the deaths of as many as 1.7 million Cambodians when the communist group held power in the late 1970s.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          197
Executing the phrase: the late 1970s
with logic: 197:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), late :- NP/NP : (lambda $0:s $0), 1970s :- NP : 197:r]
Executing the phrase: the late 1970s
with logic: (previous:<s,<r,s>> 197:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), late :- NP/NP : (lambda $0:s $0), 1970s :- NP : 197:r]
Executing the phrase: the late 1970s
with logic: (this:<s,<r,s>> 197:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), late :- NP/NP : (lambda $0:s $0), 1970s :- NP : 197:r]
Executing the phrase: the late 1970s
with logic: (next:<s,<r,s>> 197:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), late :- NP/NP : (lambda $0:s $0), 1970s :- NP : 197:r]
Executing the phrase: the late 1970s
with logic: 197:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), late :- NP/NP : (lambda $0:s $0), 1970s :- NP : 197:r]
Correct parses:
197:r => (197:r) => (DATE,197)
Correct. No update.
Sample processing time 0.0050
107 : ================== [0]
Sample type: TemporalSentence
Phrase:            mid 1996
Sentence:          But the group began to fall apart in mid-1996 after the defection of one of its top leaders, Ieng Sary.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          1996
Executing the phrase: mid 1996
with logic: 1996:r
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), 1996 :- NP : 1996:r]
Executing the phrase: mid 1996
with logic: (previous:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), 1996 :- NP : 1996:r]
Executing the phrase: mid 1996
with logic: (this:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), 1996 :- NP : 1996:r]
Executing the phrase: mid 1996
with logic: (next:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), 1996 :- NP : 1996:r]
Executing the phrase: mid 1996
with logic: 1996:r
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), 1996 :- NP : 1996:r]
Correct parses:
1996:r => (1996:r) => (DATE,1996)
Correct. No update.
Sample processing time 0.0030
108 : ================== [0]
Sample type: TemporalSentence
Phrase:            june last year
Sentence:          But in June last year, the remaining leadership had a falling out, and Pol Pot was arrested.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          1997-06
Executing the phrase: june last year
with logic: (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: june last year
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: june last year
with logic: (this:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: june last year
with logic: (next:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: june last year
with logic: (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s) => ((intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s)) => (DATE,1997-06)
Correct. No update.
Sample processing time 0.0040
109 : ================== [0]
Sample type: TemporalSentence
Phrase:            july last year
Sentence:          In July last year in Phnom Penh, Cambodia's capital, Second Prime Minister Hun Sen staged a successful coup d'etat against First Prime Minister Prince Norodom Ranariddh.
ref_time:          1998-02-19
Gold type:         DATE
gold val:          1997-06
Executing the phrase: july last year
with logic: (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: july last year
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: july last year
with logic: (this:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: july last year
with logic: (next:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: july last year
with logic: (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Bad violating parse: ((intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s), ((this:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s) ref_time:r)) => (DATE,1997-07))
Bad violating parse: ((intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s), ((next:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s) ref_time:r)) => (DATE,1997-07))
No correct parses. No update.
Sample processing time 0.0030
110 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          MOSCOW (AP)_ The mayor of Moscow has allocated funds to help build a museum in honor of Mikhail Kalashnikov, the Russian who gave his name to the world's most widely wielded weapon, according to a news agency report Friday.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1998-02-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-27)
Correct. No update.
Sample processing time 0.0070
111 : ================== [0]
Sample type: TemporalSentence
Phrase:            february 1947
Sentence:          Seventy-five million copies of the rifle have been built since it entered production in February 1947, making it history's most widely distributed weapon.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1947-02
Executing the phrase: february 1947
with logic: (intersect:<s*,s> february:s 1947:r)
and lexical entries: [february :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 february:s)), 1947 :- NP : 1947:r, february :- NP : february:s, 1947 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1947:r))]
Executing the phrase: february 1947
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 1947:r) ref_time:r)
and lexical entries: [february :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 february:s)), 1947 :- NP : 1947:r, february :- NP : february:s, 1947 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1947:r))]
Executing the phrase: february 1947
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 1947:r) ref_time:r)
and lexical entries: [february :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 february:s)), 1947 :- NP : 1947:r, february :- NP : february:s, 1947 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1947:r))]
Executing the phrase: february 1947
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 1947:r) ref_time:r)
and lexical entries: [february :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 february:s)), 1947 :- NP : 1947:r, february :- NP : february:s, 1947 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1947:r))]
Executing the phrase: february 1947
with logic: (intersect:<s*,s> february:s 1947:r)
and lexical entries: [february :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 february:s)), 1947 :- NP : 1947:r, february :- NP : february:s, 1947 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1947:r))]
Correct parses:
(intersect:<s*,s> february:s 1947:r) => ((intersect:<s*,s> february:s 1947:r)) => (DATE,1947-02)
Correct. No update.
Sample processing time 0.0040
112 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          THE HAGUE, Netherlands (AP)_ The World Court Friday rejected U.S. and British objections to a Libyan World Court case that has blocked the trial of two Libyans suspected of blowing up a Pan Am jumbo jet over Scotland in 1988.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1998-02-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-27)
Correct. No update.
Sample processing time 0.0040
113 : ================== [0]
Sample type: TemporalSentence
Phrase:            1988
Sentence:          THE HAGUE, Netherlands (AP)_ The World Court Friday rejected U.S. and British objections to a Libyan World Court case that has blocked the trial of two Libyans suspected of blowing up a Pan Am jumbo jet over Scotland in 1988.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1988
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Correct parses:
1988:r => (1988:r) => (DATE,1988)
Correct. No update.
Sample processing time 0.0060
114 : ================== [0]
Sample type: TemporalSentence
Phrase:            1995
Sentence:          Both U.S. and British officials filed objections to the court's jurisdiction in 1995, claiming Security Council resolutions imposed on Lybia to force the suspects' extradition overruled a 1971 Convention which gives Libya the right to try the men.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1995
Executing the phrase: 1995
with logic: 1995:r
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (previous:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (this:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (next:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: 1995:r
and lexical entries: [1995 :- NP : 1995:r]
Correct parses:
1995:r => (1995:r) => (DATE,1995)
Correct. No update.
Sample processing time 0.0040
115 : ================== [0]
Sample type: TemporalSentence
Phrase:            1971
Sentence:          Both U.S. and British officials filed objections to the court's jurisdiction in 1995, claiming Security Council resolutions imposed on Lybia to force the suspects' extradition overruled a 1971 Convention which gives Libya the right to try the men.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1971
Executing the phrase: 1971
with logic: 1971:r
and lexical entries: [1971 :- NP : 1971:r]
Executing the phrase: 1971
with logic: (previous:<s,<r,s>> 1971:r ref_time:r)
and lexical entries: [1971 :- NP : 1971:r]
Executing the phrase: 1971
with logic: (this:<s,<r,s>> 1971:r ref_time:r)
and lexical entries: [1971 :- NP : 1971:r]
Executing the phrase: 1971
with logic: (next:<s,<r,s>> 1971:r ref_time:r)
and lexical entries: [1971 :- NP : 1971:r]
Executing the phrase: 1971
with logic: 1971:r
and lexical entries: [1971 :- NP : 1971:r]
Correct parses:
1971:r => (1971:r) => (DATE,1971)
Correct. No update.
Sample processing time 0.0050
116 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          JERUSALEM (AP)_ Taking the stand in her own defense, a friend of Yitzhak Rabin's assassin said Friday that she regretted calling the prime minister a traitor and praying for his death.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1998-02-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-27)
Correct. No update.
Sample processing time 0.0050
117 : ================== [0]
Sample type: TemporalSentence
Phrase:            more than four hours
Sentence:          She took the stand for more than four hours Friday in a Tel Aviv magistrate's court.
ref_time:          1998-02-27
Gold type:         DURATION
gold val:          PT4H
Executing the phrase: more than four hours
with logic: (*:<d,<n,d>> hour:d 4:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), hours :- NP : hour:d]
Executing the phrase: more than four hours
with logic: (*:<d,<n,d>> hour:d 4:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), hours :- NP : hour:d]
Executing the phrase: more than four hours
with logic: (*:<d,<n,d>> hour:d 4:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), hours :- NP : hour:d]
Executing the phrase: more than four hours
with logic: (*:<d,<n,d>> hour:d 4:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), hours :- NP : hour:d]
Executing the phrase: more than four hours
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> hour:d 4:n))
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), hours :- NP : hour:d]
Correct parses:
(*:<d,<n,d>> hour:d 4:n) => ((*:<d,<n,d>> hour:d 4:n)) => (DURATION,PT4H)
Correct. No update.
Sample processing time 0.0040
118 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          She took the stand for more than four hours Friday in a Tel Aviv magistrate's court.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1998-02-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-27)
Correct. No update.
Sample processing time 0.0030
119 : ================== [0]
Sample type: TemporalSentence
Phrase:            november 1995
Sentence:          Amir, 27, is serving a life sentence for the November 1995 assassination of Rabin at a Tel Aviv peace rally.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1995-11
Executing the phrase: november 1995
with logic: (intersect:<s*,s> november:s 1995:r)
and lexical entries: [november :- NP : november:s, 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: november 1995
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 1995:r) ref_time:r)
and lexical entries: [november :- NP : november:s, 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: november 1995
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 1995:r) ref_time:r)
and lexical entries: [november :- NP : november:s, 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: november 1995
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 1995:r) ref_time:r)
and lexical entries: [november :- NP : november:s, 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: november 1995
with logic: (intersect:<s*,s> november:s 1995:r)
and lexical entries: [november :- NP : november:s, 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Correct parses:
(intersect:<s*,s> november:s 1995:r) => ((intersect:<s*,s> november:s 1995:r)) => (DATE,1995-11)
Correct. No update.
Sample processing time 0.0030
120 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          ADDIS ABABA, Ethiopia (AP)_ The Organization of African Unity said Friday it would investigate the Hutu-organized genocide of more than 500,000 minority Tutsis in Rwanda nearly four years ago.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1998-02-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-27)
Correct. No update.
Sample processing time 0.0110
121 : ================== [0]
Sample type: TemporalSentence
Phrase:            nearly four years ago
Sentence:          ADDIS ABABA, Ethiopia (AP)_ The Organization of African Unity said Friday it would investigate the Hutu-organized genocide of more than 500,000 minority Tutsis in Rwanda nearly four years ago.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1994
Executing the phrase: nearly four years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly four years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly four years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly four years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly four years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r)) => (DATE,1994)
Correct. No update.
Sample processing time 0.0070
122 : ================== [0]
Sample type: TemporalSentence
Phrase:            april 6 1994
Sentence:          Foreign ministers of member-states meeting in the Ethiopian capital agreed to set up a seven-member panel to investigate who shot down Rwandan President Juvenal Habyarimana's plane on April 6, 1994.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1994-04-06
Executing the phrase: april 6 1994
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r)
and lexical entries: [april :- NP : april:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: april 6 1994
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r) ref_time:r)
and lexical entries: [april :- NP : april:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: april 6 1994
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r) ref_time:r)
and lexical entries: [april :- NP : april:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: april 6 1994
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r) ref_time:r)
and lexical entries: [april :- NP : april:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: april 6 1994
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r)
and lexical entries: [april :- NP : april:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r) => ((intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r)) => (DATE,1994-04-06)
Correct. No update.
Sample processing time 0.0060
123 : ================== [0]
Sample type: TemporalSentence
Phrase:            2 1/2 years
Sentence:          The panel also will look at the exodus of about 2 million Rwanda Hutus to neighboring countries where they lived in U.N.-run refugee camps for 2 1/2 years.
ref_time:          1998-02-27
Gold type:         DURATION
gold val:          P2Y6M
No correct parses. No update.
Sample processing time 0.0010
124 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year
Sentence:          The panel will be based in Addis Ababa, and will finish its investigation within a year, it said.
ref_time:          1998-02-27
Gold type:         DURATION
gold val:          P1Y
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Correct parses:
year:d => (year:d) => (DURATION,P1Y)
Correct. No update.
Sample processing time 0.0030
125 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          MOSCOW (AP)_ Presidents Leonid Kuchma of Ukraine and Boris Yeltsin of Russia signed an economic cooperation plan Friday, and Yeltsin claimed they resolved even more nagging problems.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1998-02-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-27)
Correct. No update.
Sample processing time 0.0040
126 : ================== [0]
Sample type: TemporalSentence
Phrase:            centuries
Sentence:          Russia and Ukraine share similar cultures and languages, and Ukraine was ruled from Moscow for centuries.
ref_time:          1998-02-27
Gold type:         DURATION
gold val:          PXE
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 100:n))
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Bad violating parse: ((*:<d,<n,d>> year:d 100:n), ((*:<d,<n,d>> year:d 100:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> year:d 100:n), ((*:<d,<n,d>> year:d 100:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> year:d 100:n), ((*:<d,<n,d>> year:d 100:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> year:d 100:n), ((*:<d,<n,d>> year:d 100:n)) => (DURATION,P1C))
No correct parses. No update.
Sample processing time 0.0040
127 : ================== [0]
Sample type: TemporalSentence
Phrase:            last may
Sentence:          A major dispute concerns a broad political treaty calling for border demarcation, which the two presidents signed last May.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1997-05
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Correct parses:
(previous:<s,<r,s>> may:s ref_time:r) => ((previous:<s,<r,s>> may:s ref_time:r)) => (DATE,1997-05)
Correct. No update.
Sample processing time 0.0040
128 : ================== [0]
Sample type: TemporalSentence
Phrase:            at least 20 more years
Sentence:          However, Russia has stalled ratification, trying to tie it to an agreement that would permit the Russian navy to use a naval base on Ukraine's Crimean peninsula for at least 20 more years.
ref_time:          1998-02-27
Gold type:         DURATION
gold val:          P20Y
Executing the phrase: at least 20 more years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), more :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: at least 20 more years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), more :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: at least 20 more years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), more :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: at least 20 more years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), more :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: at least 20 more years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 20:n))
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), more :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 20:n) => ((*:<d,<n,d>> years:d 20:n)) => (DURATION,P20Y)
Correct. No update.
Sample processing time 0.0060
129 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Last year, Russian officials assailed Ukraine for holding joint naval exercises with NATO in the Black Sea _ an area Moscow considers its own turf.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1997
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1997)
Correct. No update.
Sample processing time 0.0020
130 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past
Sentence:          In the past, Russia has often claimed that Ukraine was undermining efforts at closer cooperation within the CIS.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
131 : ================== [0]
Sample type: TemporalSentence
Phrase:            four day
Sentence:          A major goal of Kuchma's four-day state visit was the signing of a 10-year economic program aimed at doubling the two nations' trade turnover, which fell to dlrs 14 billion last year, down dlrs 2.5 billion from 1996.
ref_time:          1998-02-27
Gold type:         DURATION
gold val:          P4D
Executing the phrase: four day
with logic: (*:<d,<n,d>> day:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), day :- NP : day:d]
Executing the phrase: four day
with logic: (*:<d,<n,d>> day:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), day :- NP : day:d]
Executing the phrase: four day
with logic: (*:<d,<n,d>> day:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), day :- NP : day:d]
Executing the phrase: four day
with logic: (*:<d,<n,d>> day:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), day :- NP : day:d]
Executing the phrase: four day
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> day:d 4:n))
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), day :- NP : day:d]
Correct parses:
(*:<d,<n,d>> day:d 4:n) => ((*:<d,<n,d>> day:d 4:n)) => (DURATION,P4D)
Correct. No update.
Sample processing time 0.0030
132 : ================== [0]
Sample type: TemporalSentence
Phrase:            10 year
Sentence:          A major goal of Kuchma's four-day state visit was the signing of a 10-year economic program aimed at doubling the two nations' trade turnover, which fell to dlrs 14 billion last year, down dlrs 2.5 billion from 1996.
ref_time:          1998-02-27
Gold type:         DURATION
gold val:          P10Y
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 10:n))
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 10:n) => ((*:<d,<n,d>> year:d 10:n)) => (DURATION,P10Y)
Correct. No update.
Sample processing time 0.0040
133 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          A major goal of Kuchma's four-day state visit was the signing of a 10-year economic program aimed at doubling the two nations' trade turnover, which fell to dlrs 14 billion last year, down dlrs 2.5 billion from 1996.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1997
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1997)
Correct. No update.
Sample processing time 0.0060
134 : ================== [0]
Sample type: TemporalSentence
Phrase:            1996
Sentence:          A major goal of Kuchma's four-day state visit was the signing of a 10-year economic program aimed at doubling the two nations' trade turnover, which fell to dlrs 14 billion last year, down dlrs 2.5 billion from 1996.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1996
Executing the phrase: 1996
with logic: 1996:r
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (previous:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (this:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (next:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: 1996:r
and lexical entries: [1996 :- NP : 1996:r]
Correct parses:
1996:r => (1996:r) => (DATE,1996)
Correct. No update.
Sample processing time 0.0050
135 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          The two presidents on Friday signed the plan, which calls for cooperation in the metallurgy, fuel, energy, aircraft building, missile, space and chemical industries.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1998-02-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-27)
Correct. No update.
Sample processing time 0.0030
136 : ================== [0]
Sample type: TemporalSentence
Phrase:            sunday
Sentence:          JERUSALEM (AP)_ Top Israeli officials sent strong new signals Sunday that Israel wants to withdraw from southern Lebanon, where a costly war of attrition has been steadily claiming soldiers' lives.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1998-03-01
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Correct parses:
sunday:s => ((this:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1998-03-01)
Correct. No update.
Sample processing time 0.0040
137 : ================== [0]
Sample type: TemporalSentence
Phrase:            sunday
Sentence:          Prime Minister Benjamin Netanyahu told his Cabinet on Sunday that Israel was willing to withdraw from southern Lebanon provided Israel's northern frontier could be secured.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1998-03-01
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Correct parses:
sunday:s => ((this:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1998-03-01)
Correct. No update.
Sample processing time 0.0030
138 : ================== [0]
Sample type: TemporalSentence
Phrase:            1978
Sentence:          That 1978 resolution calls for Israel's unconditional withdrawal from the self-declared security zone it occupies in south Lebanon, and for the deployment of the Lebanese army and U.N. forces to ensure security along the Lebanese-Israeli border.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1978
Executing the phrase: 1978
with logic: 1978:r
and lexical entries: [1978 :- NP : 1978:r]
Executing the phrase: 1978
with logic: (previous:<s,<r,s>> 1978:r ref_time:r)
and lexical entries: [1978 :- NP : 1978:r]
Executing the phrase: 1978
with logic: (this:<s,<r,s>> 1978:r ref_time:r)
and lexical entries: [1978 :- NP : 1978:r]
Executing the phrase: 1978
with logic: (next:<s,<r,s>> 1978:r ref_time:r)
and lexical entries: [1978 :- NP : 1978:r]
Executing the phrase: 1978
with logic: 1978:r
and lexical entries: [1978 :- NP : 1978:r]
Correct parses:
1978:r => (1978:r) => (DATE,1978)
Correct. No update.
Sample processing time 0.0020
139 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          On Friday, Netanyahu said he had ``no qualms'' about implementing the U.N. resolution, as long as Israel had ``the necessary security safeguards.''
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1998-02-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-27)
Bad violating parse: (friday:s, ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-WXX-5))
Bad violating parse: (friday:s, ((next:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-03-06))
Update: {TEMPORAL_CONTEXT__next_VBD=-0.5, TEMPORAL_CONTEXT__previous_VBD=1.0, TEMPORAL_CONTEXT__this_VBD=-0.5, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-0.5, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-0.5, TEMPORAL_WEEKDAY_notSameDay_next=-0.5, TEMPORAL_WEEKDAY_notSameDay_previous=1.0, TEMPORAL_WEEKDAY_notSameDay_this=-0.5}
Sample processing time 0.0030
140 : ================== [0]
Sample type: TemporalSentence
Phrase:            sunday
Sentence:          Cabinet minister Michael Eitan said Sunday that Netanyahu's remarks marked a substantive change in Israel's position.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1998-03-01
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Correct parses:
sunday:s => ((this:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1998-03-01)
Correct. No update.
Sample processing time 0.0030
141 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          ``This is a new thing...it means that we are willing to talk today _ full stop _ about security,'' Lubrani told Israel's Channel One.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1998-03-01
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-03-01)
Correct. No update.
Sample processing time 0.0030
142 : ================== [0]
Sample type: TemporalSentence
Phrase:            1985
Sentence:          Since 1985 _ when the Israelis created a security buffer zone southern Lebanon _ nearly 200 Israeli soldiers have been killed fighting Hezbollah and other guerrillas.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1985
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (previous:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (this:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (next:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Correct parses:
1985:r => (1985:r) => (DATE,1985)
Correct. No update.
Sample processing time 0.0020
143 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          Last week, Hezbollah fighters killed three Israeli soldiers and seriously wounded six others.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1998-W08
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(previous:<d,<r,s>> week:d ref_time:r) => ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W08)
Correct. No update.
Sample processing time 0.0030
144 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          The Israelis suffered a record 39 deaths in southern Lebanon last year.
ref_time:          1998-03-01
Gold type:         DURATION
gold val:          1997
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1997))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1997))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1997))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1997))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1997))
No correct parses. No update.
Sample processing time 0.0030
145 : ================== [0]
Sample type: TemporalSentence
Phrase:            last february
Sentence:          In addition, 73 soldiers were killed en route to Lebanon when two military helicopters crashed last February.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1997-02
Executing the phrase: last february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), february :- NP : february:s]
Executing the phrase: last february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), february :- NP : february:s]
Executing the phrase: last february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), february :- NP : february:s]
Executing the phrase: last february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), february :- NP : february:s]
Executing the phrase: last february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), february :- NP : february:s]
Bad violating parse: ((previous:<s,<r,s>> february:s ref_time:r), ((previous:<s,<r,s>> february:s ref_time:r)) => (DATE,1998-02))
Bad violating parse: ((previous:<s,<r,s>> february:s ref_time:r), ((previous:<s,<r,s>> february:s ref_time:r)) => (DATE,1998-02))
Bad violating parse: ((previous:<s,<r,s>> february:s ref_time:r), ((previous:<s,<r,s>> february:s ref_time:r)) => (DATE,1998-02))
Bad violating parse: ((previous:<s,<r,s>> february:s ref_time:r), ((previous:<s,<r,s>> february:s ref_time:r)) => (DATE,1998-02))
Bad violating parse: ((previous:<s,<r,s>> february:s ref_time:r), ((previous:<s,<r,s>> february:s ref_time:r)) => (DATE,1998-02))
No correct parses. No update.
Sample processing time 0.0030
146 : ================== [0]
Sample type: TemporalSentence
Phrase:            sunday
Sentence:          The Maariv newspaper said Sunday that Netanyahu's comments last week were in response to signals from Syria that it wants to renew the long-stalled peace talks between the two countries.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1998-03-01
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Correct parses:
sunday:s => ((this:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1998-03-01)
Correct. No update.
Sample processing time 0.0020
147 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          The Maariv newspaper said Sunday that Netanyahu's comments last week were in response to signals from Syria that it wants to renew the long-stalled peace talks between the two countries.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1998-W08
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(previous:<d,<r,s>> week:d ref_time:r) => ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W08)
Correct. No update.
Sample processing time 0.0030
148 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          The newspaper, quoting ``secret reports,'' said Syria had indicated its interest in resuming talks in remarks made last week by the Syrian ambassador to Washington, Walid Mualem, in a lecture to a closed forum in Baltimore.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1998-W08
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(previous:<d,<r,s>> week:d ref_time:r) => ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W08)
Correct. No update.
Sample processing time 0.0050
149 : ================== [0]
Sample type: TemporalSentence
Phrase:            sunday
Sentence:          Two top aides to Netanyahu, political adviser Uzi Arad and Cabinet Secretary Danny Naveh, left for Europe on Sunday, apparently to investigate the Syrian issue, the newspaper said.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1998-03-01
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Correct parses:
sunday:s => ((this:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1998-03-01)
Correct. No update.
Sample processing time 0.0040
150 : ================== [0]
Sample type: TemporalSentence
Phrase:            nearly two years
Sentence:          Israel-Syrian talks have been cut off for nearly two years.
ref_time:          1998-03-01
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: nearly two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: nearly two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: nearly two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: nearly two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: nearly two years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 2:n) => ((*:<d,<n,d>> years:d 2:n)) => (DURATION,P2Y)
Correct. No update.
Sample processing time 0.0030
151 : ================== [0]
Sample type: TemporalSentence
Phrase:            six weeks ago
Sentence:          Defense Minister Yitzhak Mordechai was the first senior Israeli official to refer to U.N. resolution 425 in a speech six weeks ago, saying at the time he was willing to withdraw troops in exchange for guarantees that Israel would not be attacked.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          1998-W02
Executing the phrase: six weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: six weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: six weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: six weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: six weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)) => (DATE,1998-W03))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)) => (DATE,1998-W03))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)) => (DATE,1998-W03))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)) => (DATE,1998-W03))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)) => (DATE,1998-W03))
No correct parses. No update.
Sample processing time 0.0050
152 : ================== [0]
Sample type: TemporalSentence
Phrase:            the time
Sentence:          Defense Minister Yitzhak Mordechai was the first senior Israeli official to refer to U.N. resolution 425 in a speech six weeks ago, saying at the time he was willing to withdraw troops in exchange for guarantees that Israel would not be attacked.
ref_time:          1998-03-01
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: the time
with logic: past_ref:r
and lexical entries: [the time :- NP : past_ref:r]
Executing the phrase: the time
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the time :- NP : past_ref:r]
Executing the phrase: the time
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the time :- NP : past_ref:r]
Executing the phrase: the time
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the time :- NP : past_ref:r]
Executing the phrase: the time
with logic: past_ref:r
and lexical entries: [the time :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0050
153 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          BAGHDAD, Iraq (AP)_ An American leader of a U.N. weapons inspection team resumed work in Iraq Friday, nearly two months after his team was effectively blocked.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          1998-03-06
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-03-06)
Correct. No update.
Sample processing time 0.0040
154 : ================== [0]
Sample type: TemporalSentence
Phrase:            nearly two months
Sentence:          BAGHDAD, Iraq (AP)_ An American leader of a U.N. weapons inspection team resumed work in Iraq Friday, nearly two months after his team was effectively blocked.
ref_time:          1998-03-06
Gold type:         DURATION
gold val:          P2M
Executing the phrase: nearly two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: nearly two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: nearly two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: nearly two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: nearly two months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 2:n))
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 2:n) => ((*:<d,<n,d>> months:d 2:n)) => (DURATION,P2M)
Correct. No update.
Sample processing time 0.0050
155 : ================== [0]
Sample type: TemporalSentence
Phrase:            10 hour
Sentence:          Scott Ritter led his team on a 10-hour tour of three suspected weapons sites classified as ``sensitive'' by the Iraqi authorities, U.N. spokesman Alan Dacey said.
ref_time:          1998-03-06
Gold type:         DURATION
gold val:          PT10H
Executing the phrase: 10 hour
with logic: (*:<d,<n,d>> hour:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), hour :- NP : hour:d]
Executing the phrase: 10 hour
with logic: (*:<d,<n,d>> hour:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), hour :- NP : hour:d]
Executing the phrase: 10 hour
with logic: (*:<d,<n,d>> hour:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), hour :- NP : hour:d]
Executing the phrase: 10 hour
with logic: (*:<d,<n,d>> hour:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), hour :- NP : hour:d]
Executing the phrase: 10 hour
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> hour:d 10:n))
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), hour :- NP : hour:d]
Correct parses:
(*:<d,<n,d>> hour:d 10:n) => ((*:<d,<n,d>> hour:d 10:n)) => (DURATION,PT10H)
Correct. No update.
Sample processing time 0.0020
156 : ================== [0]
Sample type: TemporalSentence
Phrase:            previously
Sentence:          Previously the Iraqis have resisted attempts to inspect such quarters.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0010
157 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          It was the first time that Ritter, who arrived Thursday with some 50 inspectors for a tour likely to last over a week, had been allowed to carry out an inspection since Jan. 13.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          1998-03-05
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1998-03-05)
Correct. No update.
Sample processing time 0.0040
158 : ================== [0]
Sample type: TemporalSentence
Phrase:            over a week
Sentence:          It was the first time that Ritter, who arrived Thursday with some 50 inspectors for a tour likely to last over a week, had been allowed to carry out an inspection since Jan. 13.
ref_time:          1998-03-06
Gold type:         DURATION
gold val:          P1W
Executing the phrase: over a week
with logic: week:d
and lexical entries: [over :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: over a week
with logic: week:d
and lexical entries: [over :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: over a week
with logic: week:d
and lexical entries: [over :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: over a week
with logic: week:d
and lexical entries: [over :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: over a week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [over :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Correct parses:
week:d => (week:d) => (DURATION,P1W)
Correct. No update.
Sample processing time 0.0040
159 : ================== [0]
Sample type: TemporalSentence
Phrase:            jan. 13
Sentence:          It was the first time that Ritter, who arrived Thursday with some 50 inspectors for a tour likely to last over a week, had been allowed to carry out an inspection since Jan. 13.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          1998-01-13
Executing the phrase: jan. 13
with logic: (intersect:<s*,s> january:s 13d:s)
and lexical entries: [jan. :- NP : january:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: jan. 13
with logic: (previous:<s,<r,s>> (intersect:<s*,s> january:s 13d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: jan. 13
with logic: (this:<s,<r,s>> (intersect:<s*,s> january:s 13d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: jan. 13
with logic: (next:<s,<r,s>> (intersect:<s*,s> january:s 13d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: jan. 13
with logic: (intersect:<s*,s> january:s 13d:s)
and lexical entries: [jan. :- NP : january:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Correct parses:
(intersect:<s*,s> january:s 13d:s) => ((this:<s,<r,s>> (intersect:<s*,s> january:s 13d:s) ref_time:r)) => (DATE,1998-01-13)
Correct. No update.
Sample processing time 0.0050
160 : ================== [0]
Sample type: TemporalSentence
Phrase:            daily
Sentence:          The official Iraqi News Agency, which gives the daily tally of inspections, did not mention Ritter by name, but said Friday that team no. 225 _ which Ritter heads _ made surprise visits to a number of sites and was assisted by aerial surveillance.
ref_time:          1998-03-06
Gold type:         SET
gold val:          XXXX-XX-XX
No correct parses. No update.
Sample processing time 0.0010
161 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          The official Iraqi News Agency, which gives the daily tally of inspections, did not mention Ritter by name, but said Friday that team no. 225 _ which Ritter heads _ made surprise visits to a number of sites and was assisted by aerial surveillance.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          1998-03-06
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-03-06)
Correct. No update.
Sample processing time 0.0040
162 : ================== [0]
Sample type: TemporalSentence
Phrase:            feb. 23
Sentence:          The official said these sites could only be visited by a special team of U.N. monitors and diplomats as laid down by the Feb. 23 accord signed by U.N. Secretary-General Kofi Annan and Iraqi Deputy Prime Minister Tariq Aziz.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          1998-02-23
Executing the phrase: feb. 23
with logic: (intersect:<s*,s> february:s 23d:s)
and lexical entries: [feb. :- NP : february:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: feb. 23
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 23d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: feb. 23
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 23d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: feb. 23
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 23d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: feb. 23
with logic: (intersect:<s*,s> february:s 23d:s)
and lexical entries: [feb. :- NP : february:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Correct parses:
(intersect:<s*,s> february:s 23d:s) => ((this:<s,<r,s>> (intersect:<s*,s> february:s 23d:s) ref_time:r)) => (DATE,1998-02-23)
Correct. No update.
Sample processing time 0.0040
163 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          A Pentagon spokesman said Thursday that the 38,000 U.S. troops in the Gulf will remain until Iraq complies with the U.N. Security Council agreement over weapons inspections.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          1998-03-05
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1998-03-05)
Correct. No update.
Sample processing time 0.0020
164 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          The U.N.-Iraq accord was worked out by U.N. Secretary-General Kofi Annan, who appointed a retired Indian diplomat on Thursday as his special representative to Iraq.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          1998-03-05
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1998-03-05)
Correct. No update.
Sample processing time 0.0030
165 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          U.N. officials in New York on Friday finished drafting the rules, in consultation with Iraqi diplomats.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          1998-03-06
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-03-06)
Correct. No update.
Sample processing time 0.0030
166 : ================== [0]
Sample type: TemporalSentence
Phrase:            next week
Sentence:          The procedures are due to go before the Security Council next week.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          1998-W11
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(next:<d,<r,s>> week:d ref_time:r) => ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W11)
Correct. No update.
Sample processing time 0.0030
167 : ================== [0]
Sample type: TemporalSentence
Phrase:            1990
Sentence:          The Security Council has said it will not lift the sweeping sanctions imposed on Iraq after its 1990 invasion of Kuwait until the U.N. inspectors certify that Baghdad has eliminated its weapons of mass destruction.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          1990
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
168 : ================== [0]
Sample type: TemporalSentence
Phrase:            sunday
Sentence:          ISTANBUL, Turkey (AP)_ Some 1,500 ethnic Albanians marched Sunday in downtown Istanbul, burning Serbian flags to protest the killings of ethnic Albanians by Serb police in southern Serb Kosovo province.
ref_time:          1998-03-08
Gold type:         DATE
gold val:          1998-03-08
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Correct parses:
sunday:s => ((this:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1998-03-08)
Correct. No update.
Sample processing time 0.0030
169 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent days
Sentence:          At least 51 people were reported killed in clashes between Serb police and ethnic Albanians in the troubled region in recent days.
ref_time:          1998-03-08
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recent days
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), days :- NP : days:d]
Executing the phrase: recent days
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), days :- NP : days:d]
Executing the phrase: recent days
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), days :- NP : days:d]
Executing the phrase: recent days
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), days :- NP : days:d]
Executing the phrase: recent days
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), days :- NP : days:d]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0030
170 : ================== [0]
Sample type: TemporalSentence
Phrase:            sunday
Sentence:          BELFAST, Northern Ireland (AP)_ Police seized a car bomb under construction Sunday in a town bordering Northern Ireland on the eve of the return to peace talks by the IRA-allied Sinn Fein party.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-03-22
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Correct parses:
sunday:s => ((this:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1998-03-22)
Correct. No update.
Sample processing time 0.0030
171 : ================== [0]
Sample type: TemporalSentence
Phrase:            8 month old
Sentence:          The discovery appeared to be the latest attempt by extremists opposed to the IRA's 8-month-old truce to undermine the peace process, set to resume Monday in Belfast.
ref_time:          1998-03-22
Gold type:         DURATION
gold val:          P8M
Executing the phrase: 8 month old
with logic: (*:<d,<n,d>> month:d 8:n)
and lexical entries: [8 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), month :- NP : month:d, old :- NP\NP : (lambda $0:d $0)]
Executing the phrase: 8 month old
with logic: (*:<d,<n,d>> month:d 8:n)
and lexical entries: [8 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), month :- NP : month:d, old :- NP\NP : (lambda $0:d $0)]
Executing the phrase: 8 month old
with logic: (*:<d,<n,d>> month:d 8:n)
and lexical entries: [8 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), month :- NP : month:d, old :- NP\NP : (lambda $0:d $0)]
Executing the phrase: 8 month old
with logic: (*:<d,<n,d>> month:d 8:n)
and lexical entries: [8 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), month :- NP : month:d, old :- NP\NP : (lambda $0:d $0)]
Executing the phrase: 8 month old
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> month:d 8:n))
and lexical entries: [8 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), month :- NP : month:d, old :- NP\NP : (lambda $0:d $0)]
Correct parses:
(*:<d,<n,d>> month:d 8:n) => ((*:<d,<n,d>> month:d 8:n)) => (DURATION,P8M)
Correct. No update.
Sample processing time 0.0040
172 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          The discovery appeared to be the latest attempt by extremists opposed to the IRA's 8-month-old truce to undermine the peace process, set to resume Monday in Belfast.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-03-23
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Correct parses:
monday:s => ((next:<s,<r,s>> monday:s ref_time:r)) => (DATE,1998-03-23)
Bad violating parse: (monday:s, ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1998-03-16))
Update: {TEMPORAL_CONTEXT__next_VB=1.0, TEMPORAL_CONTEXT__previous_VB=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0, TEMPORAL_WEEKDAY_notSameDay_next=1.0, TEMPORAL_WEEKDAY_notSameDay_previous=-1.0}
Sample processing time 0.0050
173 : ================== [0]
Sample type: TemporalSentence
Phrase:            feb. 20
Sentence:          Extremists have bombed two predominantly pro-British Protestant towns and fired mortar shells at a police station since Sinn Fein was expelled from peace talks on Feb. 20 in punishment for two killings blamed on the Irish Republican Army.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-02-20
Executing the phrase: feb. 20
with logic: (intersect:<s*,s> february:s 20d:s)
and lexical entries: [feb. :- NP : february:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: feb. 20
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 20d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: feb. 20
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 20d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: feb. 20
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 20d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: feb. 20
with logic: (intersect:<s*,s> february:s 20d:s)
and lexical entries: [feb. :- NP : february:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Correct parses:
(intersect:<s*,s> february:s 20d:s) => ((this:<s,<r,s>> (intersect:<s*,s> february:s 20d:s) ref_time:r)) => (DATE,1998-02-20)
Bad violating parse: ((intersect:<s*,s> february:s 20d:s), ((next:<s,<r,s>> (intersect:<s*,s> february:s 20d:s) ref_time:r)) => (DATE,1999-02-20))
Update: {TEMPORAL_CONTEXT__next_VBN=-1.0, TEMPORAL_CONTEXT__this_VBN=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0050
174 : ================== [0]
Sample type: TemporalSentence
Phrase:            sunday
Sentence:          Police found more than 1,300 pounds (600 kgs) of fertilizer-based explosives Sunday in a shed in Dundalk, 50 miles (80 kms) south of Belfast.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-03-22
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Correct parses:
sunday:s => ((this:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1998-03-22)
Correct. No update.
Sample processing time 0.0030
175 : ================== [0]
Sample type: TemporalSentence
Phrase:            may
Sentence:          The British and Irish governments, which cosponsor the multi-party talks that are supposed to conclude by May, invited Sinn Fein to rejoin two weeks ago.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-05
Executing the phrase: may
with logic: may:s
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (this:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (next:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: may:s
and lexical entries: [may :- NP : may:s]
Correct parses:
may:s => ((next:<s,<r,s>> may:s ref_time:r)) => (DATE,1998-05)
Correct. No update.
Sample processing time 0.0030
176 : ================== [0]
Sample type: TemporalSentence
Phrase:            two weeks ago
Sentence:          The British and Irish governments, which cosponsor the multi-party talks that are supposed to conclude by May, invited Sinn Fein to rejoin two weeks ago.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-03-08
Executing the phrase: two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)) => (DATE,1998-W10))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)) => (DATE,1998-W10))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)) => (DATE,1998-W10))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)) => (DATE,1998-W10))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)) => (DATE,1998-W10))
No correct parses. No update.
Sample processing time 0.0050
177 : ================== [0]
Sample type: TemporalSentence
Phrase:            10 days ago
Sentence:          But Sinn Fein leader Gerry Adams kept his party out pending meetings with British Prime Minister Tony Blair 10 days ago and President Clinton last week.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-03-12
Executing the phrase: 10 days ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), days :- NP : days:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: 10 days ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), days :- NP : days:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: 10 days ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), days :- NP : days:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: 10 days ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), days :- NP : days:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: 10 days ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), days :- NP : days:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r)) => (DATE,1998-03-12)
Correct. No update.
Sample processing time 0.0050
178 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          But Sinn Fein leader Gerry Adams kept his party out pending meetings with British Prime Minister Tony Blair 10 days ago and President Clinton last week.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-W12
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W11))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W11))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W11))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W11))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W11))
No correct parses. No update.
Sample processing time 0.0050
179 : ================== [0]
Sample type: TemporalSentence
Phrase:            february
Sentence:          ``We were unjustly pushed out of the talks in February but we are back,'' Adams said Sunday.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-02
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (this:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (next:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Correct parses:
february:s => ((this:<s,<r,s>> february:s ref_time:r)) => (DATE,1998-02)
Correct. No update.
Sample processing time 0.0020
180 : ================== [0]
Sample type: TemporalSentence
Phrase:            sunday
Sentence:          ``We were unjustly pushed out of the talks in February but we are back,'' Adams said Sunday.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-03-22
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Correct parses:
sunday:s => ((this:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1998-03-22)
Correct. No update.
Sample processing time 0.0040
181 : ================== [0]
Sample type: TemporalSentence
Phrase:            1972
Sentence:          But the north's pro-British Protestant majority is bitterly opposed to uniting Ireland and instead wants a strong government for Northern Ireland, which has been ruled directly by London since 1972.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1972
Executing the phrase: 1972
with logic: 1972:r
and lexical entries: [1972 :- NP : 1972:r]
Executing the phrase: 1972
with logic: (previous:<s,<r,s>> 1972:r ref_time:r)
and lexical entries: [1972 :- NP : 1972:r]
Executing the phrase: 1972
with logic: (this:<s,<r,s>> 1972:r ref_time:r)
and lexical entries: [1972 :- NP : 1972:r]
Executing the phrase: 1972
with logic: (next:<s,<r,s>> 1972:r ref_time:r)
and lexical entries: [1972 :- NP : 1972:r]
Executing the phrase: 1972
with logic: 1972:r
and lexical entries: [1972 :- NP : 1972:r]
Correct parses:
1972:r => (1972:r) => (DATE,1972)
Correct. No update.
Sample processing time 0.0040
182 : ================== [0]
Sample type: TemporalSentence
Phrase:            sunday
Sentence:          Also Sunday, more than 2,000 Catholic protesters rallied in Portadown against the annual parades by the Orange Order, Northern Ireland's dominant Protestant fraternal group.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-02-22
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Bad violating parse: (sunday:s, ((this:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1998-03-22))
No correct parses. No update.
Sample processing time 0.0020
183 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past three summers
Sentence:          Confrontations among Catholic protesters, Protestant marchers and the police have provoked widespread violence in Northern Ireland for the past three summers.
ref_time:          1998-03-22
Gold type:         SET
gold val:          XXXX-SU
No correct parses. No update.
Sample processing time 0.0020
184 : ================== [0]
Sample type: TemporalSentence
Phrase:            each july
Sentence:          The crucible is Portadown, 30 miles (50 kms) southwest of Belfast, where Orangemen march each July from their rural church back downtown _ through the town's main Catholic area.
ref_time:          1998-03-22
Gold type:         SET
gold val:          XXXX-07
No correct parses. No update.
Sample processing time 0.0000
185 : ================== [0]
Sample type: TemporalSentence
Phrase:            this summer
Sentence:          Protesters from several Catholic communities crowded into Portadown's Catholic Garvaghy Road to hear speakers demand negotiations with Orange Order leaders, and pledge to participate in each others' road-blocking protests this summer.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-SU
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Correct parses:
(this:<s,<r,s>> summer:s ref_time:r) => ((this:<s,<r,s>> summer:s ref_time:r)) => (DATE,1998-SU)
Correct. No update.
Sample processing time 0.0050
186 : ================== [0]
Sample type: TemporalSentence
Phrase:            this summer
Sentence:          ``Small nationalist communities are not going to be left on their own this summer,'' said Gerard Rice, a former IRA prisoner who leads anti-Orange protests in a Catholic neighborhood of south Belfast.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-SU
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Correct parses:
(this:<s,<r,s>> summer:s ref_time:r) => ((this:<s,<r,s>> summer:s ref_time:r)) => (DATE,1998-SU)
Correct. No update.
Sample processing time 0.0040
187 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier sunday
Sentence:          Earlier Sunday, police and militant Protestants clashed in a religiously polarized part of north Belfast.
ref_time:          1998-03-22
Gold type:         DATE
gold val:          1998-03-22
Executing the phrase: earlier sunday
with logic: sunday:s
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), sunday :- NP : sunday:s]
Executing the phrase: earlier sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), sunday :- NP : sunday:s]
Executing the phrase: earlier sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), sunday :- NP : sunday:s]
Executing the phrase: earlier sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), sunday :- NP : sunday:s]
Executing the phrase: earlier sunday
with logic: sunday:s
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), sunday :- NP : sunday:s]
Correct parses:
sunday:s => ((this:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1998-03-22)
Correct. No update.
Sample processing time 0.0020
188 : ================== [0]
Sample type: TemporalSentence
Phrase:            saturday
Sentence:          BUDAPEST, Hungary (AP)_ Tired of being sidelined, Hungarian astronaut Bertalan Farkas is leaving for the United States to start a new career, he said Saturday.
ref_time:          1998-04-18
Gold type:         DATE
gold val:          1998-04-18
Executing the phrase: saturday
with logic: saturday:s
and lexical entries: [saturday :- NP : saturday:s]
Executing the phrase: saturday
with logic: (previous:<s,<r,s>> saturday:s ref_time:r)
and lexical entries: [saturday :- NP : saturday:s]
Executing the phrase: saturday
with logic: (this:<s,<r,s>> saturday:s ref_time:r)
and lexical entries: [saturday :- NP : saturday:s]
Executing the phrase: saturday
with logic: (next:<s,<r,s>> saturday:s ref_time:r)
and lexical entries: [saturday :- NP : saturday:s]
Executing the phrase: saturday
with logic: saturday:s
and lexical entries: [saturday :- NP : saturday:s]
Correct parses:
saturday:s => ((this:<s,<r,s>> saturday:s ref_time:r)) => (DATE,1998-04-18)
Correct. No update.
Sample processing time 0.0040
189 : ================== [0]
Sample type: TemporalSentence
Phrase:            may 26 1980
Sentence:          Farkas, an air force captain, was sent into space on board the Soyuz 36 on May 26, 1980.
ref_time:          1998-04-18
Gold type:         DATE
gold val:          1980-05-26
Executing the phrase: may 26 1980
with logic: (intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r)
and lexical entries: [may :- NP : may:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1980 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1980:r))]
Executing the phrase: may 26 1980
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1980 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1980:r))]
Executing the phrase: may 26 1980
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1980 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1980:r))]
Executing the phrase: may 26 1980
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1980 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1980:r))]
Executing the phrase: may 26 1980
with logic: (intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r)
and lexical entries: [may :- NP : may:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1980 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1980:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r) => ((intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r)) => (DATE,1980-05-26)
Correct. No update.
Sample processing time 0.0040
190 : ================== [0]
Sample type: TemporalSentence
Phrase:            six days
Sentence:          He spent six days aboard the Salyut 6 spacecraft with three Soviet astronauts, Valery Kubasov, Leonid Popov and Valery Riumin.
ref_time:          1998-04-18
Gold type:         DURATION
gold val:          P6D
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 6:n))
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Correct parses:
(*:<d,<n,d>> days:d 6:n) => ((*:<d,<n,d>> days:d 6:n)) => (DURATION,P6D)
Correct. No update.
Sample processing time 0.0030
191 : ================== [0]
Sample type: TemporalSentence
Phrase:            october 1984
Sentence:          McBride, 54, of Lewisburg, West Virginia, was part of a seven-member crew aboard the Orbiter Challenger in October 1984 and later served as assistant administrator for congressional relations for NASA.
ref_time:          1998-04-18
Gold type:         DATE
gold val:          1984-10
Executing the phrase: october 1984
with logic: (intersect:<s*,s> october:s 1984:r)
and lexical entries: [october :- NP : october:s, 1984 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1984:r))]
Executing the phrase: october 1984
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 1984:r) ref_time:r)
and lexical entries: [october :- NP : october:s, 1984 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1984:r))]
Executing the phrase: october 1984
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 1984:r) ref_time:r)
and lexical entries: [october :- NP : october:s, 1984 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1984:r))]
Executing the phrase: october 1984
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 1984:r) ref_time:r)
and lexical entries: [october :- NP : october:s, 1984 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1984:r))]
Executing the phrase: october 1984
with logic: (intersect:<s*,s> october:s 1984:r)
and lexical entries: [october :- NP : october:s, 1984 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1984:r))]
Correct parses:
(intersect:<s*,s> october:s 1984:r) => ((intersect:<s*,s> october:s 1984:r)) => (DATE,1984-10)
Correct. No update.
Sample processing time 0.0090
192 : ================== [0]
Sample type: TemporalSentence
Phrase:            may 22 1995
Sentence:          On May 22, 1995, Farkas was made a brigadier general, and the following year he was appointed military attache at the Hungarian embassy in Washington.
ref_time:          1998-04-18
Gold type:         DATE
gold val:          1995-05-22
Executing the phrase: may 22 1995
with logic: (intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r)
and lexical entries: [may :- NP : may:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s)), 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: may 22 1995
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s)), 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: may 22 1995
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s)), 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: may 22 1995
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s)), 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: may 22 1995
with logic: (intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r)
and lexical entries: [may :- NP : may:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s)), 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r) => ((intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r)) => (DATE,1995-05-22)
Correct. No update.
Sample processing time 0.0040
193 : ================== [0]
Sample type: TemporalSentence
Phrase:            the following year
Sentence:          On May 22, 1995, Farkas was made a brigadier general, and the following year he was appointed military attache at the Hungarian embassy in Washington.
ref_time:          1998-04-18
Gold type:         DATE
gold val:          1996
Executing the phrase: the following year
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d]
Executing the phrase: the following year
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d]
Executing the phrase: the following year
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d]
Executing the phrase: the following year
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d]
Executing the phrase: the following year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 1:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d]
Bad violating parse: ((*:<d,<n,d>> year:d 1:n), ((*:<d,<n,d>> year:d 1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d 1:n), ((*:<d,<n,d>> year:d 1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d 1:n), ((*:<d,<n,d>> year:d 1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d 1:n), ((*:<d,<n,d>> year:d 1:n)) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0040
194 : ================== [0]
Sample type: TemporalSentence
Phrase:            december
Sentence:          However, cited by District of Columbia traffic police in December for driving under the influence of alcohol, Farkas was ordered home and retired.
ref_time:          1998-04-18
Gold type:         DATE
gold val:          1997-12
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Correct parses:
december:s => ((previous:<s,<r,s>> december:s ref_time:r)) => (DATE,1997-12)
Bad violating parse: (december:s, ((this:<s,<r,s>> december:s ref_time:r)) => (DATE,1998-12))
Update: {TEMPORAL_CONTEXT__previous_VBN=1.0, TEMPORAL_CONTEXT__this_VBN=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0030
195 : ================== [0]
Sample type: TemporalSentence
Phrase:            the future
Sentence:          Whether this would prove positive or otherwise towards society in the future is yet to be seen.
ref_time:          1998-05-01
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0020
196 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          BONN, Germany (AP)_ A phony address listed on disclosure forms for a French donor will cost the far-right German People's Union about 549,000 marks (dlrs 305,000), parliament said Friday.
ref_time:          1998-06-26
Gold type:         DATE
gold val:          1998-06-26
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-06-26)
Correct. No update.
Sample processing time 0.0050
197 : ================== [0]
Sample type: TemporalSentence
Phrase:            1995
Sentence:          Parliamentary president Rita Suessmuth said the People's Union correctly listed Jacques de Mathan as having donated about 274,500 marks in 1995, but gave a false address for him.
ref_time:          1998-06-26
Gold type:         DATE
gold val:          1995
Executing the phrase: 1995
with logic: 1995:r
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (previous:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (this:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (next:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: 1995:r
and lexical entries: [1995 :- NP : 1995:r]
Correct parses:
1995:r => (1995:r) => (DATE,1995)
Correct. No update.
Sample processing time 0.0040
198 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          The extremist party recently took a surprising 13 percent of the vote in elections in a depressed eastern German state, and hopes to win its first seats in the federal parliament this September.
ref_time:          1998-06-26
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
199 : ================== [0]
Sample type: TemporalSentence
Phrase:            this september
Sentence:          The extremist party recently took a surprising 13 percent of the vote in elections in a depressed eastern German state, and hopes to win its first seats in the federal parliament this September.
ref_time:          1998-06-26
Gold type:         DATE
gold val:          1998-09
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Correct parses:
(this:<s,<r,s>> september:s ref_time:r) => ((this:<s,<r,s>> september:s ref_time:r)) => (DATE,1998-09)
Correct. No update.
Sample processing time 0.0050
200 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fourth quarter
Sentence:          Earlier AT and T also announced an eighteen percent drop in profits for the fourth quarter.
ref_time:          1998-01-26
Gold type:         DURATION
gold val:          1997-Q4
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Bad violating parse: ((nth:<d,<n,s>> quarter:d 4o:n), ((previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1997-Q4))
Bad violating parse: ((nth:<d,<n,s>> quarter:d 4o:n), ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1998-Q4))
Bad violating parse: ((nth:<d,<n,s>> quarter:d 4o:n), ((next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1999-Q4))
No correct parses. No update.
Sample processing time 0.0040
201 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          But I think right now, for AT and T and the people here, it's fairly intense as you might w- well imagine.
ref_time:          1998-01-26
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
202 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Good news for AT and T today.
ref_time:          1998-01-26
Gold type:         DATE
gold val:          1998-01-26
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-01-26)
Correct. No update.
Sample processing time 0.0010
203 : ================== [0]
Sample type: TemporalSentence
Phrase:            the future
Sentence:          The US military buildup in the Persian gulf continues apace, more planes headed from the united states and senior officials say Iraq's president Saddam Hussein can expect punishing air strikes to continue well into the future if he doesn't stop building biological and chemical weapons.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0050
204 : ================== [0]
Sample type: TemporalSentence
Phrase:            less than one hour
Sentence:          In a bit of television diplomacy, Iraq's deputy foreign minister responded from Baghdad in less than one hour, saying Washington would break international law by attacking without UN approval.
ref_time:          1998-02-13
Gold type:         DURATION
gold val:          PT1H
Executing the phrase: less than one hour
with logic: (*:<d,<n,d>> hour:d 1:n)
and lexical entries: [less than :- NP/NP : (lambda $0:d $0), one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hour :- NP : hour:d]
Executing the phrase: less than one hour
with logic: (*:<d,<n,d>> hour:d 1:n)
and lexical entries: [less than :- NP/NP : (lambda $0:d $0), one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hour :- NP : hour:d]
Executing the phrase: less than one hour
with logic: (*:<d,<n,d>> hour:d 1:n)
and lexical entries: [less than :- NP/NP : (lambda $0:d $0), one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hour :- NP : hour:d]
Executing the phrase: less than one hour
with logic: (*:<d,<n,d>> hour:d 1:n)
and lexical entries: [less than :- NP/NP : (lambda $0:d $0), one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hour :- NP : hour:d]
Executing the phrase: less than one hour
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> hour:d 1:n))
and lexical entries: [less than :- NP/NP : (lambda $0:d $0), one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hour :- NP : hour:d]
Correct parses:
(*:<d,<n,d>> hour:d 1:n) => ((*:<d,<n,d>> hour:d 1:n)) => (DURATION,PT1H)
Correct. No update.
Sample processing time 0.0050
205 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          President Clinton, meantime, glossed over stern warnings from Moscow on Thursday that US air strikes against Iraq could do serious harm to relations with the Kremlin.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-02-12
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1998-02-12)
Correct. No update.
Sample processing time 0.0030
206 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          And I hope that, whatever happens today, that our relationships with Russia will continue to be productive and constructive and strong, because that's very important to the future of our peoples.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-02-13
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-02-13)
Correct. No update.
Sample processing time 0.0020
207 : ================== [0]
Sample type: TemporalSentence
Phrase:            the day
Sentence:          One contrary view of the issue presented itself to the president as he arrived in Philadelphia later in the day.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-02-13
Executing the phrase: the day
with logic: today:r
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: today:r
and lexical entries: [the day :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-02-13)
Correct. No update.
Sample processing time 0.0030
208 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          The Russian foreign minister, meanwhile, sought to soften the harsh words of his military counterpart, saying on Friday that Russia now feels the US must hold off at least until UN secretary general Kofi Annan visits Baghdad in a last-ditch effort at diplomacy.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-02-13
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-13)
Correct. No update.
Sample processing time 0.0030
209 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          The Russian foreign minister, meanwhile, sought to soften the harsh words of his military counterpart, saying on Friday that Russia now feels the US must hold off at least until UN secretary general Kofi Annan visits Baghdad in a last-ditch effort at diplomacy.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0040
210 : ================== [0]
Sample type: TemporalSentence
Phrase:            next week
Sentence:          Meanwhile, secretary of state Madeleine Albright, Berger and defense secretary William Cohen announced plans to travel to an unnamed city in the US heartland next week, to explain to the American people just why military force will be necessary if diplomacy fails.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-WXX
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((next:<d,<r,s>> week:d ref_time:r), ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W08))
Bad violating parse: ((next:<d,<r,s>> week:d ref_time:r), ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W08))
Bad violating parse: ((next:<d,<r,s>> week:d ref_time:r), ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W08))
Bad violating parse: ((next:<d,<r,s>> week:d ref_time:r), ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W08))
Bad violating parse: ((next:<d,<r,s>> week:d ref_time:r), ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W08))
No correct parses. No update.
Sample processing time 0.0040
211 : ================== [0]
Sample type: TemporalSentence
Phrase:            three hour
Sentence:          Annan wrapped up a three hour meeting with Iraqi president Saddam Hussein in Baghdad today.
ref_time:          1998-02-22
Gold type:         DURATION
gold val:          PT3H
Executing the phrase: three hour
with logic: (*:<d,<n,d>> hour:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), hour :- NP : hour:d]
Executing the phrase: three hour
with logic: (*:<d,<n,d>> hour:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), hour :- NP : hour:d]
Executing the phrase: three hour
with logic: (*:<d,<n,d>> hour:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), hour :- NP : hour:d]
Executing the phrase: three hour
with logic: (*:<d,<n,d>> hour:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), hour :- NP : hour:d]
Executing the phrase: three hour
with logic: (*:<d,<n,d>> hour:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), hour :- NP : hour:d]
Correct parses:
(*:<d,<n,d>> hour:d 3:n) => ((*:<d,<n,d>> hour:d 3:n)) => (DURATION,PT3H)
Correct. No update.
Sample processing time 0.0030
212 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Annan wrapped up a three hour meeting with Iraqi president Saddam Hussein in Baghdad today.
ref_time:          1998-02-22
Gold type:         DATE
gold val:          1998-02-22
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-02-22)
Correct. No update.
Sample processing time 0.0020
213 : ================== [0]
Sample type: TemporalSentence
Phrase:            later this afternoon
Sentence:          He's expected to meet with Iraqi deputy prime minister Tariq Aziz later this afternoon.
ref_time:          1998-02-22
Gold type:         TIME
gold val:          1998-02-22TAF
No correct parses. No update.
Sample processing time 0.0010
214 : ================== [0]
Sample type: TemporalSentence
Phrase:            no more than sixty days
Sentence:          One major sticking point has been Iraq's proposal to open it's presidential sites for no more than sixty days.
ref_time:          1998-02-22
Gold type:         DURATION
gold val:          P60D
Executing the phrase: no more than sixty days
with logic: (*:<d,<n,d>> days:d 60:n)
and lexical entries: [no more than :- NP/NP : (lambda $0:d $0), sixty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 60:n)), days :- NP : days:d]
Executing the phrase: no more than sixty days
with logic: (*:<d,<n,d>> days:d 60:n)
and lexical entries: [no more than :- NP/NP : (lambda $0:d $0), sixty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 60:n)), days :- NP : days:d]
Executing the phrase: no more than sixty days
with logic: (*:<d,<n,d>> days:d 60:n)
and lexical entries: [no more than :- NP/NP : (lambda $0:d $0), sixty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 60:n)), days :- NP : days:d]
Executing the phrase: no more than sixty days
with logic: (*:<d,<n,d>> days:d 60:n)
and lexical entries: [no more than :- NP/NP : (lambda $0:d $0), sixty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 60:n)), days :- NP : days:d]
Executing the phrase: no more than sixty days
with logic: (*:<d,<n,d>> days:d 60:n)
and lexical entries: [no more than :- NP/NP : (lambda $0:d $0), sixty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 60:n)), days :- NP : days:d]
Correct parses:
(*:<d,<n,d>> days:d 60:n) => ((*:<d,<n,d>> days:d 60:n)) => (DURATION,P60D)
Correct. No update.
Sample processing time 0.0050
215 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Now with a diplomatic solution to the crisis seemingly at hand, get set for oil prices from the Brent north sea variety to light swede crude to fall further.
ref_time:          1998-02-23
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
216 : ================== [0]
Sample type: TemporalSentence
Phrase:            the middle of october
Sentence:          Oil prices have come down from the middle of October from a twenty-two dollar barrel level down to the fourteen dollars we're seeing today.
ref_time:          1998-02-23
Gold type:         DATE
gold val:          1997-10
Executing the phrase: the middle of october
with logic: october:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), middle of :- NP/NP : (lambda $0:s $0), october :- NP : october:s]
Executing the phrase: the middle of october
with logic: (previous:<s,<r,s>> october:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), middle of :- NP/NP : (lambda $0:s $0), october :- NP : october:s]
Executing the phrase: the middle of october
with logic: (this:<s,<r,s>> october:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), middle of :- NP/NP : (lambda $0:s $0), october :- NP : october:s]
Executing the phrase: the middle of october
with logic: (next:<s,<r,s>> october:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), middle of :- NP/NP : (lambda $0:s $0), october :- NP : october:s]
Executing the phrase: the middle of october
with logic: october:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), middle of :- NP/NP : (lambda $0:s $0), october :- NP : october:s]
Correct parses:
october:s => ((previous:<s,<r,s>> october:s ref_time:r)) => (DATE,1997-10)
Correct. No update.
Sample processing time 0.0030
217 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Oil prices have come down from the middle of October from a twenty-two dollar barrel level down to the fourteen dollars we're seeing today.
ref_time:          1998-02-23
Gold type:         DATE
gold val:          1998-02-23
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-02-23)
Correct. No update.
Sample processing time 0.0040
218 : ================== [0]
Sample type: TemporalSentence
Phrase:            the winter of nineteen ninety four
Sentence:          Ah next up is that thirteen dollar a barrel level we saw in the winter of nineteen ninety-four.
ref_time:          1998-02-23
Gold type:         DATE
gold val:          1994-WI
Executing the phrase: the winter of nineteen ninety four
with logic: (intersect:<s*,s> 1994:r winter:s)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), winter of :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 winter:s)), nineteen ninety four :- NP : 1994:r]
Executing the phrase: the winter of nineteen ninety four
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1994:r winter:s) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), winter of :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 winter:s)), nineteen ninety four :- NP : 1994:r]
Executing the phrase: the winter of nineteen ninety four
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1994:r winter:s) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), winter of :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 winter:s)), nineteen ninety four :- NP : 1994:r]
Executing the phrase: the winter of nineteen ninety four
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1994:r winter:s) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), winter of :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 winter:s)), nineteen ninety four :- NP : 1994:r]
Executing the phrase: the winter of nineteen ninety four
with logic: (intersect:<s*,s> 1994:r winter:s)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), winter of :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 winter:s)), nineteen ninety four :- NP : 1994:r]
Correct parses:
(intersect:<s*,s> 1994:r winter:s) => ((intersect:<s*,s> 1994:r winter:s)) => (DATE,1994-WI)
Correct. No update.
Sample processing time 0.0050
219 : ================== [0]
Sample type: TemporalSentence
Phrase:            the last two weeks
Sentence:          Gas prices fell nearly two cents a gallon over the last two weeks.
ref_time:          1998-02-23
Gold type:         DURATION
gold val:          P2W
Executing the phrase: the last two weeks
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the last two weeks
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the last two weeks
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the last two weeks
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the last two weeks
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)) => (DURATION,P2W)
Correct. No update.
Sample processing time 0.0040
220 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          New evidence is suggesting that a series of bombings in Atalanta and last month's explosion at an Alabama women's clinic might be related.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1998-01
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1998-01)
Correct. No update.
Sample processing time 0.0030
221 : ================== [0]
Sample type: TemporalSentence
Phrase:            nineteen ninety six
Sentence:          Atlanta nineteen ninety-six.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1996
Executing the phrase: nineteen ninety six
with logic: 1996:r
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (previous:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (this:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (next:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: 1996:r
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Correct parses:
1996:r => (1996:r) => (DATE,1996)
Correct. No update.
Sample processing time 0.0030
222 : ================== [0]
Sample type: TemporalSentence
Phrase:            january nineteen ninety seven
Sentence:          January nineteen ninety-seven.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1997-01
Executing the phrase: january nineteen ninety seven
with logic: (intersect:<s*,s> 1997:r january:s)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), nineteen ninety seven :- NP : 1997:r]
Executing the phrase: january nineteen ninety seven
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1997:r january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), nineteen ninety seven :- NP : 1997:r]
Executing the phrase: january nineteen ninety seven
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1997:r january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), nineteen ninety seven :- NP : 1997:r]
Executing the phrase: january nineteen ninety seven
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1997:r january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), nineteen ninety seven :- NP : 1997:r]
Executing the phrase: january nineteen ninety seven
with logic: (intersect:<s*,s> 1997:r january:s)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), nineteen ninety seven :- NP : 1997:r]
Correct parses:
(intersect:<s*,s> 1997:r january:s) => ((intersect:<s*,s> 1997:r january:s)) => (DATE,1997-01)
Correct. No update.
Sample processing time 0.0030
223 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          And just last month, an off duty policeman is killed when a bomb explodes at another abortion clinic.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1998-01
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1998-01)
Correct. No update.
Sample processing time 0.0030
224 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Now officials are investigating whether, Rudolph, who remains at large, is linked to all three attacks.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
225 : ================== [0]
Sample type: TemporalSentence
Phrase:            nineteen ninety seven
Sentence:          Army of god letters claim responsibility for the Atlanta abortion clinic bombing, a nineteen ninety-seven attack on a gay lounge and the Birmingham assault.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1997
Executing the phrase: nineteen ninety seven
with logic: 1997:r
and lexical entries: [nineteen ninety seven :- NP : 1997:r]
Executing the phrase: nineteen ninety seven
with logic: (previous:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [nineteen ninety seven :- NP : 1997:r]
Executing the phrase: nineteen ninety seven
with logic: (this:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [nineteen ninety seven :- NP : 1997:r]
Executing the phrase: nineteen ninety seven
with logic: (next:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [nineteen ninety seven :- NP : 1997:r]
Executing the phrase: nineteen ninety seven
with logic: 1997:r
and lexical entries: [nineteen ninety seven :- NP : 1997:r]
Correct parses:
1997:r => (1997:r) => (DATE,1997)
Correct. No update.
Sample processing time 0.0030
226 : ================== [0]
Sample type: TemporalSentence
Phrase:            this week
Sentence:          And this week, FBI director Louie Freeh assigned more agents to the search.
ref_time:          1998-02-27
Gold type:         DATE
gold val:          1998-WXX
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W09))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W09))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W09))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W09))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W09))
No correct parses. No update.
Sample processing time 0.0020
227 : ================== [0]
Sample type: TemporalSentence
Phrase:            january
Sentence:          WASHINGTON _ The economy created jobs at a surprisingly robust pace in January, the government reported on Friday, evidence that America's economic stamina has withstood any disruptions caused so far by the financial tumult in Asia.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-01
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Correct parses:
january:s => ((this:<s,<r,s>> january:s ref_time:r)) => (DATE,1998-01)
Bad violating parse: (january:s, ((next:<s,<r,s>> january:s ref_time:r)) => (DATE,1999-01))
Update: {TEMPORAL_CONTEXT__next_VBD=-1.0, TEMPORAL_CONTEXT__this_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0040
228 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          WASHINGTON _ The economy created jobs at a surprisingly robust pace in January, the government reported on Friday, evidence that America's economic stamina has withstood any disruptions caused so far by the financial tumult in Asia.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-02-06
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-06)
Correct. No update.
Sample processing time 0.0040
229 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          The Bureau of Labor Statistics said the economy added 358,000 jobs last month, far above the 235,000 forecast by economists.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-01
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1998-01)
Correct. No update.
Sample processing time 0.0030
230 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          With growing opportunities for work drawing more people into the labor force, the unemployment rate remained at 4.7 percent last month, just a notch above its quarter-century low.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-01
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1998-01)
Correct. No update.
Sample processing time 0.0030
231 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          The demand for workers also led employers to raise wages again last month.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-01
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1998-01)
Correct. No update.
Sample processing time 0.0030
232 : ================== [0]
Sample type: TemporalSentence
Phrase:            hourly
Sentence:          Average hourly earnings of production and nonsupervisory employees rose 4 cents, to $12.51.
ref_time:          1998-02-06
Gold type:         SET
gold val:          PT1H
No correct parses. No update.
Sample processing time 0.0000
233 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          The gain left wages 3.8 percent higher than a year earlier, extending a trend that has given back to workers some of the earning power they lost to inflation in the last decade.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1997
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0030
234 : ================== [0]
Sample type: TemporalSentence
Phrase:            the last decade
Sentence:          The gain left wages 3.8 percent higher than a year earlier, extending a trend that has given back to workers some of the earning power they lost to inflation in the last decade.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          198
Executing the phrase: the last decade
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), decade :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: the last decade
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), decade :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: the last decade
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), decade :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: the last decade
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), decade :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: the last decade
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), decade :- NP : (*:<d,<n,d>> year:d 10:n)]
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)) => (DURATION,P10Y))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)) => (DURATION,P10Y))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)) => (DURATION,P10Y))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)) => (DURATION,P10Y))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)) => (DURATION,P10Y))
No correct parses. No update.
Sample processing time 0.0060
235 : ================== [0]
Sample type: TemporalSentence
Phrase:            coming months
Sentence:          And because the Federal Reserve has made clear that it expects the economy to slow in coming months as ripple effects from Asia reach the United States, investors disregarded the large jobs gains, betting that neither a rise in interest rates nor resurgent inflation is looming.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: coming months
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), months :- NP : months:d]
Executing the phrase: coming months
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), months :- NP : months:d]
Executing the phrase: coming months
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), months :- NP : months:d]
Executing the phrase: coming months
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), months :- NP : months:d]
Executing the phrase: coming months
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), months :- NP : months:d]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0030
236 : ================== [0]
Sample type: TemporalSentence
Phrase:            aug. 6
Sentence:          Stocks rose, pushing the Dow Jones industrial average up 72.24 points, to 8,189.49, leaving the index within 70 points of its record high set on Aug. 6.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1997-08-06
Executing the phrase: aug. 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Correct parses:
(intersect:<s*,s> august:s 6d:s) => ((previous:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)) => (DATE,1997-08-06)
Bad violating parse: ((intersect:<s*,s> august:s 6d:s), ((this:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)) => (DATE,1998-08-06))
Update: {TEMPORAL_CONTEXT__previous_VBG=1.0, TEMPORAL_CONTEXT__this_VBG=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0060
237 : ================== [0]
Sample type: TemporalSentence
Phrase:            30 year
Sentence:          In the bond market, a sensitive barometer of inflation anxiety, prices edged up, pushing down the yield on the benchmark 30-year Treasury bond to 5.92 percent from 5.93 percent.
ref_time:          1998-02-06
Gold type:         DURATION
gold val:          P30Y
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 30:n))
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 30:n) => ((*:<d,<n,d>> year:d 30:n)) => (DURATION,P30Y)
Correct. No update.
Sample processing time 0.0040
238 : ================== [0]
Sample type: TemporalSentence
Phrase:            january
Sentence:          The job figures for January extended a surge in employment gains that began last fall, just when the labor market had showed signs of cooling.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-01
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Correct parses:
january:s => ((this:<s,<r,s>> january:s ref_time:r)) => (DATE,1998-01)
Correct. No update.
Sample processing time 0.0020
239 : ================== [0]
Sample type: TemporalSentence
Phrase:            last fall
Sentence:          The job figures for January extended a surge in employment gains that began last fall, just when the labor market had showed signs of cooling.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1997-FA
Executing the phrase: last fall
with logic: (previous:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: last fall
with logic: (previous:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: last fall
with logic: (previous:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: last fall
with logic: (previous:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: last fall
with logic: (previous:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Correct parses:
(previous:<s,<r,s>> fall:s ref_time:r) => ((previous:<s,<r,s>> fall:s ref_time:r)) => (DATE,1997-FA)
Correct. No update.
Sample processing time 0.0030
240 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          After accounting for a small downward revision Friday to December's figures, the economy has been creating jobs at a rate of 358,000 a month for the last four months _ and 381,000 over the last three months _ after averaging 242,000 for the first nine months of 1997.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-02-06
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-06)
Bad violating parse: (friday:s, ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-01-30))
Update: {TEMPORAL_CONTEXT__previous_VBG=-1.0, TEMPORAL_CONTEXT__this_VBG=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0, TEMPORAL_WEEKDAY_sameDay__previous=-1.0, TEMPORAL_WEEKDAY_sameDay__this=1.0}
Sample processing time 0.0030
241 : ================== [0]
Sample type: TemporalSentence
Phrase:            december
Sentence:          After accounting for a small downward revision Friday to December's figures, the economy has been creating jobs at a rate of 358,000 a month for the last four months _ and 381,000 over the last three months _ after averaging 242,000 for the first nine months of 1997.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1997-12
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Correct parses:
december:s => ((previous:<s,<r,s>> december:s ref_time:r)) => (DATE,1997-12)
Bad violating parse: (december:s, ((this:<s,<r,s>> december:s ref_time:r)) => (DATE,1998-12))
Update: {TEMPORAL_CONTEXT__previous_VBG=1.0, TEMPORAL_CONTEXT__this_VBG=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0040
242 : ================== [0]
Sample type: TemporalSentence
Phrase:            the last four months
Sentence:          After accounting for a small downward revision Friday to December's figures, the economy has been creating jobs at a rate of 358,000 a month for the last four months _ and 381,000 over the last three months _ after averaging 242,000 for the first nine months of 1997.
ref_time:          1998-02-06
Gold type:         DURATION
gold val:          P4M
Executing the phrase: the last four months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), months :- NP : months:d]
Executing the phrase: the last four months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), months :- NP : months:d]
Executing the phrase: the last four months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), months :- NP : months:d]
Executing the phrase: the last four months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), months :- NP : months:d]
Executing the phrase: the last four months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), months :- NP : months:d]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r)) => (DURATION,P4M)
Correct. No update.
Sample processing time 0.0060
243 : ================== [0]
Sample type: TemporalSentence
Phrase:            the last three months
Sentence:          After accounting for a small downward revision Friday to December's figures, the economy has been creating jobs at a rate of 358,000 a month for the last four months _ and 381,000 over the last three months _ after averaging 242,000 for the first nine months of 1997.
ref_time:          1998-02-06
Gold type:         DURATION
gold val:          P3M
Executing the phrase: the last three months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the last three months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the last three months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the last three months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the last three months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r)) => (DURATION,P3M)
Correct. No update.
Sample processing time 0.0060
244 : ================== [0]
Sample type: TemporalSentence
Phrase:            the first nine months
Sentence:          After accounting for a small downward revision Friday to December's figures, the economy has been creating jobs at a rate of 358,000 a month for the last four months _ and 381,000 over the last three months _ after averaging 242,000 for the first nine months of 1997.
ref_time:          1998-02-06
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (nth:<d,<n,s>> (*:<d,<n,d>> months:d 9:n) 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> (*:<d,<n,d>> months:d 9:n) 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> (*:<d,<n,d>> months:d 9:n) 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> (*:<d,<n,d>> months:d 9:n) 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (nth:<d,<n,s>> (*:<d,<n,d>> months:d 9:n) 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(nth:<d,<n,s>> (*:<d,<n,d>> months:d 9:n) 1o:n) => ((nth:<d,<n,s>> (*:<d,<n,d>> months:d 9:n) 1o:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0130
245 : ================== [0]
Sample type: TemporalSentence
Phrase:            1997
Sentence:          After accounting for a small downward revision Friday to December's figures, the economy has been creating jobs at a rate of 358,000 a month for the last four months _ and 381,000 over the last three months _ after averaging 242,000 for the first nine months of 1997.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1997
Executing the phrase: 1997
with logic: 1997:r
and lexical entries: [1997 :- NP : 1997:r]
Executing the phrase: 1997
with logic: (previous:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [1997 :- NP : 1997:r]
Executing the phrase: 1997
with logic: (this:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [1997 :- NP : 1997:r]
Executing the phrase: 1997
with logic: (next:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [1997 :- NP : 1997:r]
Executing the phrase: 1997
with logic: 1997:r
and lexical entries: [1997 :- NP : 1997:r]
Correct parses:
1997:r => (1997:r) => (DATE,1997)
Correct. No update.
Sample processing time 0.0060
246 : ================== [0]
Sample type: TemporalSentence
Phrase:            the last few months
Sentence:          Long-term interest rates, an important indicator of economic stability, have fallen in the last few months.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: the last few months
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last few :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: the last few months
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last few :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: the last few months
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last few :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: the last few months
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last few :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: the last few months
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last few :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: the last few months
with logic: months:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), last few :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: the last few months
with logic: months:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), last few :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: the last few months
with logic: months:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), last few :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: the last few months
with logic: months:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), last few :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: the last few months
with logic: (temporal_ref:<d,s> months:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), last few :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0070
247 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          President Clinton welcomed the job figures at a news conference Friday.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-02-06
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-06)
Correct. No update.
Sample processing time 0.0030
248 : ================== [0]
Sample type: TemporalSentence
Phrase:            january
Sentence:          Some of the biggest employment gains came in the construction industry, which added 92,000 jobs in January.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-01
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Correct parses:
january:s => ((this:<s,<r,s>> january:s ref_time:r)) => (DATE,1998-01)
Correct. No update.
Sample processing time 0.0030
249 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          The figures showed the unemployment rate for adult men declined to 3.8 percent last month from 4.1 percent in December, the lowest figure for almost two decades.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-01
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1998-01)
Correct. No update.
Sample processing time 0.0030
250 : ================== [0]
Sample type: TemporalSentence
Phrase:            december
Sentence:          The figures showed the unemployment rate for adult men declined to 3.8 percent last month from 4.1 percent in December, the lowest figure for almost two decades.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1997-12
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Correct parses:
december:s => ((previous:<s,<r,s>> december:s ref_time:r)) => (DATE,1997-12)
Bad violating parse: (december:s, ((this:<s,<r,s>> december:s ref_time:r)) => (DATE,1998-12))
Update: {TEMPORAL_CONTEXT__previous_VBD=1.0, TEMPORAL_CONTEXT__this_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0040
251 : ================== [0]
Sample type: TemporalSentence
Phrase:            two decades
Sentence:          The figures showed the unemployment rate for adult men declined to 3.8 percent last month from 4.1 percent in December, the lowest figure for almost two decades.
ref_time:          1998-02-06
Gold type:         DURATION
gold val:          P20Y
Executing the phrase: two decades
with logic: (*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), decades :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: two decades
with logic: (*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), decades :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: two decades
with logic: (*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), decades :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: two decades
with logic: (*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), decades :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: two decades
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), decades :- NP : (*:<d,<n,d>> year:d 10:n)]
Correct parses:
(*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n) => ((*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n)) => (DURATION,P20Y)
Correct. No update.
Sample processing time 0.0050
252 : ================== [0]
Sample type: TemporalSentence
Phrase:            january
Sentence:          Among people with less than a high school education, the rate in January was 7.2 percent.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-01
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Correct parses:
january:s => ((this:<s,<r,s>> january:s ref_time:r)) => (DATE,1998-01)
Correct. No update.
Sample processing time 0.0030
253 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          WASHINGTON _ Following are statements made Friday and Thursday by Lawrence Wechsler, a lawyer for the White House secretary, Betty Currie; the White House; White House spokesman Mike McCurry, and President Clinton in response to an article in The New York Times on Friday about her statements regarding a meeting with the president: Wechsler on Thursday ``Without commenting on the allegations raised in this article, to the extent that there is any implication or suggestion that Mrs. Currie was aware of any legal or ethical impropriety by anyone, that implication or suggestion is entirely inaccurate.''
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-02-06
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-06)
Bad violating parse: (friday:s, ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-01-30))
Update: {TEMPORAL_CONTEXT__previous_VBN=-1.0, TEMPORAL_CONTEXT__this_VBN=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0, TEMPORAL_WEEKDAY_sameDay__previous=-1.0, TEMPORAL_WEEKDAY_sameDay__this=1.0}
Sample processing time 0.0040
254 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          WASHINGTON _ Following are statements made Friday and Thursday by Lawrence Wechsler, a lawyer for the White House secretary, Betty Currie; the White House; White House spokesman Mike McCurry, and President Clinton in response to an article in The New York Times on Friday about her statements regarding a meeting with the president: Wechsler on Thursday ``Without commenting on the allegations raised in this article, to the extent that there is any implication or suggestion that Mrs. Currie was aware of any legal or ethical impropriety by anyone, that implication or suggestion is entirely inaccurate.''
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-02-05
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1998-02-05)
Correct. No update.
Sample processing time 0.0030
255 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          WASHINGTON _ Following are statements made Friday and Thursday by Lawrence Wechsler, a lawyer for the White House secretary, Betty Currie; the White House; White House spokesman Mike McCurry, and President Clinton in response to an article in The New York Times on Friday about her statements regarding a meeting with the president: Wechsler on Thursday ``Without commenting on the allegations raised in this article, to the extent that there is any implication or suggestion that Mrs. Currie was aware of any legal or ethical impropriety by anyone, that implication or suggestion is entirely inaccurate.''
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-02-06
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-06)
Correct. No update.
Sample processing time 0.0060
256 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          WASHINGTON _ Following are statements made Friday and Thursday by Lawrence Wechsler, a lawyer for the White House secretary, Betty Currie; the White House; White House spokesman Mike McCurry, and President Clinton in response to an article in The New York Times on Friday about her statements regarding a meeting with the president: Wechsler on Thursday ``Without commenting on the allegations raised in this article, to the extent that there is any implication or suggestion that Mrs. Currie was aware of any legal or ethical impropriety by anyone, that implication or suggestion is entirely inaccurate.''
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-02-05
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1998-02-05)
Correct. No update.
Sample processing time 0.0070
257 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          White House on Thursday ``For the past few weeks we've been subjected to false leaks designed to mislead both reporters and the American public.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-02-05
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1998-02-05)
Correct. No update.
Sample processing time 0.0020
258 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past few weeks
Sentence:          White House on Thursday ``For the past few weeks we've been subjected to false leaks designed to mislead both reporters and the American public.
ref_time:          1998-02-06
Gold type:         DURATION
gold val:          PXW
Executing the phrase: the past few weeks
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, past few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the past few weeks
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, past few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the past few weeks
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, past few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the past few weeks
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, past few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the past few weeks
with logic: (temporal_ref:<d,s> weeks:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, past few :- NP/NP : (lambda $0:d $0)]
Correct parses:
weeks:d => (weeks:d) => (DURATION,PXW)
Correct. No update.
Sample processing time 0.0050
259 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          McCurry on Friday ``I want to be absolutely clear, to the extent there is any implication or the slightest suggestion that Mrs. Currie believes that the President or anyone else tried to influence her recollection, that is absolutely false and a mischaracterization of the facts.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-02-06
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-06)
Correct. No update.
Sample processing time 0.0020
260 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Clinton on Friday.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-02-06
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1998-02-06)
Correct. No update.
Sample processing time 0.0010
261 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          I know about the stories today.
ref_time:          1998-02-06
Gold type:         DATE
gold val:          1998-02-06
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-02-06)
Correct. No update.
Sample processing time 0.0020
262 : ================== [0]
Sample type: TemporalSentence
Phrase:            this morning
Sentence:          I was pleased that Ms. Currie's lawyers stated unambiguously this morning _ unambiguously _ that she's not aware of any unethical conduct.
ref_time:          1998-02-06
Gold type:         TIME
gold val:          1998-02-06TMO
No correct parses. No update.
Sample processing time 0.0010
263 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday evening
Sentence:          NEW YORK _ A Brooklyn woman who was watching her clothes dry in a laundromat was killed Thursday evening when two would-be robbers emptied their pistols into the store, the police said.
ref_time:          1998-02-12
Gold type:         TIME
gold val:          1998-02-12TEV
No correct parses. No update.
Sample processing time 0.0000
264 : ================== [0]
Sample type: TemporalSentence
Phrase:            around 7:15 p.m.
Sentence:          The men appeared in the store at 469 Vermont St. in Brownsville around 7:15 p.m., after the victim, Linda Sanders, 35, had finished her cleaning and was waiting for her clothes to dry, detectives said.
ref_time:          1998-02-12
Gold type:         TIME
gold val:          1998-02-12T19:15
No correct parses. No update.
Sample processing time 0.0010
265 : ================== [0]
Sample type: TemporalSentence
Phrase:            a few years ago
Sentence:          Victor Miranda, who lives in Ms. Sanders' apartment building at 405 Williams Ave., said the laundry machines in the building were removed a few years ago to make room for management offices.
ref_time:          1998-02-12
Gold type:         DATE
gold val:          199X
Executing the phrase: a few years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a few years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a few years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a few years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a few years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)) => (DATE,1997))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)) => (DATE,1997))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)) => (DATE,1997))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)) => (DATE,1997))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)) => (DATE,1997))
No correct parses. No update.
Sample processing time 0.0050
266 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          NEWARK, N.J. _ A new Essex County task force began delving Thursday into the slayings of 14 black women over the last five years in the Newark area, as law-enforcement officials acknowledged that they needed to work harder to solve the cases of murdered women.
ref_time:          1998-04-02
Gold type:         DATE
gold val:          1998-04-02
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((this:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1998-04-02)
Correct. No update.
Sample processing time 0.0030
267 : ================== [0]
Sample type: TemporalSentence
Phrase:            the last five years
Sentence:          NEWARK, N.J. _ A new Essex County task force began delving Thursday into the slayings of 14 black women over the last five years in the Newark area, as law-enforcement officials acknowledged that they needed to work harder to solve the cases of murdered women.
ref_time:          1998-04-02
Gold type:         DURATION
gold val:          P5Y
Executing the phrase: the last five years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: the last five years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: the last five years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: the last five years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: the last five years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r)) => (DURATION,P5Y)
Correct. No update.
Sample processing time 0.0050
268 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent months
Sentence:          State, county and local law-enforcement officials have expressed concerns in recent months about a possible pattern of murdered women and a disproportionate number of unsolved cases.
ref_time:          1998-04-02
Gold type:         DURATION
gold val:          PXM
Executing the phrase: recent months
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Bad violating parse: (past_ref:r, ((previous:<s,<r,s>> past_ref:r ref_time:r)) => (DATE,PAST_REF))
No correct parses. No update.
Sample processing time 0.0020
269 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Citing an example, Sgt. Derek Glenn, a spokesman for the Newark Police Department, said that of nine women who had been killed last year, suspects had been arrested in only four cases.
ref_time:          1998-04-02
Gold type:         DATE
gold val:          1997
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1997)
Correct. No update.
Sample processing time 0.0040
270 : ================== [0]
Sample type: TemporalSentence
Phrase:            1993
Sentence:          Eight of the 14 killings since 1993 were already under investigation by the Newark Police Department, Glenn said.
ref_time:          1998-04-02
Gold type:         DATE
gold val:          1993
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (previous:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (this:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (next:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Correct parses:
1993:r => (1993:r) => (DATE,1993)
Correct. No update.
Sample processing time 0.0020
271 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          ``I haven't seen a pattern yet, '' said Patricia Hurt, the Essex County prosecutor, who created the task force on Tuesday.
ref_time:          1998-04-02
Gold type:         DATE
gold val:          1998-03-31
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Correct parses:
tuesday:s => ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1998-03-31)
Correct. No update.
Sample processing time 0.0040
272 : ================== [0]
Sample type: TemporalSentence
Phrase:            saturday april 25
Sentence:          The New York Times said in an editorial on Saturday, April 25: The Supreme Court took a detour this week from the core principle of gender fairness it vindicated two years ago in its ruling invalidating the use of sexual stereotypes to justify denying women admission to the Virginia Military Institute.
ref_time:          1998-04-24
Gold type:         DATE
gold val:          1998-04-25
Executing the phrase: saturday april 25
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Bad violating parse: ((intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s), ((previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s) ref_time:r)) => (DATE,1997-WXX-6))
Bad violating parse: ((intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s), ((previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s) ref_time:r)) => (DATE,1997-WXX-6))
No correct parses. No update.
Sample processing time 0.0070
273 : ================== [0]
Sample type: TemporalSentence
Phrase:            this week
Sentence:          The New York Times said in an editorial on Saturday, April 25: The Supreme Court took a detour this week from the core principle of gender fairness it vindicated two years ago in its ruling invalidating the use of sexual stereotypes to justify denying women admission to the Virginia Military Institute.
ref_time:          1998-04-24
Gold type:         DATE
gold val:          1998-W17
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(this:<d,<r,s>> week:d ref_time:r) => ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W17)
Correct. No update.
Sample processing time 0.0040
274 : ================== [0]
Sample type: TemporalSentence
Phrase:            two years ago
Sentence:          The New York Times said in an editorial on Saturday, April 25: The Supreme Court took a detour this week from the core principle of gender fairness it vindicated two years ago in its ruling invalidating the use of sexual stereotypes to justify denying women admission to the Virginia Military Institute.
ref_time:          1998-04-24
Gold type:         DATE
gold val:          1996
Executing the phrase: two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)) => (DATE,1996)
Correct. No update.
Sample processing time 0.0050
275 : ================== [0]
Sample type: TemporalSentence
Phrase:            current
Sentence:          The department retreated from its position in the VMI case when it argued that the government could not make policy based on stereotypes ``even when those stereotypes reflect current realities.''
ref_time:          1998-04-24
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0040
276 : ================== [0]
Sample type: TemporalSentence
Phrase:            nineteen ninety one
Sentence:          In nineteen ninety-one Charles Keating was convicted in state court of helping to defraud thousands of investors who bought high risk junk bonds sold by Keating's employees at Lincoln savings and loan.
ref_time:          1998-01-15
Gold type:         DATE
gold val:          1991
Executing the phrase: nineteen ninety one
with logic: 1991:r
and lexical entries: [nineteen ninety one :- NP : 1991:r]
Executing the phrase: nineteen ninety one
with logic: (previous:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [nineteen ninety one :- NP : 1991:r]
Executing the phrase: nineteen ninety one
with logic: (this:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [nineteen ninety one :- NP : 1991:r]
Executing the phrase: nineteen ninety one
with logic: (next:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [nineteen ninety one :- NP : 1991:r]
Executing the phrase: nineteen ninety one
with logic: 1991:r
and lexical entries: [nineteen ninety one :- NP : 1991:r]
Correct parses:
1991:r => (1991:r) => (DATE,1991)
Correct. No update.
Sample processing time 0.0030
277 : ================== [0]
Sample type: TemporalSentence
Phrase:            nineteen ninety six
Sentence:          Keating's convictions were thrown out in nineteen ninety-six on a technicality.
ref_time:          1998-01-15
Gold type:         DATE
gold val:          1996
Executing the phrase: nineteen ninety six
with logic: 1996:r
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (previous:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (this:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (next:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: 1996:r
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Correct parses:
1996:r => (1996:r) => (DATE,1996)
Correct. No update.
Sample processing time 0.0030
278 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Now the ninth US circuit court of appeals has ruled that the original appeal was flawed since it brought up issues that had not been raised before.
ref_time:          1998-01-15
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
279 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Now for today's geography quiz.
ref_time:          1998-01-21
Gold type:         DATE
gold val:          1998-01-21
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-01-21)
Correct. No update.
Sample processing time 0.0010
280 : ================== [0]
Sample type: TemporalSentence
Phrase:            nineteen seventy nine
Sentence:          The city could have used some special protection in nineteen seventy-nine when the Soviet Union invaded Afghanistan.
ref_time:          1998-01-21
Gold type:         DATE
gold val:          1979
Executing the phrase: nineteen seventy nine
with logic: 1979:r
and lexical entries: [nineteen seventy nine :- NP : 1979:r]
Executing the phrase: nineteen seventy nine
with logic: (previous:<s,<r,s>> 1979:r ref_time:r)
and lexical entries: [nineteen seventy nine :- NP : 1979:r]
Executing the phrase: nineteen seventy nine
with logic: (this:<s,<r,s>> 1979:r ref_time:r)
and lexical entries: [nineteen seventy nine :- NP : 1979:r]
Executing the phrase: nineteen seventy nine
with logic: (next:<s,<r,s>> 1979:r ref_time:r)
and lexical entries: [nineteen seventy nine :- NP : 1979:r]
Executing the phrase: nineteen seventy nine
with logic: 1979:r
and lexical entries: [nineteen seventy nine :- NP : 1979:r]
Correct parses:
1979:r => (1979:r) => (DATE,1979)
Correct. No update.
Sample processing time 0.0030
281 : ================== [0]
Sample type: TemporalSentence
Phrase:            centuries
Sentence:          Most of the city's monuments were destroyed, including a magnificent tiled mosque, which dominated the skyline for centuries.
ref_time:          1998-01-21
Gold type:         DURATION
gold val:          PXC
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 100:n))
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Bad violating parse: ((*:<d,<n,d>> year:d 100:n), ((*:<d,<n,d>> year:d 100:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> year:d 100:n), ((*:<d,<n,d>> year:d 100:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> year:d 100:n), ((*:<d,<n,d>> year:d 100:n)) => (DURATION,P1C))
Bad violating parse: ((*:<d,<n,d>> year:d 100:n), ((*:<d,<n,d>> year:d 100:n)) => (DURATION,P1C))
No correct parses. No update.
Sample processing time 0.0040
282 : ================== [0]
Sample type: TemporalSentence
Phrase:            more than two thousand years
Sentence:          Some families have kept their glass working secrets for more than two thousand years.
ref_time:          1998-01-21
Gold type:         DURATION
gold val:          P2L
Executing the phrase: more than two thousand years
with logic: (*:<d,<n,d>> years:d 2000:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), two thousand :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2000:n)), years :- NP : years:d]
Executing the phrase: more than two thousand years
with logic: (*:<d,<n,d>> years:d 2000:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), two thousand :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2000:n)), years :- NP : years:d]
Executing the phrase: more than two thousand years
with logic: (*:<d,<n,d>> years:d 2000:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), two thousand :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2000:n)), years :- NP : years:d]
Executing the phrase: more than two thousand years
with logic: (*:<d,<n,d>> years:d 2000:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), two thousand :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2000:n)), years :- NP : years:d]
Executing the phrase: more than two thousand years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2000:n))
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), two thousand :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2000:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 2000:n) => ((*:<d,<n,d>> years:d 2000:n)) => (DURATION,P2L)
Correct. No update.
Sample processing time 0.0040
283 : ================== [0]
Sample type: TemporalSentence
Phrase:            a few minutes
Sentence:          Well, frankly, I don't, but the answer is coming up in just a few minutes.
ref_time:          1998-01-21
Gold type:         DURATION
gold val:          PXM
No correct parses. No update.
Sample processing time 0.0010
284 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          The British aircraft carrier invincible is now patrolling the Persian Gulf alongside three US vessels.
ref_time:          1998-02-05
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
285 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Thousands of people in Germany have been demonstrating today against the high level of unemployment in the country.
ref_time:          1998-02-05
Gold type:         DATE
gold val:          1998-02-05
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-02-05)
Correct. No update.
Sample processing time 0.0020
286 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Joblessness is now at its highest level in Germany since the second world war.
ref_time:          1998-02-05
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
287 : ================== [0]
Sample type: TemporalSentence
Phrase:            this september
Sentence:          With the general election due this September, record figures couldn't have come at a worst time for Chancellor Kohl.
ref_time:          1998-02-05
Gold type:         DATE
gold val:          1998-09
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Correct parses:
(this:<s,<r,s>> september:s ref_time:r) => ((this:<s,<r,s>> september:s ref_time:r)) => (DATE,1998-09)
Correct. No update.
Sample processing time 0.0020
288 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year two thousand
Sentence:          His promise to half unemployment by the year two thousand has now been abandoned.
ref_time:          1998-02-05
Gold type:         DATE
gold val:          2000
Executing the phrase: the year two thousand
with logic: 2000:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (previous:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (this:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (next:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: 2000:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Correct parses:
2000:r => (2000:r) => (DATE,2000)
Correct. No update.
Sample processing time 0.0030
289 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          His promise to half unemployment by the year two thousand has now been abandoned.
ref_time:          1998-02-05
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
290 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          In Los Angeles that lesson was brought home today when tons of earth cascaded down a hillside, ripping two houses from their foundations.
ref_time:          1998-02-13
Gold type:         DATE
gold val:          1998-02-13
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-02-13)
Correct. No update.
Sample processing time 0.0020
291 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          The move had been widely expected after northern Ireland police said they believe the IRA was behind two killings in Belfast last week.
ref_time:          1998-02-16
Gold type:         DATE
gold val:          1998-W07
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(previous:<d,<r,s>> week:d ref_time:r) => ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W07)
Correct. No update.
Sample processing time 0.0030
292 : ================== [0]
Sample type: TemporalSentence
Phrase:            tomorrow
Sentence:          Tomorrow the board of supervisors of Loudon county, Virginia, will vote on whether a school now located in Mount Vernon can relocate to their county.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          1998-03-04
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (previous:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (this:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (next:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Correct parses:
tomorrow:r => (tomorrow:r) => (DATE,1998-03-04)
Correct. No update.
Sample processing time 0.0020
293 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Tomorrow the board of supervisors of Loudon county, Virginia, will vote on whether a school now located in Mount Vernon can relocate to their county.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
294 : ================== [0]
Sample type: TemporalSentence
Phrase:            tomorrow
Sentence:          In some respects, that's typical county business, but tomorrow's vote has international implications.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          1998-03-04
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (previous:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (this:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (next:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Correct parses:
tomorrow:r => (tomorrow:r) => (DATE,1998-03-04)
Correct. No update.
Sample processing time 0.0020
295 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Now critics of the academy are targeting its owner, the Saudi government.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
296 : ================== [0]
Sample type: TemporalSentence
Phrase:            one day
Sentence:          According to the Arab American institute, Islam will one day be the second largest religion in the country.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> day:d 1:n))
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Bad violating parse: ((*:<d,<n,d>> day:d 1:n), ((*:<d,<n,d>> day:d 1:n)) => (DURATION,P1D))
Bad violating parse: ((*:<d,<n,d>> day:d 1:n), ((*:<d,<n,d>> day:d 1:n)) => (DURATION,P1D))
Bad violating parse: ((*:<d,<n,d>> day:d 1:n), ((*:<d,<n,d>> day:d 1:n)) => (DURATION,P1D))
Bad violating parse: ((*:<d,<n,d>> day:d 1:n), ((*:<d,<n,d>> day:d 1:n)) => (DURATION,P1D))
No correct parses. No update.
Sample processing time 0.0020
297 : ================== [0]
Sample type: TemporalSentence
Phrase:            the second day
Sentence:          It's the second day of an offensive by the security forces against villages populated by ethnic Albanians.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          1998-03-06
Executing the phrase: the second day
with logic: (nth:<d,<n,s>> day:d 2o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), day :- NP : day:d]
Executing the phrase: the second day
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> day:d 2o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), day :- NP : day:d]
Executing the phrase: the second day
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> day:d 2o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), day :- NP : day:d]
Executing the phrase: the second day
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> day:d 2o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), day :- NP : day:d]
Executing the phrase: the second day
with logic: (nth:<d,<n,s>> day:d 2o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), day :- NP : day:d]
Bad violating parse: ((nth:<d,<n,s>> day:d 2o:n), ((previous:<s,<r,s>> (nth:<d,<n,s>> day:d 2o:n) ref_time:r)) => (DATE,1998-03-02))
No correct parses. No update.
Sample processing time 0.0030
298 : ================== [0]
Sample type: TemporalSentence
Phrase:            mid afternoon
Sentence:          By mid afternoon, official Serb sources were saying the operation was over, but that has not yet been confirmed from Belgrade, the capital of Serbia, which is where the whole attack is thought to have been planned.
ref_time:          1998-03-06
Gold type:         TIME
gold val:          1998-03-06TAF
No correct parses. No update.
Sample processing time 0.0010
299 : ================== [0]
Sample type: TemporalSentence
Phrase:            the future
Sentence:          The ethnic Albanians here in Kosovo are considerably worried about the future and fear they are witnessing the beginnings of a much wider conflict.
ref_time:          1998-03-06
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0020
300 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          One of President Bush's sons has informed White House Chief of Staff John Sununu that he has lost much of his support among Republicans, prompting an intense effort by Sununu to hold on to his job by demonstrating his GOP backing, White House and Republican sources said Monday.
ref_time:          1991-12-03
Gold type:         DATE
gold val:          1991-12-02
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Correct parses:
monday:s => ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1991-12-02)
Correct. No update.
Sample processing time 0.0070
301 : ================== [0]
Sample type: TemporalSentence
Phrase:            wednesday
Sentence:          Sununu was told Wednesday by Bush's son, George, that he had alienated members of the Cabinet, the White House staff and the Republican political community, creating a situation that puts his effectiveness in significant doubt, the sources said.
ref_time:          1991-12-03
Gold type:         DATE
gold val:          1991-11-27
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Correct parses:
wednesday:s => ((previous:<s,<r,s>> wednesday:s ref_time:r)) => (DATE,1991-11-27)
Correct. No update.
Sample processing time 0.0020
302 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          One senior official Monday described the White House as "a collection of small groups of aides holding their breaths, "waiting to see whether Sununu survives.
ref_time:          1991-12-03
Gold type:         DATE
gold val:          1991-12-02
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Correct parses:
monday:s => ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1991-12-02)
Correct. No update.
Sample processing time 0.0020
303 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          ; Another highly placed source said the president's son met with Sununu last week after holding a series of conversations about the structure of the White House staff and of the campaign with other Bush loyalists and GOP activists.
ref_time:          1991-12-03
Gold type:         DATE
gold val:          1991-W48
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(previous:<d,<r,s>> week:d ref_time:r) => ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1991-W48)
Correct. No update.
Sample processing time 0.0040
304 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          "He was told ... the handwriting was on the wall," the source said Monday.
ref_time:          1991-12-03
Gold type:         DATE
gold val:          1991-12-02
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Correct parses:
monday:s => ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1991-12-02)
Correct. No update.
Sample processing time 0.0030
305 : ================== [0]
Sample type: TemporalSentence
Phrase:            sunday
Sentence:          Officials said the president himself met with Sununu Sunday.
ref_time:          1991-12-03
Gold type:         DATE
gold val:          1991-12-01
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Correct parses:
sunday:s => ((previous:<s,<r,s>> sunday:s ref_time:r)) => (DATE,1991-12-01)
Correct. No update.
Sample processing time 0.0020
306 : ================== [0]
Sample type: TemporalSentence
Phrase:            two day
Sentence:          Meanwhile, as VOA West Africa Correspondent Purnell Murdock reports, General Abacha's supporters began a two day rally in the capital, Abuja, to urge him to compete in this year's election.
ref_time:          1998-03-03
Gold type:         DURATION
gold val:          P2D
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Correct parses:
(*:<d,<n,d>> day:d 2:n) => ((*:<d,<n,d>> day:d 2:n)) => (DURATION,P2D)
Correct. No update.
Sample processing time 0.0040
307 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Meanwhile, as VOA West Africa Correspondent Purnell Murdock reports, General Abacha's supporters began a two day rally in the capital, Abuja, to urge him to compete in this year's election.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          1998
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1998)
Correct. No update.
Sample processing time 0.0040
308 : ================== [0]
Sample type: TemporalSentence
Phrase:            early tuesday
Sentence:          Nigeria state radio says thousands of people began gathering in the capital Abuja early Tuesday for the two day rally supporting General Sani Abacha's candidacy.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          1998-03-03
Executing the phrase: early tuesday
with logic: tuesday:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), tuesday :- NP : tuesday:s]
Executing the phrase: early tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), tuesday :- NP : tuesday:s]
Executing the phrase: early tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), tuesday :- NP : tuesday:s]
Executing the phrase: early tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), tuesday :- NP : tuesday:s]
Executing the phrase: early tuesday
with logic: tuesday:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), tuesday :- NP : tuesday:s]
Correct parses:
tuesday:s => ((this:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1998-03-03)
Correct. No update.
Sample processing time 0.0040
309 : ================== [0]
Sample type: TemporalSentence
Phrase:            two day
Sentence:          Nigeria state radio says thousands of people began gathering in the capital Abuja early Tuesday for the two day rally supporting General Sani Abacha's candidacy.
ref_time:          1998-03-03
Gold type:         DURATION
gold val:          P2D
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> day:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Correct parses:
(*:<d,<n,d>> day:d 2:n) => ((*:<d,<n,d>> day:d 2:n)) => (DURATION,P2D)
Correct. No update.
Sample processing time 0.0030
310 : ================== [0]
Sample type: TemporalSentence
Phrase:            two days
Sentence:          Organizers state the two days of music, dancing, and speeches is expected to draw some two million people.
ref_time:          1998-03-03
Gold type:         DURATION
gold val:          P2D
Executing the phrase: two days
with logic: (*:<d,<n,d>> days:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), days :- NP : days:d]
Executing the phrase: two days
with logic: (*:<d,<n,d>> days:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), days :- NP : days:d]
Executing the phrase: two days
with logic: (*:<d,<n,d>> days:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), days :- NP : days:d]
Executing the phrase: two days
with logic: (*:<d,<n,d>> days:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), days :- NP : days:d]
Executing the phrase: two days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), days :- NP : days:d]
Correct parses:
(*:<d,<n,d>> days:d 2:n) => ((*:<d,<n,d>> days:d 2:n)) => (DURATION,P2D)
Correct. No update.
Sample processing time 0.0020
311 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past year
Sentence:          A new report says there has been a dramatic rise in the growth of hate groups in the United States over the past year.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          1997
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), year :- NP : year:d]
Executing the phrase: the past year
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), year :- NP : year:d]
Executing the phrase: the past year
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), year :- NP : year:d]
Executing the phrase: the past year
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), year :- NP : year:d]
Executing the phrase: the past year
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), year :- NP : year:d]
Bad violating parse: (past_ref:r, ((previous:<s,<r,s>> past_ref:r ref_time:r)) => (DATE,PAST_REF))
No correct parses. No update.
Sample processing time 0.0070
312 : ================== [0]
Sample type: TemporalSentence
Phrase:            more recently
Sentence:          More recently it has followed the growth of the militia movement and church groups that preach a message of white supremacy and anti-semitism.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: more recently
with logic: past_ref:r
and lexical entries: [more :- NP/NP : (lambda $0:r $0), recently :- NP : past_ref:r]
Executing the phrase: more recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [more :- NP/NP : (lambda $0:r $0), recently :- NP : past_ref:r]
Executing the phrase: more recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [more :- NP/NP : (lambda $0:r $0), recently :- NP : past_ref:r]
Executing the phrase: more recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [more :- NP/NP : (lambda $0:r $0), recently :- NP : past_ref:r]
Executing the phrase: more recently
with logic: past_ref:r
and lexical entries: [more :- NP/NP : (lambda $0:r $0), recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
313 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          The new study written by Mark Potach, who edits the Southern Poverty Law Center's Intelligence Report, warns that such groups grew rapidly last year, mostly by recruiting younger members.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          1997
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1997)
Correct. No update.
Sample processing time 0.0040
314 : ================== [0]
Sample type: TemporalSentence
Phrase:            the nineties
Sentence:          We in fact have seen hate group numbers dropping through the nineties, uh but this year they jumped up uh twenty percent, quite a dramatic rise.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          199
Executing the phrase: the nineties
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), nineties :- NP : 199:r]
Executing the phrase: the nineties
with logic: (previous:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), nineties :- NP : 199:r]
Executing the phrase: the nineties
with logic: (this:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), nineties :- NP : 199:r]
Executing the phrase: the nineties
with logic: (next:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), nineties :- NP : 199:r]
Executing the phrase: the nineties
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), nineties :- NP : 199:r]
Correct parses:
199:r => (199:r) => (DATE,199)
Correct. No update.
Sample processing time 0.0030
315 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          We in fact have seen hate group numbers dropping through the nineties, uh but this year they jumped up uh twenty percent, quite a dramatic rise.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          1998
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1998)
Correct. No update.
Sample processing time 0.0030
316 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year
Sentence:          Uh, there are over fifty thousand CDs a year sold with uh lyrics that are quite uh unbelievable.
ref_time:          1998-03-03
Gold type:         SET
gold val:          P1Y
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0020
317 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year two thousand
Sentence:          The approach of the year two thousand has many of these groups in a kind of millennial frenzy.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          2000
Executing the phrase: the year two thousand
with logic: 2000:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (previous:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (this:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (next:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: 2000:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Correct parses:
2000:r => (2000:r) => (DATE,2000)
Correct. No update.
Sample processing time 0.0030
318 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          The Federal Bureau of Investigation says it received more than eight thousand reports of hate group crimes last year.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          1997
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1997)
Correct. No update.
Sample processing time 0.0040
319 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Law enforcement authorities say such reports are likely to increase as police departments are now beginning to more accurately report hate crimes than they have in the past.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
320 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past
Sentence:          Law enforcement authorities say such reports are likely to increase as police departments are now beginning to more accurately report hate crimes than they have in the past.
ref_time:          1998-03-03
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0040
321 : ================== [0]
Sample type: TemporalSentence
Phrase:            this coming sunday march eighth
Sentence:          International Women's Day is this coming Sunday, March eighth.
ref_time:          1998-03-05
Gold type:         DATE
gold val:          1998-03-08
No correct parses. No update.
Sample processing time 0.0020
322 : ================== [0]
Sample type: TemporalSentence
Phrase:            twenty years
Sentence:          Afghanistan has been at war for twenty years, leaving a large part of the country's male population dead or in exile.
ref_time:          1998-03-05
Gold type:         DURATION
gold val:          P20Y
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 20:n) => ((*:<d,<n,d>> years:d 20:n)) => (DURATION,P20Y)
Correct. No update.
Sample processing time 0.0020
323 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past twenty years
Sentence:          Ms. Atimadi says Afghan women have been victims of severe violations of human rights for the past twenty years and she says she sees no end to the misery.
ref_time:          1998-03-05
Gold type:         DURATION
gold val:          P20Y
Executing the phrase: the past twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 20:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP/NP : (lambda $0:d past_ref:r), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 20:n) => ((*:<d,<n,d>> years:d 20:n)) => (DURATION,P20Y)
Bad violating parse: (past_ref:r, ((previous:<s,<r,s>> past_ref:r ref_time:r)) => (DATE,PAST_REF))
Update: {LEX#50=-1.0, LEX#513=-1.0, LEX#686=1.0, LEX#716=1.0, TEMPORAL_CONTEXT__previous_VBN=-1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0, TEMPORAL_TYPE_d=1.0, TEMPORAL_TYPE_s=-1.0}
Sample processing time 0.0080
324 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          And today, the right to work is equal to r- the right to survival.
ref_time:          1998-03-05
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Bad violating parse: (today:r, (today:r) => (DATE,1998-03-05))
Bad violating parse: (today:r, (today:r) => (DATE,1998-03-05))
No correct parses. No update.
Sample processing time 0.0010
325 : ================== [0]
Sample type: TemporalSentence
Phrase:            two
Sentence:          It's between two to six days for every one uh of the sickest patients across the country.
ref_time:          1998-03-31
Gold type:         DURATION
gold val:          P2D
No correct parses. No update.
Sample processing time 0.0000
326 : ================== [0]
Sample type: TemporalSentence
Phrase:            six days
Sentence:          It's between two to six days for every one uh of the sickest patients across the country.
ref_time:          1998-03-31
Gold type:         DURATION
gold val:          P6D
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Correct parses:
(*:<d,<n,d>> days:d 6:n) => ((*:<d,<n,d>> days:d 6:n)) => (DURATION,P6D)
Correct. No update.
Sample processing time 0.0020
327 : ================== [0]
Sample type: TemporalSentence
Phrase:            several years
Sentence:          Doctor James Burdick, the Professor of Transplant Surgery at Johns Hopkins University Hospital in Baltimore, Maryland, and former President of UNOS, said the current system has evolved over several years and it works well.
ref_time:          1998-03-31
Gold type:         DURATION
gold val:          PXY
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Correct parses:
years:d => (years:d) => (DURATION,PXY)
Correct. No update.
Sample processing time 0.0040
328 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year or two
Sentence:          You may, in a year or two, save a few more lives if you do sickest first.
ref_time:          1998-03-31
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: a year or two
with logic: future_ref:r
and lexical entries: [a year or two :- NP : future_ref:r]
Executing the phrase: a year or two
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a year or two :- NP : future_ref:r]
Executing the phrase: a year or two
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a year or two :- NP : future_ref:r]
Executing the phrase: a year or two
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a year or two :- NP : future_ref:r]
Executing the phrase: a year or two
with logic: future_ref:r
and lexical entries: [a year or two :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0030
329 : ================== [0]
Sample type: TemporalSentence
Phrase:            the years
Sentence:          But the number of patients waiting then begins to increase, um and, in fact, um over the years many more patients who are about to die of liver tra- uh without a liver transplant would accumulate.
ref_time:          1998-03-31
Gold type:         DURATION
gold val:          PXY
Executing the phrase: the years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Correct parses:
years:d => (years:d) => (DURATION,PXY)
Correct. No update.
Sample processing time 0.0030
330 : ================== [0]
Sample type: TemporalSentence
Phrase:            the early years
Sentence:          If you do the uh alternative extreme, you don't save as many lives in the early years, by a small fraction.
ref_time:          1998-03-31
Gold type:         DURATION
gold val:          PXY
Executing the phrase: the early years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), early :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the early years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), early :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the early years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), early :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the early years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), early :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the early years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), early :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Correct parses:
years:d => (years:d) => (DURATION,PXY)
Correct. No update.
Sample processing time 0.0080
331 : ================== [0]
Sample type: TemporalSentence
Phrase:            each year
Sentence:          Nationwide, there are about ten thousand patients waiting for liver transplants each year and only four thousand organs become available for transplants.
ref_time:          1998-03-31
Gold type:         SET
gold val:          P1Y
Executing the phrase: each year
with logic: year:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: each year
with logic: year:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: each year
with logic: year:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: each year
with logic: year:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: each year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [each :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0030
332 : ================== [0]
Sample type: TemporalSentence
Phrase:            five months ago
Sentence:          Secretary Shalala says UNOS five months ago, or gave them five months to develop a new plan to distribute livers which are in the shortest supply.
ref_time:          1998-03-31
Gold type:         DATE
gold val:          1997-10
Executing the phrase: five months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r)) => (DATE,1997-10)
Correct. No update.
Sample processing time 0.0030
333 : ================== [0]
Sample type: TemporalSentence
Phrase:            five months
Sentence:          Secretary Shalala says UNOS five months ago, or gave them five months to develop a new plan to distribute livers which are in the shortest supply.
ref_time:          1998-03-31
Gold type:         DURATION
gold val:          P5M
Executing the phrase: five months
with logic: (*:<d,<n,d>> months:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d]
Executing the phrase: five months
with logic: (*:<d,<n,d>> months:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d]
Executing the phrase: five months
with logic: (*:<d,<n,d>> months:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d]
Executing the phrase: five months
with logic: (*:<d,<n,d>> months:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d]
Executing the phrase: five months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 5:n) => ((*:<d,<n,d>> months:d 5:n)) => (DURATION,P5M)
Correct. No update.
Sample processing time 0.0030
334 : ================== [0]
Sample type: TemporalSentence
Phrase:            next week
Sentence:          Israeli Prime Minister Benjamin Netanyahu says considerable gaps remain between Israeli and Palestinian positions before next week's talks in London.
ref_time:          1998-05-01
Gold type:         DATE
gold val:          1998-W19
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(next:<d,<r,s>> week:d ref_time:r) => ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W19)
Correct. No update.
Sample processing time 0.0030
335 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          He and Palestinian leader Yasser Arafat meet separately Monday with US Secretary of State Madeleine Albright.
ref_time:          1998-05-01
Gold type:         DATE
gold val:          1998-05-04
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Correct parses:
monday:s => ((next:<s,<r,s>> monday:s ref_time:r)) => (DATE,1998-05-04)
Bad violating parse: (monday:s, ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1998-04-27))
Update: {TEMPORAL_CONTEXT__next_VBP=1.0, TEMPORAL_CONTEXT__previous_VBP=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0, TEMPORAL_WEEKDAY_notSameDay_next=1.0, TEMPORAL_WEEKDAY_notSameDay_previous=-1.0}
Sample processing time 0.0020
336 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          The Iraqi leader, in an "initiative" designed as much to rally Arab public opinion as to launch meaningful negotiations, announced yesterday that he will withdraw his troops from Kuwait only if Israel withdraws from the West Bank and Syria from Lebanon.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-08-12
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1990-08-12)
Correct. No update.
Sample processing time 0.0030
337 : ================== [0]
Sample type: TemporalSentence
Phrase:            23 year
Sentence:          He apparently hopes to lure support from Arabs who have spurned him so far by suggesting that Iraq will use its occupation of Kuwait as a lever to solve the Arab world's most frustrating problem, the 23-year Israeli occupation of land claimed by Palestinians.
ref_time:          1990-08-13
Gold type:         DURATION
gold val:          P23Y
Executing the phrase: 23 year
with logic: (*:<d,<n,d>> year:d 23:n)
and lexical entries: [23 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 23:n)), year :- NP : year:d]
Executing the phrase: 23 year
with logic: (*:<d,<n,d>> year:d 23:n)
and lexical entries: [23 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 23:n)), year :- NP : year:d]
Executing the phrase: 23 year
with logic: (*:<d,<n,d>> year:d 23:n)
and lexical entries: [23 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 23:n)), year :- NP : year:d]
Executing the phrase: 23 year
with logic: (*:<d,<n,d>> year:d 23:n)
and lexical entries: [23 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 23:n)), year :- NP : year:d]
Executing the phrase: 23 year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 23:n))
and lexical entries: [23 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 23:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 23:n) => ((*:<d,<n,d>> year:d 23:n)) => (DURATION,P23Y)
Correct. No update.
Sample processing time 0.0050
338 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          The White House yesterday disclosed that Kuwait's ousted government has formally asked the U.S. to enforce the total trade embargo the United Nations has imposed on Iraq, allowing the U.S. and other nations to immediately begin stopping ships carrying Iraqi goods.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-08-12
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1990-08-12)
Correct. No update.
Sample processing time 0.0020
339 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          President Bush implied as much yesterday when reporters asked whether the interdiction would apply to food.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-08-12
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1990-08-12)
Correct. No update.
Sample processing time 0.0010
340 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          So Saddam Hussein on Friday tried to scare other Arab leaders into supporting him by calling on Arabs to rise up in a holy war against leaders who invited American and other Western soldiers into Saudi Arabia to protect the oil-rich kingdom.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-08-10
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1990-08-10)
Correct. No update.
Sample processing time 0.0020
341 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Then yesterday, he tried to entice Arab leaders with his proposal for a diplomatic solution linking his occupation of Kuwait with Israel's occupation of the West Bank.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-08-12
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1990-08-12)
Correct. No update.
Sample processing time 0.0020
342 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          And President Bush yesterday, asked whether he was at least glad Iraq is discussing negotiations, replied: "I don't see anything to be pleasing in there at all."
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-08-12
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1990-08-12)
Correct. No update.
Sample processing time 0.0020
343 : ================== [0]
Sample type: TemporalSentence
Phrase:            the weekend
Sentence:          The Saudi "window of vulnerability... is closing very fast," Prince Bandar bin Sultan, the Saudi ambassador to Washington, said over the weekend.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-W32-WE
No correct parses. No update.
Sample processing time 0.0000
344 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          And even terrorist groups that opposed Iraq in its war with Iran show signs of swinging behind Saddam Hussein now that he is in a confrontation with the U.S. And Iraq still has thousands of Americans and other Westerners under its control in Iraq and Kuwait.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
345 : ================== [0]
Sample type: TemporalSentence
Phrase:            the end of the month
Sentence:          Pentagon officials say the goal is to put 40,000 troops in the region by the end of the month.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-08-30
Executing the phrase: the end of the month
with logic: month:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: the end of the month
with logic: month:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: the end of the month
with logic: month:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: the end of the month
with logic: month:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: the end of the month
with logic: (temporal_ref:<d,s> month:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
No correct parses. No update.
Sample processing time 0.0050
346 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past
Sentence:          U.S. commanders in charge of planning for Middle East crises have indicated in the past that they were capable of deploying as many as 300,000 troops.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0030
347 : ================== [0]
Sample type: TemporalSentence
Phrase:            the weekend
Sentence:          Over the weekend, Pentagon officials confirmed reports that a fourth U.S. aircraft carrier -- the John F. Kennedy -- and its powerful group of support ships could head for the Middle East within a few days.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-W32-WE
No correct parses. No update.
Sample processing time 0.0000
348 : ================== [0]
Sample type: TemporalSentence
Phrase:            a few days
Sentence:          Over the weekend, Pentagon officials confirmed reports that a fourth U.S. aircraft carrier -- the John F. Kennedy -- and its powerful group of support ships could head for the Middle East within a few days.
ref_time:          1990-08-13
Gold type:         DURATION
gold val:          PXD
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Correct parses:
days:d => (days:d) => (DURATION,PXD)
Correct. No update.
Sample processing time 0.0050
349 : ================== [0]
Sample type: TemporalSentence
Phrase:            march
Sentence:          But unless the military situation changes drastically, military officials say, the most likely plan will be for the Kennedy to eventually replace the carrier Dwight D. Eisenhower, which has been on patrol since March and was scheduled to return to port before hostilities erupted in Kuwait.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-03
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (previous:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (this:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (next:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Correct parses:
march:s => ((this:<s,<r,s>> march:s ref_time:r)) => (DATE,1990-03)
Bad violating parse: (march:s, (march:s) => (DATE,XXXX-03))
Bad violating parse: (march:s, (march:s) => (DATE,XXXX-03))
Update: {TEMPORAL_CONTEXT__none_VBN=-1.0, TEMPORAL_CONTEXT__this_VBN=1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0060
350 : ================== [0]
Sample type: TemporalSentence
Phrase:            late yesterday
Sentence:          Similarly, while cautioning about the uncertainty of early battle reports, White House spokesman Marlin Fitzwater said late yesterday that "the operation has been very successful."
ref_time:          1991-02-25
Gold type:         DATE
gold val:          1991-02-24
Executing the phrase: late yesterday
with logic: yesterday:r
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: yesterday:r
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1991-02-24)
Correct. No update.
Sample processing time 0.0040
351 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Indeed, French President Francois Mitterrand said yesterday that some allied forces are crossing Iraqi territory as part of a "pincer" movement to trap the soldiers occupying Kuwait, but insisted, "The purpose isn't to invade Iraqi territory, that's not the aim, that isn't the mandate."
ref_time:          1991-02-25
Gold type:         DATE
gold val:          1991-02-24
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1991-02-24)
Correct. No update.
Sample processing time 0.0020
352 : ================== [0]
Sample type: TemporalSentence
Phrase:            the weekend
Sentence:          Nevertheless, American officials over the weekend became more open in declaring that by destroying Saddam Hussein's military machine they hope to destroy his regime -- a goal likely to be supported by most Americans.
ref_time:          1991-02-25
Gold type:         DATE
gold val:          1991-W08-WE
No correct parses. No update.
Sample processing time 0.0000
353 : ================== [0]
Sample type: TemporalSentence
Phrase:            feb. 11
Sentence:          The president and his top aides tentatively decided on Feb. 11 that a ground war would be necessary.
ref_time:          1991-02-25
Gold type:         DATE
gold val:          1991-02-11
Executing the phrase: feb. 11
with logic: (intersect:<s*,s> february:s 11d:s)
and lexical entries: [feb. :- NP : february:s, 11 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 11d:s))]
Executing the phrase: feb. 11
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 11d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 11 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 11d:s))]
Executing the phrase: feb. 11
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 11d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 11 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 11d:s))]
Executing the phrase: feb. 11
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 11d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 11 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 11d:s))]
Executing the phrase: feb. 11
with logic: (intersect:<s*,s> february:s 11d:s)
and lexical entries: [feb. :- NP : february:s, 11 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 11d:s))]
Correct parses:
(intersect:<s*,s> february:s 11d:s) => ((this:<s,<r,s>> (intersect:<s*,s> february:s 11d:s) ref_time:r)) => (DATE,1991-02-11)
Correct. No update.
Sample processing time 0.0030
354 : ================== [0]
Sample type: TemporalSentence
Phrase:            a week or so ago
Sentence:          Then, a week or so ago, Gen. Schwarzkopf secretly picked Saturday night as the optimal time to start the offensive.
ref_time:          1991-02-25
Gold type:         DATE
gold val:          1991-02-18
Executing the phrase: a week or so ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d, or so :- NP\NP : (lambda $0:d $0), ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a week or so ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d, or so :- NP\NP : (lambda $0:d $0), ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a week or so ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d, or so :- NP\NP : (lambda $0:d $0), ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a week or so ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d, or so :- NP\NP : (lambda $0:d $0), ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a week or so ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d, or so :- NP\NP : (lambda $0:d $0), ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)) => (DATE,1991-W08))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)) => (DATE,1991-W08))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)) => (DATE,1991-W08))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)) => (DATE,1991-W08))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)) => (DATE,1991-W08))
No correct parses. No update.
Sample processing time 0.0030
355 : ================== [0]
Sample type: TemporalSentence
Phrase:            saturday night
Sentence:          Then, a week or so ago, Gen. Schwarzkopf secretly picked Saturday night as the optimal time to start the offensive.
ref_time:          1991-02-25
Gold type:         TIME
gold val:          1991-02-23TNI
No correct parses. No update.
Sample processing time 0.0010
356 : ================== [0]
Sample type: TemporalSentence
Phrase:            a week
Sentence:          Mr. Bush forestalled further diplomatic maneuvering by issuing an ultimatum on behalf of the allies demanding that Iraq withdraw within a week, starting at noon Saturday.
ref_time:          1991-02-25
Gold type:         DURATION
gold val:          P1W
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Correct parses:
week:d => (week:d) => (DURATION,P1W)
Correct. No update.
Sample processing time 0.0030
357 : ================== [0]
Sample type: TemporalSentence
Phrase:            noon saturday
Sentence:          Mr. Bush forestalled further diplomatic maneuvering by issuing an ultimatum on behalf of the allies demanding that Iraq withdraw within a week, starting at noon Saturday.
ref_time:          1991-02-25
Gold type:         TIME
gold val:          1991-02-16T12:00
No correct parses. No update.
Sample processing time 0.0000
358 : ================== [0]
Sample type: TemporalSentence
Phrase:            last august
Sentence:          In setting out his final challenge to Saddam Hussein, Mr. Bush continued the intensive personal diplomacy he began after the invasion last August.
ref_time:          1991-02-25
Gold type:         DATE
gold val:          1990-08
Executing the phrase: last august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), august :- NP : august:s]
Executing the phrase: last august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), august :- NP : august:s]
Executing the phrase: last august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), august :- NP : august:s]
Executing the phrase: last august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), august :- NP : august:s]
Executing the phrase: last august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), august :- NP : august:s]
Correct parses:
(previous:<s,<r,s>> august:s ref_time:r) => ((previous:<s,<r,s>> august:s ref_time:r)) => (DATE,1990-08)
Correct. No update.
Sample processing time 0.0030
359 : ================== [0]
Sample type: TemporalSentence
Phrase:            a week
Sentence:          After cabling world leaders about his intention to give Saddam Hussein a final deadline to exit Kuwait, he offered him a week to withdraw fully, instead of the four days he originally considered, because of objections from some European partners that four days seemed punitive and unrealistic.
ref_time:          1991-02-25
Gold type:         DURATION
gold val:          P1W
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Correct parses:
week:d => (week:d) => (DURATION,P1W)
Correct. No update.
Sample processing time 0.0030
360 : ================== [0]
Sample type: TemporalSentence
Phrase:            the four days
Sentence:          After cabling world leaders about his intention to give Saddam Hussein a final deadline to exit Kuwait, he offered him a week to withdraw fully, instead of the four days he originally considered, because of objections from some European partners that four days seemed punitive and unrealistic.
ref_time:          1991-02-25
Gold type:         DURATION
gold val:          P4D
Executing the phrase: the four days
with logic: (*:<d,<n,d>> days:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), days :- NP : days:d]
Executing the phrase: the four days
with logic: (*:<d,<n,d>> days:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), days :- NP : days:d]
Executing the phrase: the four days
with logic: (*:<d,<n,d>> days:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), days :- NP : days:d]
Executing the phrase: the four days
with logic: (*:<d,<n,d>> days:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), days :- NP : days:d]
Executing the phrase: the four days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 4:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), days :- NP : days:d]
Correct parses:
(*:<d,<n,d>> days:d 4:n) => ((*:<d,<n,d>> days:d 4:n)) => (DURATION,P4D)
Correct. No update.
Sample processing time 0.0040
361 : ================== [0]
Sample type: TemporalSentence
Phrase:            nearly an hour
Sentence:          And when he and President Gorbachev spoke about the decision in a talk lasting nearly an hour, the President took pains to listen to what his counterpart had to say, although he already had decided that the Soviet alternative to the allied deadline was unacceptable.
ref_time:          1991-02-25
Gold type:         DURATION
gold val:          PT1H
Executing the phrase: nearly an hour
with logic: hour:d
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), an :- NP/NP : (lambda $0:d $0), hour :- NP : hour:d]
Executing the phrase: nearly an hour
with logic: hour:d
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), an :- NP/NP : (lambda $0:d $0), hour :- NP : hour:d]
Executing the phrase: nearly an hour
with logic: hour:d
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), an :- NP/NP : (lambda $0:d $0), hour :- NP : hour:d]
Executing the phrase: nearly an hour
with logic: hour:d
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), an :- NP/NP : (lambda $0:d $0), hour :- NP : hour:d]
Executing the phrase: nearly an hour
with logic: (temporal_ref:<d,s> hour:d)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), an :- NP/NP : (lambda $0:d $0), hour :- NP : hour:d]
Correct parses:
hour:d => (hour:d) => (DURATION,PT1H)
Correct. No update.
Sample processing time 0.0030
362 : ================== [0]
Sample type: TemporalSentence
Phrase:            saturday night
Sentence:          Finally, when Iraq failed to respond to the U.S. ultimatum, Mr. Bush let the ground offensive begin as previously planned Saturday night.
ref_time:          1991-02-25
Gold type:         TIME
gold val:          1991-02-16TNI
No correct parses. No update.
Sample processing time 0.0000
363 : ================== [0]
Sample type: TemporalSentence
Phrase:            the first hours
Sentence:          U.S. commanders said 5,500 Iraqi prisoners were taken in the first hours of the ground war, though some military officials later said the total may have climbed above 8,000.
ref_time:          1991-02-25
Gold type:         DURATION
gold val:          PTXH
Executing the phrase: the first hours
with logic: hour:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), hours :- NP : hour:d]
Executing the phrase: the first hours
with logic: hour:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), hours :- NP : hour:d]
Executing the phrase: the first hours
with logic: hour:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), hours :- NP : hour:d]
Executing the phrase: the first hours
with logic: hour:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), hours :- NP : hour:d]
Executing the phrase: the first hours
with logic: hour:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), hours :- NP : hour:d]
Bad violating parse: (hour:d, (hour:d) => (DURATION,PT1H))
Bad violating parse: (hour:d, (hour:d) => (DURATION,PT1H))
Bad violating parse: (hour:d, (hour:d) => (DURATION,PT1H))
Bad violating parse: (hour:d, (hour:d) => (DURATION,PT1H))
Bad violating parse: (hour:d, (hour:d) => (DURATION,PT1H))
No correct parses. No update.
Sample processing time 0.0030
364 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next few days
Sentence:          It expects that tens of thousands of Iraqi soldiers will surrender to the U.S. and its allies over the next few days.
ref_time:          1991-02-25
Gold type:         DURATION
gold val:          PXD
Executing the phrase: the next few days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), days :- NP : days:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), days :- NP : days:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), days :- NP : days:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), days :- NP : days:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few days
with logic: (temporal_ref:<d,s> days:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), days :- NP : days:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Correct parses:
days:d => (days:d) => (DURATION,PXD)
Correct. No update.
Sample processing time 0.0040
365 : ================== [0]
Sample type: TemporalSentence
Phrase:            eight year
Sentence:          If the allies succeed, Saddam Hussein will have plunged his country first into a fruitless eight-year war against Iran and then into a humiliating war against the U.S. and the allies to defend his conquest of Kuwait, leaving much of his country's military establishment and modern infrastructure in ruins.
ref_time:          1991-02-25
Gold type:         DURATION
gold val:          P8Y
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 8:n))
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 8:n) => ((*:<d,<n,d>> year:d 8:n)) => (DURATION,P8Y)
Correct. No update.
Sample processing time 0.0030
366 : ================== [0]
Sample type: TemporalSentence
Phrase:            this week
Sentence:          We are here this week to witness the rendezvous that Fidel Castro and the Pope are having with history.
ref_time:          1998-01-20
Gold type:         DATE
gold val:          1998-W04
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(this:<d,<r,s>> week:d ref_time:r) => ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1998-W04)
Correct. No update.
Sample processing time 0.0020
367 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          In Revolution Square, they put up a giant cross today.
ref_time:          1998-01-20
Gold type:         DATE
gold val:          1998-01-20
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-01-20)
Correct. No update.
Sample processing time 0.0020
368 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          And right across from the Cuban revolutionary icon Che Guevara, they now have a giant portrait of Jesus.
ref_time:          1998-01-20
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
369 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          And so, people are increasingly enthusiastic by today, Cuban television, which clings to the Communist Party line, actually began to promote its papal coverage.
ref_time:          1998-01-20
Gold type:         DATE
gold val:          1998-01-20
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-01-20)
Correct. No update.
Sample processing time 0.0020
370 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Today, hundreds of people from the US began to arrive, including some Cuban Americans who left here when Castro came to power and are returning to Havana for the first time.
ref_time:          1998-01-20
Gold type:         DATE
gold val:          1998-01-20
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-01-20)
Correct. No update.
Sample processing time 0.0020
371 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          But now we're going to go back to New York, where Diane Sawyer has the rest of the news.
ref_time:          1998-01-20
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
372 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          The Pentagon said today it will re-examine the question are the remains inside the Tomb of the Unknown from the Vietnam War, in fact, known?
ref_time:          1998-01-20
Gold type:         DATE
gold val:          1998-01-20
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-01-20)
Correct. No update.
Sample processing time 0.0020
373 : ================== [0]
Sample type: TemporalSentence
Phrase:            last night
Sentence:          CBS News first reported last night that the tomb may contain the remains of Air Force pilot Michael Blassie.
ref_time:          1998-01-20
Gold type:         TIME
gold val:          1998-01-19TNI
No correct parses. No update.
Sample processing time 0.0010
374 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Blassie's mother now wants the remains in the tomb tested for DNA.
ref_time:          1998-01-20
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
375 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next several days
Sentence:          The lights are out and the heat is off and those vital signs are not likely to change much over the next several days for p- people in parts of the northeastern US and eastern Canada.
ref_time:          1998-01-11
Gold type:         DURATION
gold val:          PXD
Executing the phrase: the next several days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: (next:<d,<r,s>> days:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: (next:<d,<r,s>> days:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: (next:<d,<r,s>> days:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: (next:<d,<r,s>> days:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: (next:<d,<r,s>> days:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Correct parses:
days:d => (days:d) => (DURATION,PXD)
Correct. No update.
Sample processing time 0.0080
376 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Yesterday New York governor George Pataki toured five counties that have been declared under a state of emergency.
ref_time:          1998-01-11
Gold type:         DATE
gold val:          1998-01-10
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1998-01-10)
Correct. No update.
Sample processing time 0.0020
377 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          He added one more today.
ref_time:          1998-01-11
Gold type:         DATE
gold val:          1998-01-11
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-01-11)
Correct. No update.
Sample processing time 0.0020
378 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Helicopters are flying over northern New York today trying to locate people stranded without food, heat or medicine.
ref_time:          1998-01-11
Gold type:         DATE
gold val:          1998-01-11
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1998-01-11)
Correct. No update.
Sample processing time 0.0020
379 : ================== [0]
Sample type: TemporalSentence
Phrase:            a while
Sentence:          In Maine, about a half million people still don't have power and they're going to have to live without it for a while.
ref_time:          1998-01-11
Gold type:         DURATION
gold val:          PXX
No correct parses. No update.
Sample processing time 0.0000
380 : ================== [0]
Sample type: TemporalSentence
Phrase:            year end
Sentence:          The thrift holding company said it expects to obtain regulatory approval and complete the transaction by year-end.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-12-31
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (next:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Correct parses:
(intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) => ((intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))) => (DATE,1989-12-31)
Correct. No update.
Sample processing time 0.0030
381 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Imports of the types of watches that now will be eligible for duty-free treatment totaled about $37.3 million in 1988, a relatively small share of the $1.5 billion in U.S. watch imports that year, according to an aide to U.S. Trade Representative Carla Hills.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
382 : ================== [0]
Sample type: TemporalSentence
Phrase:            1988
Sentence:          Imports of the types of watches that now will be eligible for duty-free treatment totaled about $37.3 million in 1988, a relatively small share of the $1.5 billion in U.S. watch imports that year, according to an aide to U.S. Trade Representative Carla Hills.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Correct parses:
1988:r => (1988:r) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
383 : ================== [0]
Sample type: TemporalSentence
Phrase:            that year
Sentence:          Imports of the types of watches that now will be eligible for duty-free treatment totaled about $37.3 million in 1988, a relatively small share of the $1.5 billion in U.S. watch imports that year, according to an aide to U.S. Trade Representative Carla Hills.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988
Executing the phrase: that year
with logic: year:d
and lexical entries: [that year :- NP : year:d]
Executing the phrase: that year
with logic: year:d
and lexical entries: [that year :- NP : year:d]
Executing the phrase: that year
with logic: year:d
and lexical entries: [that year :- NP : year:d]
Executing the phrase: that year
with logic: year:d
and lexical entries: [that year :- NP : year:d]
Executing the phrase: that year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [that year :- NP : year:d]
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0040
384 : ================== [0]
Sample type: TemporalSentence
Phrase:            each of the past three years
Sentence:          The company has reported declines in operating profit in each of the past three years, despite steady sales growth.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P3Y
Executing the phrase: each of the past three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [each of the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: each of the past three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [each of the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: each of the past three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [each of the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: each of the past three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [each of the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: each of the past three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [each of the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 3:n) => ((*:<d,<n,d>> years:d 3:n)) => (DURATION,P3Y)
Correct. No update.
Sample processing time 0.0060
385 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          Magna recently cut its quarterly dividend in half and the company's Class A shares are wallowing far below their 52-week high of 16.125 Canadian dollars (US$13.73).
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
386 : ================== [0]
Sample type: TemporalSentence
Phrase:            52 week
Sentence:          Magna recently cut its quarterly dividend in half and the company's Class A shares are wallowing far below their 52-week high of 16.125 Canadian dollars (US$13.73).
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P52W
Executing the phrase: 52 week
with logic: (*:<d,<n,d>> week:d 52:n)
and lexical entries: [52 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 52:n)), week :- NP : week:d]
Executing the phrase: 52 week
with logic: (*:<d,<n,d>> week:d 52:n)
and lexical entries: [52 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 52:n)), week :- NP : week:d]
Executing the phrase: 52 week
with logic: (*:<d,<n,d>> week:d 52:n)
and lexical entries: [52 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 52:n)), week :- NP : week:d]
Executing the phrase: 52 week
with logic: (*:<d,<n,d>> week:d 52:n)
and lexical entries: [52 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 52:n)), week :- NP : week:d]
Executing the phrase: 52 week
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> week:d 52:n))
and lexical entries: [52 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 52:n)), week :- NP : week:d]
Correct parses:
(*:<d,<n,d>> week:d 52:n) => ((*:<d,<n,d>> week:d 52:n)) => (DURATION,P52W)
Correct. No update.
Sample processing time 0.0030
387 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          On the Toronto Stock Exchange yesterday, Magna shares closed up 37.5 Canadian cents to C$9.625.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0020
388 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Mr. Stronach, founder and controlling shareholder of Magna, resigned as chief executive officer last year to seek, unsuccessfully, a seat in Canada's Parliament.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
389 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          The offer, advertised in today's editions of The Wall Street Journal, is scheduled to expire at the the end of November.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-02
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1989-11-02)
Correct. No update.
Sample processing time 0.0010
390 : ================== [0]
Sample type: TemporalSentence
Phrase:            the end of november
Sentence:          The offer, advertised in today's editions of The Wall Street Journal, is scheduled to expire at the the end of November.
ref_time:          1989-11-02
Gold type:         TIME
gold val:          1989-11
Executing the phrase: the end of november
with logic: november:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: the end of november
with logic: (previous:<s,<r,s>> november:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: the end of november
with logic: (this:<s,<r,s>> november:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: the end of november
with logic: (next:<s,<r,s>> november:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: the end of november
with logic: november:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Bad violating parse: (november:s, ((this:<s,<r,s>> november:s ref_time:r)) => (DATE,1989-11))
No correct parses. No update.
Sample processing time 0.0040
391 : ================== [0]
Sample type: TemporalSentence
Phrase:            currently
Sentence:          Montedison currently owns about 72% of Erbamont's common shares outstanding.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
392 : ================== [0]
Sample type: TemporalSentence
Phrase:            previously
Sentence:          The offer is being launched pursuant to a previously announced agreement between the companies.
ref_time:          1989-11-02
Gold type:         TIME
gold val:          PAST_REF
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Bad violating parse: (past_ref:r, ((this:<s,<r,s>> past_ref:r ref_time:r)) => (DATE,PAST_REF))
No correct parses. No update.
Sample processing time 0.0020
393 : ================== [0]
Sample type: TemporalSentence
Phrase:            jan. 2
Sentence:          The reduced dividend is payable Jan. 2 to stock of record Dec. 15.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1990-01-02
Executing the phrase: jan. 2
with logic: (intersect:<s*,s> january:s 2d:s)
and lexical entries: [jan. :- NP : january:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: jan. 2
with logic: (previous:<s,<r,s>> (intersect:<s*,s> january:s 2d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: jan. 2
with logic: (this:<s,<r,s>> (intersect:<s*,s> january:s 2d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: jan. 2
with logic: (next:<s,<r,s>> (intersect:<s*,s> january:s 2d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: jan. 2
with logic: (intersect:<s*,s> january:s 2d:s)
and lexical entries: [jan. :- NP : january:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Correct parses:
(intersect:<s*,s> january:s 2d:s) => ((next:<s,<r,s>> (intersect:<s*,s> january:s 2d:s) ref_time:r)) => (DATE,1990-01-02)
Bad violating parse: ((intersect:<s*,s> january:s 2d:s), ((this:<s,<r,s>> (intersect:<s*,s> january:s 2d:s) ref_time:r)) => (DATE,1989-01-02))
Update: {TEMPORAL_CONTEXT__next_VBZ=1.0, TEMPORAL_CONTEXT__this_VBZ=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0020
394 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 15
Sentence:          The reduced dividend is payable Jan. 2 to stock of record Dec. 15.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-12-15
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Correct parses:
(intersect:<s*,s> december:s 15d:s) => ((next:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)) => (DATE,1989-12-15)
Correct. No update.
Sample processing time 0.0020
395 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          The Kearny, N.J.-based maker of hair accessories and other cosmetic products said it cut the dividend due to its third-quarter loss of $992,000, or 15 cents a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Bad violating parse: ((nth:<d,<n,s>> quarter:d 3o:n), ((next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1990-Q3))
Update: {TEMPORAL_CONTEXT__next_VBD=-1.0, TEMPORAL_CONTEXT__this_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0040
396 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year ago quarter
Sentence:          In the year-ago quarter, the company reported net income of $1.9 million, or 29 cents a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0030
397 : ================== [0]
Sample type: TemporalSentence
Phrase:            the end of this week
Sentence:          said its planned rights offering to raise about $9 million was declared effective and the company will begin mailing materials to shareholders at the end of this week.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-W44
Executing the phrase: the end of this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: the end of this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: the end of this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: the end of this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: the end of this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(this:<d,<r,s>> week:d ref_time:r) => ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44)
Correct. No update.
Sample processing time 0.0050
398 : ================== [0]
Sample type: TemporalSentence
Phrase:            1993
Sentence:          Each right entitles the shareholder to buy $100 face amount of 13.5% bonds due 1993 and warrants to buy 23.5 common shares at 30 cents a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1993
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (previous:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (this:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (next:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Correct parses:
1993:r => (1993:r) => (DATE,1993)
Correct. No update.
Sample processing time 0.0020
399 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 21
Sentence:          The rights, which expire Nov. 21, can be exercised for $100 each.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-21
Executing the phrase: nov. 21
with logic: (intersect:<s*,s> november:s 21d:s)
and lexical entries: [nov. :- NP : november:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: nov. 21
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 21d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: nov. 21
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 21d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: nov. 21
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 21d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: nov. 21
with logic: (intersect:<s*,s> november:s 21d:s)
and lexical entries: [nov. :- NP : november:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Correct parses:
(intersect:<s*,s> november:s 21d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 21d:s) ref_time:r)) => (DATE,1989-11-21)
Correct. No update.
Sample processing time 0.0020
400 : ================== [0]
Sample type: TemporalSentence
Phrase:            december
Sentence:          Under terms of the agreement, shareholders other than the Underwoods will receive $3,500 a share at closing, which is expected in December.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-12
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Correct parses:
december:s => ((next:<s,<r,s>> december:s ref_time:r)) => (DATE,1989-12)
Correct. No update.
Sample processing time 0.0030
401 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 13
Sentence:          The appointment takes effect Nov. 13.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-13
Executing the phrase: nov. 13
with logic: (intersect:<s*,s> november:s 13d:s)
and lexical entries: [nov. :- NP : november:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: nov. 13
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 13d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: nov. 13
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 13d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: nov. 13
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 13d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: nov. 13
with logic: (intersect:<s*,s> november:s 13d:s)
and lexical entries: [nov. :- NP : november:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Correct parses:
(intersect:<s*,s> november:s 13d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 13d:s) ref_time:r)) => (DATE,1989-11-13)
Correct. No update.
Sample processing time 0.0020
402 : ================== [0]
Sample type: TemporalSentence
Phrase:            march
Sentence:          He succeeds James A. Taylor, who stepped down as chairman, president and chief executive in March for health reasons.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-03
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (previous:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (this:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (next:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Correct parses:
march:s => ((this:<s,<r,s>> march:s ref_time:r)) => (DATE,1989-03)
Correct. No update.
Sample processing time 0.0020
403 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Separately, Citadel posted a third-quarter net loss of $2.3 million, or 68 cents a share, versus net income of $5.3 million, or $1.61 a share, a year earlier.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
404 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Separately, Citadel posted a third-quarter net loss of $2.3 million, or 68 cents a share, versus net income of $5.3 million, or $1.61 a share, a year earlier.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Update: {TEMPORAL_CONTEXT_temporal_ref_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nonea year earlier=-1.0, TEMPORAL_REFERENCE_temporal_reftemporal_refa year earlier=1.0, TEMPORAL_TYPE_d=-1.0, TEMPORAL_TYPE_s=1.0}
Sample processing time 0.0080
405 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 27 1989
Sentence:          Those included costs associated with the potential Valley Federal Savings and Loan Association acquisition, which was terminated on Sept. 27, 1989.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-27
Executing the phrase: sept. 27 1989
with logic: (intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r)
and lexical entries: [sept. :- NP : september:s, 27 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 27d:s)), 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: sept. 27 1989
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 27 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 27d:s)), 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: sept. 27 1989
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 27 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 27d:s)), 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: sept. 27 1989
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 27 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 27d:s)), 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: sept. 27 1989
with logic: (intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r)
and lexical entries: [sept. :- NP : september:s, 27 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 27d:s)), 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Bad violating parse: ((intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r), ((this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r) ref_time:r)) => (DATE,1989-09-27))
No correct parses. No update.
Sample processing time 0.0030
406 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          In American Stock Exchange composite trading, Citadel shares closed yesterday at $45.75, down 25 cents.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0020
407 : ================== [0]
Sample type: TemporalSentence
Phrase:            the six months
Sentence:          Reed International PLC said that net income for the six months ended Oct. 1 slipped 5% to #89.7 million ($141.9 million), or 16 pence a share, from #94.8 million ($149.9 million), or 17.3 pence a share.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P6M
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 6:n) => ((*:<d,<n,d>> months:d 6:n)) => (DURATION,P6M)
Correct. No update.
Sample processing time 0.0030
408 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 1
Sentence:          Reed International PLC said that net income for the six months ended Oct. 1 slipped 5% to #89.7 million ($141.9 million), or 16 pence a share, from #94.8 million ($149.9 million), or 17.3 pence a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-10-01
Executing the phrase: oct. 1
with logic: (intersect:<s*,s> october:s 1d:s)
and lexical entries: [oct. :- NP : october:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: oct. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 1d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: oct. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 1d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: oct. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 1d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: oct. 1
with logic: (intersect:<s*,s> october:s 1d:s)
and lexical entries: [oct. :- NP : october:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Correct parses:
(intersect:<s*,s> october:s 1d:s) => ((this:<s,<r,s>> (intersect:<s*,s> october:s 1d:s) ref_time:r)) => (DATE,1989-10-01)
Correct. No update.
Sample processing time 0.0030
409 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest period
Sentence:          While there were no one-time gains or losses in the latest period, there was a one-time gain of #18 million in the 1988 period.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Correct parses:
(previous:<d,<r,s>> quarter:d ref_time:r) => ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
410 : ================== [0]
Sample type: TemporalSentence
Phrase:            1988
Sentence:          While there were no one-time gains or losses in the latest period, there was a one-time gain of #18 million in the 1988 period.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1998
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Bad violating parse: (1988:r, ((this:<s,<r,s>> 1988:r ref_time:r)) => (DATE,1988))
No correct parses. No update.
Sample processing time 0.0030
411 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          And while there was no profit this year from discontinued operations, last year they contributed #34 million, before tax.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
412 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          And while there was no profit this year from discontinued operations, last year they contributed #34 million, before tax.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
413 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Pretax profit fell 3.7% to #128 million from #133 million and was below analysts' expectations of #130 million to #135 million, but shares rose 6 pence to 388 pence in early trading yesterday in London.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0040
414 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Reed is paying an interim dividend of 4.6 pence, up 15% from 4 pence a year earlier.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-11-02
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-11-01))
No correct parses. No update.
Sample processing time 0.0040
415 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          N.V. DSM said net income in the third quarter jumped 63% as the company had substantially lower extraordinary charges to account for a restructuring program.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
416 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          The Dutch chemical group said net income gained to 235 million guilders ($113.2 million), or 6.70 guilders a share, from 144 million guilders, or 4.10 guilders a share, a year ago.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0050
417 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest quarter
Sentence:          The 32% state-owned DSM had eight million guilders of extraordinary charges in the latest quarter, mainly to reflect one-time losses in connection with the disposal of some operations.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Correct parses:
(previous:<d,<r,s>> quarter:d ref_time:r) => ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
418 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Last year, DSM had 71 million guilders of extraordinary charges for the restructuring program and other transactions.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0010
419 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year
Sentence:          said it expects net income in the year ending June 30, 1990, to fall below a recent analyst's estimate of $1.65 a share.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P1Y
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Correct parses:
year:d => (year:d) => (DURATION,P1Y)
Correct. No update.
Sample processing time 0.0020
420 : ================== [0]
Sample type: TemporalSentence
Phrase:            june 30 1990
Sentence:          said it expects net income in the year ending June 30, 1990, to fall below a recent analyst's estimate of $1.65 a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1990-06-30
Executing the phrase: june 30 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: june 30 1990
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: june 30 1990
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: june 30 1990
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: june 30 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r) => ((intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r)) => (DATE,1990-06-30)
Correct. No update.
Sample processing time 0.0030
421 : ================== [0]
Sample type: TemporalSentence
Phrase:            the current fiscal year
Sentence:          The Rockford, Ill., maker of fasteners also said it expects to post sales in the current fiscal year that are " slightly above" fiscal 1989 sales of $155 million.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
No correct parses. No update.
Sample processing time 0.0010
422 : ================== [0]
Sample type: TemporalSentence
Phrase:            fiscal 1989
Sentence:          The Rockford, Ill., maker of fasteners also said it expects to post sales in the current fiscal year that are " slightly above" fiscal 1989 sales of $155 million.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Correct parses:
1989:r => (1989:r) => (DATE,1989)
Correct. No update.
Sample processing time 0.0040
423 : ================== [0]
Sample type: TemporalSentence
Phrase:            fiscal 1989
Sentence:          In fiscal 1989, Elco earned $7.8 million, or $1.65 a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Correct parses:
1989:r => (1989:r) => (DATE,1989)
Correct. No update.
Sample processing time 0.0010
424 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          The company's stock fell $1.125 to $13.625 in over-the-counter trading yesterday.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0030
425 : ================== [0]
Sample type: TemporalSentence
Phrase:            fourth quarter
Sentence:          Oshkosh Truck Corp., Oshkosh, Wis., estimated earnings for its fourth quarter ended Sept. 30 fell 50% to 75% below the year-earlier $4.5 million, or 51 cents a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1998-Q4
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Bad violating parse: ((nth:<d,<n,s>> quarter:d 4o:n), ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4))
No correct parses. No update.
Sample processing time 0.0020
426 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          Oshkosh Truck Corp., Oshkosh, Wis., estimated earnings for its fourth quarter ended Sept. 30 fell 50% to 75% below the year-earlier $4.5 million, or 51 cents a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-09
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Bad violating parse: ((intersect:<s*,s> september:s 30d:s), ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30))
No correct parses. No update.
Sample processing time 0.0030
427 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fiscal year
Sentence:          The truck maker said the significant drop in net income will result in lower earnings for the fiscal year.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
No correct parses. No update.
Sample processing time 0.0010
428 : ================== [0]
Sample type: TemporalSentence
Phrase:            fiscal 1988
Sentence:          In fiscal 1988, the company earned $17.3 million, or $1.92 a share, on revenue of $352.9 million.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
Executing the phrase: fiscal 1988
with logic: 1988:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r]
Executing the phrase: fiscal 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r]
Executing the phrase: fiscal 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r]
Executing the phrase: fiscal 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r]
Executing the phrase: fiscal 1988
with logic: 1988:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r]
Bad violating parse: (1988:r, ((this:<s,<r,s>> 1988:r ref_time:r)) => (DATE,1988))
No correct parses. No update.
Sample processing time 0.0010
429 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Travelers Corp.'s third-quarter net income rose 11%, even though claims stemming from Hurricane Hugo reduced results $40 million.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
430 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          Net advanced to $94.2 million, or 89 cents a share, from $85 million, or 83 cents a share, including net realized investment gains of $31 million, up from $10 million a year ago.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Update: {TEMPORAL_CONTEXT_temporal_ref_VBG=1.0, TEMPORAL_REFERENCE_temporal_ref_nonea year ago=-1.0, TEMPORAL_REFERENCE_temporal_reftemporal_refa year ago=1.0, TEMPORAL_TYPE_d=-1.0, TEMPORAL_TYPE_s=1.0}
Sample processing time 0.0080
431 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          Travelers estimated that the California earthquake last month will result in a fourth-quarter pre-tax charge of less than $10 million.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-10
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0020
432 : ================== [0]
Sample type: TemporalSentence
Phrase:            fourth quarter
Sentence:          Travelers estimated that the California earthquake last month will result in a fourth-quarter pre-tax charge of less than $10 million.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Correct. No update.
Sample processing time 0.0020
433 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest quarter
Sentence:          The insurer's earnings from commercial property/casualty lines fell 59% in the latest quarter, while it lost $7.2 million in its personal property/casualty business, compared with earnings of $6.1 million a year ago.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Correct parses:
(previous:<d,<r,s>> quarter:d ref_time:r) => ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
434 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          The insurer's earnings from commercial property/casualty lines fell 59% in the latest quarter, while it lost $7.2 million in its personal property/casualty business, compared with earnings of $6.1 million a year ago.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0050
435 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Travelers's employee benefits group, which includes its group health insurance operations, posted earnings of $24 million, compared with a loss of $3 million last year.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
No correct parses. No update.
Sample processing time 0.0040
436 : ================== [0]
Sample type: TemporalSentence
Phrase:            the first nine months
Sentence:          In the first nine months, net was $306 million, compared with a loss of $195 million in the 1988 period.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0030
437 : ================== [0]
Sample type: TemporalSentence
Phrase:            the 1988 period
Sentence:          In the first nine months, net was $306 million, compared with a loss of $195 million in the 1988 period.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988
No correct parses. No update.
Sample processing time 0.0010
438 : ================== [0]
Sample type: TemporalSentence
Phrase:            year ago
Sentence:          The year-ago results included a $415 million charge in the 1988 second quarter for underperforming real estate and mortgage loans.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0020
439 : ================== [0]
Sample type: TemporalSentence
Phrase:            the 1988 second quarter
Sentence:          The year-ago results included a $415 million charge in the 1988 second quarter for underperforming real estate and mortgage loans.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q2
Executing the phrase: the 1988 second quarter
with logic: (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n))
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n)))), quarter :- NP : quarter:d, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n))))]
Executing the phrase: the 1988 second quarter
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n)))), quarter :- NP : quarter:d, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n))))]
Executing the phrase: the 1988 second quarter
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n)))), quarter :- NP : quarter:d, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n))))]
Executing the phrase: the 1988 second quarter
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n)))), quarter :- NP : quarter:d, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n))))]
Executing the phrase: the 1988 second quarter
with logic: (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n))
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n)))), quarter :- NP : quarter:d, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n))))]
Correct parses:
(intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n)) => ((intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n))) => (DATE,1988-Q2)
Correct. No update.
Sample processing time 0.0040
440 : ================== [0]
Sample type: TemporalSentence
Phrase:            currently
Sentence:          Primerica, which had owned nearly 70% of Williams, will pay about 16.7 million shares, currently valued at almost $472 million, for the rest of Williams.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
441 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Williams shares, which were to be delisted from the New York Stock Exchange after the close of composite trading yesterday, closed at $23.25, off 12.5 cents.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0030
442 : ================== [0]
Sample type: TemporalSentence
Phrase:            one day
Sentence:          The action followed by one day an Intelogic announcement that it will retain an investment banker to explore alternatives "to maximize shareholder value," including the possible sale of the company.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P1D
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Correct parses:
(*:<d,<n,d>> day:d 1:n) => ((*:<d,<n,d>> day:d 1:n)) => (DURATION,P1D)
Correct. No update.
Sample processing time 0.0020
443 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          In New York Stock Exchange composite trading yesterday, Intelogic shares rose 37.5 cents to close at $2.75.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0020
444 : ================== [0]
Sample type: TemporalSentence
Phrase:            5 p.m. est nov. 9
Sentence:          said it extended its $18-a-share offer for Telerate Inc. common stock until 5 p.m. EST Nov. 9.
ref_time:          1989-11-02
Gold type:         TIME
gold val:          1989-11-09T17:00
No correct parses. No update.
Sample processing time 0.0010
445 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 6
Sentence:          The offer, valued at about $576 million for the 33% of Telerate that Dow Jones doesn't already own, had been set to expire Nov. 6.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-06
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Correct parses:
(intersect:<s*,s> november:s 6d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)) => (DATE,1989-11-06)
Correct. No update.
Sample processing time 0.0040
446 : ================== [0]
Sample type: TemporalSentence
Phrase:            previously
Sentence:          Previously, it offered $13.65 a share in cash, or $29 million.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0010
447 : ================== [0]
Sample type: TemporalSentence
Phrase:            the first two years
Sentence:          The El Paso, Texas, maker of Western boots and leather accessories said the preferred stock would accrue dividends at a 12% rate, but wouldn't be paid for the first two years.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: the first two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the first two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the first two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the first two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the first two years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 2:n) => ((*:<d,<n,d>> years:d 2:n)) => (DURATION,P2Y)
Correct. No update.
Sample processing time 0.0060
448 : ================== [0]
Sample type: TemporalSentence
Phrase:            five years
Sentence:          The stock would be redeemed in five years, subject to terms of the surviving company's debt.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1994
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Bad violating parse: ((*:<d,<n,d>> years:d 5:n), ((*:<d,<n,d>> years:d 5:n)) => (DURATION,P5Y))
Bad violating parse: ((*:<d,<n,d>> years:d 5:n), ((*:<d,<n,d>> years:d 5:n)) => (DURATION,P5Y))
Bad violating parse: ((*:<d,<n,d>> years:d 5:n), ((*:<d,<n,d>> years:d 5:n)) => (DURATION,P5Y))
Bad violating parse: ((*:<d,<n,d>> years:d 5:n), ((*:<d,<n,d>> years:d 5:n)) => (DURATION,P5Y))
No correct parses. No update.
Sample processing time 0.0020
449 : ================== [0]
Sample type: TemporalSentence
Phrase:            27 year
Sentence:          Mr. Reupke, 52 years old and a 27-year Reuters veteran, had been the information-services company's general manager for only six months.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P27Y
Executing the phrase: 27 year
with logic: (*:<d,<n,d>> year:d 27:n)
and lexical entries: [27 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 27:n)), year :- NP : year:d]
Executing the phrase: 27 year
with logic: (*:<d,<n,d>> year:d 27:n)
and lexical entries: [27 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 27:n)), year :- NP : year:d]
Executing the phrase: 27 year
with logic: (*:<d,<n,d>> year:d 27:n)
and lexical entries: [27 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 27:n)), year :- NP : year:d]
Executing the phrase: 27 year
with logic: (*:<d,<n,d>> year:d 27:n)
and lexical entries: [27 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 27:n)), year :- NP : year:d]
Executing the phrase: 27 year
with logic: (*:<d,<n,d>> year:d 27:n)
and lexical entries: [27 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 27:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 27:n) => ((*:<d,<n,d>> year:d 27:n)) => (DURATION,P27Y)
Correct. No update.
Sample processing time 0.0020
450 : ================== [0]
Sample type: TemporalSentence
Phrase:            six months
Sentence:          Mr. Reupke, 52 years old and a 27-year Reuters veteran, had been the information-services company's general manager for only six months.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P6M
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 6:n))
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 6:n) => ((*:<d,<n,d>> months:d 6:n)) => (DURATION,P6M)
Correct. No update.
Sample processing time 0.0030
451 : ================== [0]
Sample type: TemporalSentence
Phrase:            several year
Sentence:          His appointment to that post, which has senior administrative, staff and policy responsibilities, followed a several-year tenure as Reuters's editor in chief.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          PXY
Executing the phrase: several year
with logic: years:d
and lexical entries: [several year :- NP : years:d]
Executing the phrase: several year
with logic: years:d
and lexical entries: [several year :- NP : years:d]
Executing the phrase: several year
with logic: years:d
and lexical entries: [several year :- NP : years:d]
Executing the phrase: several year
with logic: years:d
and lexical entries: [several year :- NP : years:d]
Executing the phrase: several year
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [several year :- NP : years:d]
Correct parses:
years:d => (years:d) => (DURATION,PXY)
Correct. No update.
Sample processing time 0.0030
452 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          "If I were choosing the people of tomorrow, I would have chosen the people who are now on the board," he said.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
453 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 20
Sentence:          DD Acquisition Corp., a partnership of Unicorp Canada Corp.'s Kingsbridge Capital Group and Cara Operations Ltd., extended to Nov. 20 its $45-a-share offer for all Dunkin' Donuts Inc. shares outstanding.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-20
Executing the phrase: nov. 20
with logic: (intersect:<s*,s> november:s 20d:s)
and lexical entries: [nov. :- NP : november:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: nov. 20
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 20d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: nov. 20
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 20d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: nov. 20
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 20d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: nov. 20
with logic: (intersect:<s*,s> november:s 20d:s)
and lexical entries: [nov. :- NP : november:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Correct parses:
(intersect:<s*,s> november:s 20d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 20d:s) ref_time:r)) => (DATE,1989-11-20)
Correct. No update.
Sample processing time 0.0040
454 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          The offer, which was due to expire yesterday, is conditional on 50.1% of Dunkin' common shares, on a fully diluted basis, being tendered and on the withdrawal of the company's poison pill rights plan.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0020
455 : ================== [0]
Sample type: TemporalSentence
Phrase:            already
Sentence:          The partners said they already hold 15% of all shares outstanding.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: already
with logic: present_ref:r
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: present_ref:r
and lexical entries: [already :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
456 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 10
Sentence:          Dunkin' has set Nov. 10 as the deadline for the receipt of any competing bids.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-10
Executing the phrase: nov. 10
with logic: (intersect:<s*,s> november:s 10d:s)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (intersect:<s*,s> november:s 10d:s)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Correct parses:
(intersect:<s*,s> november:s 10d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)) => (DATE,1989-11-10)
Correct. No update.
Sample processing time 0.0020
457 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          reported a third-quarter net loss of $35.2 million, or 31 cents a share, compared with year-earlier profit of $3.8 million, or one cent a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
458 : ================== [0]
Sample type: TemporalSentence
Phrase:            year earlier
Sentence:          reported a third-quarter net loss of $35.2 million, or 31 cents a share, compared with year-earlier profit of $3.8 million, or one cent a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Update: {TEMPORAL_CONTEXT_temporal_ref_VBN=1.0, TEMPORAL_REFERENCE_temporal_ref_noneyear earlier=-1.0, TEMPORAL_REFERENCE_temporal_reftemporal_refyear earlier=1.0, TEMPORAL_TYPE_d=-1.0, TEMPORAL_TYPE_s=1.0}
Sample processing time 0.0050
459 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          A spokesman for the Stamford, Conn.based company said operations had a loss of $5.5 million for the quarter; in addition, the loss was magnified by nonrecurring charges totaling $23.5 million and $8.2 million in asset-valuation adjustments that he described as "unusual."
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, ((temporal_ref:<d,s> quarter:d)) => (DATE,1988-Q2))
No correct parses. No update.
Sample processing time 0.0030
460 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Revenue declined 8% to $85.7 million, from $93.3 million a year earlier.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1987-Q2))
No correct parses. No update.
Sample processing time 0.0030
461 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          said it expects to report a third-quarter net loss of $17 million to $19 million because of special reserves and continued low natural-gas prices.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
462 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          A year earlier, net income was $2.1 million, or six cents a share, on revenue of $169.9 million.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0020
463 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          In national over-the-counter trading yesterday, POP plunged $4 to $14.75.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0020
464 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          RMS said it had a loss of $158,666, or 10 cents a share, in the third quarter, compared with a year-earlier loss of $26,956, or two cents a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
465 : ================== [0]
Sample type: TemporalSentence
Phrase:            year earlier
Sentence:          RMS said it had a loss of $158,666, or 10 cents a share, in the third quarter, compared with a year-earlier loss of $26,956, or two cents a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0030
466 : ================== [0]
Sample type: TemporalSentence
Phrase:            the nine months
Sentence:          For the nine months, the company reported a net loss of $608,413, or 39 cents a share, compared with year-earlier net income of $967,809, or 62 cents a share.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Bad violating parse: ((*:<d,<n,d>> months:d 9:n), ((temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))) => (DATE,0))
Update: {TEMPORAL_CONTEXT_temporal_ref_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=1.0, TEMPORAL_REFERENCE_temporal_reftemporal_refnotTempRef=-1.0, TEMPORAL_TYPE_d=1.0, TEMPORAL_TYPE_s=-1.0}
Sample processing time 0.0020
467 : ================== [0]
Sample type: TemporalSentence
Phrase:            year earlier
Sentence:          For the nine months, the company reported a net loss of $608,413, or 39 cents a share, compared with year-earlier net income of $967,809, or 62 cents a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,-1))
No correct parses. No update.
Sample processing time 0.0030
468 : ================== [0]
Sample type: TemporalSentence
Phrase:            one year term
Sentence:          That amount is convertible into shares of Meridian common stock at $2 a share during its one-year term.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P1Y
Executing the phrase: one year term
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d, term :- NP\NP : (lambda $0:d $0)]
Executing the phrase: one year term
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d, term :- NP\NP : (lambda $0:d $0)]
Executing the phrase: one year term
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d, term :- NP\NP : (lambda $0:d $0)]
Executing the phrase: one year term
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d, term :- NP\NP : (lambda $0:d $0)]
Executing the phrase: one year term
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d, term :- NP\NP : (lambda $0:d $0)]
Correct parses:
(*:<d,<n,d>> year:d 1:n) => ((*:<d,<n,d>> year:d 1:n)) => (DURATION,P1Y)
Correct. No update.
Sample processing time 0.0030
469 : ================== [0]
Sample type: TemporalSentence
Phrase:            an additional year
Sentence:          The loan may be extended by the McAlpine group for an additional year with an increase in the conversion price to $2.50 a share.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P1Y
No correct parses. No update.
Sample processing time 0.0000
470 : ================== [0]
Sample type: TemporalSentence
Phrase:            mid afternoon yesterday
Sentence:          In London at mid-afternoon yesterday, Ratners's shares were up 2 pence (1.26 cents), at 260 pence ($1.64).
ref_time:          1989-11-02
Gold type:         TIME
gold val:          1989-11-01TAF
No correct parses. No update.
Sample processing time 0.0010
471 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 10
Sentence:          The sweetened offer has acceptances from more than 50% of Weisfield's shareholders, and it is scheduled for completion by Dec. 10.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-12-10
Executing the phrase: dec. 10
with logic: (intersect:<s*,s> december:s 10d:s)
and lexical entries: [dec. :- NP : december:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: dec. 10
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 10d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: dec. 10
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 10d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: dec. 10
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 10d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: dec. 10
with logic: (intersect:<s*,s> december:s 10d:s)
and lexical entries: [dec. :- NP : december:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Correct parses:
(intersect:<s*,s> december:s 10d:s) => ((next:<s,<r,s>> (intersect:<s*,s> december:s 10d:s) ref_time:r)) => (DATE,1989-12-10)
Correct. No update.
Sample processing time 0.0030
472 : ================== [0]
Sample type: TemporalSentence
Phrase:            already
Sentence:          About 30% of Ratners's profit already is derived from the U.S.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: already
with logic: present_ref:r
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: present_ref:r
and lexical entries: [already :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
473 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Valley Federal Savings amp Loan Association took an $89.9 million charge as it reported a third-quarter loss of $70.7 million, or $12.09 a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
474 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          The Van Nuys, Calif., thrift had net income of $132,000, or three cents a share, a year ago.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0030
475 : ================== [0]
Sample type: TemporalSentence
Phrase:            future
Sentence:          The company said the one-time provision would substantially eliminate all future losses at the unit.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: future
with logic: future_ref:r
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: future_ref:r
and lexical entries: [future :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0020
476 : ================== [0]
Sample type: TemporalSentence
Phrase:            1990
Sentence:          The thrift said that "after these charges and assuming no dramatic fluctuation in interest rates, the association expects to achieve near record earnings in 1990."
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1990
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
477 : ================== [0]
Sample type: TemporalSentence
Phrase:            currently
Sentence:          Valley Federal is currently being examined by regulators.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
478 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          New loans continue to slow; they were $6.6 million in the quarter compared with $361.8 million a year ago.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0020
479 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          New loans continue to slow; they were $6.6 million in the quarter compared with $361.8 million a year ago.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,0))
No correct parses. No update.
Sample processing time 0.0030
480 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          First of America, which now has 45 banks and $12.5 billion in assets, announced an agreement to acquire the Peoria, Ill., bank holding company in January.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
481 : ================== [0]
Sample type: TemporalSentence
Phrase:            january
Sentence:          First of America, which now has 45 banks and $12.5 billion in assets, announced an agreement to acquire the Peoria, Ill., bank holding company in January.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1990-01
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Correct parses:
january:s => ((next:<s,<r,s>> january:s ref_time:r)) => (DATE,1990-01)
Bad violating parse: (january:s, ((this:<s,<r,s>> january:s ref_time:r)) => (DATE,1989-01))
Update: {TEMPORAL_CONTEXT__next_VB=1.0, TEMPORAL_CONTEXT__this_VB=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0040
482 : ================== [0]
Sample type: TemporalSentence
Phrase:            early 1990
Sentence:          The Midwest Financial subsidiary banks will continue to operate under their current names until early 1990, when each will adopt the First of America name.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1990
Executing the phrase: early 1990
with logic: 1990:r
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: early 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: early 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: early 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: early 1990
with logic: 1990:r
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
483 : ================== [0]
Sample type: TemporalSentence
Phrase:            once
Sentence:          Coleco Industries Inc., a once high-flying toy maker whose stock peaked at $65 a share in the early 1980s, filed a Chapter 11 reorganization plan that provides just 1.125 cents a share for common stockholders.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: once
with logic: past_ref:r
and lexical entries: [once :- NP : past_ref:r]
Executing the phrase: once
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [once :- NP : past_ref:r]
Executing the phrase: once
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [once :- NP : past_ref:r]
Executing the phrase: once
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [once :- NP : past_ref:r]
Executing the phrase: once
with logic: past_ref:r
and lexical entries: [once :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0070
484 : ================== [0]
Sample type: TemporalSentence
Phrase:            the early 1980s
Sentence:          Coleco Industries Inc., a once high-flying toy maker whose stock peaked at $65 a share in the early 1980s, filed a Chapter 11 reorganization plan that provides just 1.125 cents a share for common stockholders.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          198
Executing the phrase: the early 1980s
with logic: 198:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), 1980s :- NP : 198:r]
Executing the phrase: the early 1980s
with logic: (previous:<s,<r,s>> 198:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), 1980s :- NP : 198:r]
Executing the phrase: the early 1980s
with logic: (this:<s,<r,s>> 198:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), 1980s :- NP : 198:r]
Executing the phrase: the early 1980s
with logic: (next:<s,<r,s>> 198:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), 1980s :- NP : 198:r]
Executing the phrase: the early 1980s
with logic: 198:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), 1980s :- NP : 198:r]
Correct parses:
198:r => (198:r) => (DATE,198)
Correct. No update.
Sample processing time 0.0030
485 : ================== [0]
Sample type: TemporalSentence
Phrase:            1983
Sentence:          The Avon, Conn., company's stock hit a high in 1983 after it unveiled its Adam home computer, but the product was plagued with glitches and the company's fortunes plunged.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1983
Executing the phrase: 1983
with logic: 1983:r
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (previous:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (this:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (next:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: 1983:r
and lexical entries: [1983 :- NP : 1983:r]
Correct parses:
1983:r => (1983:r) => (DATE,1983)
Correct. No update.
Sample processing time 0.0020
486 : ================== [0]
Sample type: TemporalSentence
Phrase:            1985
Sentence:          But Coleco bounced back with the introduction of the Cabbage Patch dolls, whose sales hit $600 million in 1985.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1985
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (previous:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (this:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (next:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Correct parses:
1985:r => (1985:r) => (DATE,1985)
Correct. No update.
Sample processing time 0.0030
487 : ================== [0]
Sample type: TemporalSentence
Phrase:            july 1988
Sentence:          But as the craze died, Coleco failed to come up with another winner and filed for bankruptcy-law protection in July 1988.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-07
Executing the phrase: july 1988
with logic: (intersect:<s*,s> 1988:r july:s)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), 1988 :- NP : 1988:r, july :- NP : july:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: july 1988
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1988:r july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), 1988 :- NP : 1988:r, july :- NP : july:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: july 1988
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1988:r july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), 1988 :- NP : 1988:r, july :- NP : july:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: july 1988
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1988:r july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), 1988 :- NP : 1988:r, july :- NP : july:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: july 1988
with logic: (intersect:<s*,s> 1988:r july:s)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), 1988 :- NP : 1988:r, july :- NP : july:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Correct parses:
(intersect:<s*,s> 1988:r july:s) => ((intersect:<s*,s> 1988:r july:s)) => (DATE,1988-07)
Correct. No update.
Sample processing time 0.0030
488 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          completed its tender offer for Columbia Pictures Entertainment Inc., with Columbia shareholders tendering 99.3% of all common shares outstanding by the Tuesday deadline.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-10-31
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Correct parses:
tuesday:s => ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1989-10-31)
Bad violating parse: (tuesday:s, ((next:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1989-11-07))
Update: {TEMPORAL_CONTEXT__next_VBG=-1.0, TEMPORAL_CONTEXT__previous_VBG=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_WEEKDAY_notSameDay_next=-1.0, TEMPORAL_WEEKDAY_notSameDay_previous=1.0}
Sample processing time 0.0040
489 : ================== [0]
Sample type: TemporalSentence
Phrase:            this month
Sentence:          Sony Columbia Acquisition Corp., formed for the Columbia deal, will formally take ownership of the movie studio later this month, a spokesman said.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-11)
Correct. No update.
Sample processing time 0.0020
490 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          Sony's planned acquisition of Guber/Peters Entertainment Co. for $200 million is scheduled to close Monday.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-06
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Correct parses:
monday:s => ((next:<s,<r,s>> monday:s ref_time:r)) => (DATE,1989-11-06)
Bad violating parse: (monday:s, ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1989-10-30))
Update: {TEMPORAL_CONTEXT__next_VB=1.0, TEMPORAL_CONTEXT__previous_VB=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0, TEMPORAL_WEEKDAY_notSameDay_next=1.0, TEMPORAL_WEEKDAY_notSameDay_previous=-1.0}
Sample processing time 0.0040
491 : ================== [0]
Sample type: TemporalSentence
Phrase:            early this week
Sentence:          A spokeswoman for Crum amp Forster said employees were told early this week that numerous staff functions for the personal insurance lines were going to be centralized as a cost-cutting move.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-W44
Executing the phrase: early this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: early this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: early this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: early this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: early this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(this:<d,<r,s>> week:d ref_time:r) => ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44)
Correct. No update.
Sample processing time 0.0020
492 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next three quarters
Sentence:          She said the move would result in a after-tax charge of less than $4 million to be spread over the next three quarters.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the next three quarters
with logic: (*:<d,<n,d>> quarters:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (*:<d,<n,d>> quarters:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (*:<d,<n,d>> quarters:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (*:<d,<n,d>> quarters:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> quarters:d 3:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (next:<d,<r,s>> (*:<d,<n,d>> quarters:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (next:<d,<r,s>> (*:<d,<n,d>> quarters:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (next:<d,<r,s>> (*:<d,<n,d>> quarters:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (next:<d,<r,s>> (*:<d,<n,d>> quarters:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (next:<d,<r,s>> (*:<d,<n,d>> quarters:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Bad violating parse: ((*:<d,<n,d>> quarters:d 3:n), ((*:<d,<n,d>> quarters:d 3:n)) => (DURATION,P3Q))
Bad violating parse: ((*:<d,<n,d>> quarters:d 3:n), ((*:<d,<n,d>> quarters:d 3:n)) => (DURATION,P3Q))
Bad violating parse: ((*:<d,<n,d>> quarters:d 3:n), ((*:<d,<n,d>> quarters:d 3:n)) => (DURATION,P3Q))
Bad violating parse: ((*:<d,<n,d>> quarters:d 3:n), ((*:<d,<n,d>> quarters:d 3:n)) => (DURATION,P3Q))
No correct parses. No update.
Sample processing time 0.0070
493 : ================== [0]
Sample type: TemporalSentence
Phrase:            the first nine months
Sentence:          By comparison, for the first nine months, Xerox earned $492 million, or $4.55 a share, on revenue of $12.97 billion.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0030
494 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent quarters
Sentence:          Property/casualty insurance has been a tough business in recent quarters, as pricing has been cutthroat and natural disasters such as Hurricane Hugo and the California earthquake have resulted in huge payments.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          PXM
Executing the phrase: recent quarters
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), quarters :- NP : quarters:d]
Executing the phrase: recent quarters
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), quarters :- NP : quarters:d]
Executing the phrase: recent quarters
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), quarters :- NP : quarters:d]
Executing the phrase: recent quarters
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), quarters :- NP : quarters:d]
Executing the phrase: recent quarters
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), quarters :- NP : quarters:d]
Bad violating parse: (past_ref:r, ((this:<s,<r,s>> past_ref:r ref_time:r)) => (DATE,PAST_REF))
No correct parses. No update.
Sample processing time 0.0020
495 : ================== [0]
Sample type: TemporalSentence
Phrase:            fourth quarter
Sentence:          said it will offer an early retirement package to as many as 1,100 employees in a cost-cutting move expected to result in a fourth-quarter charge.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          1989-Q4
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Bad violating parse: ((nth:<d,<n,s>> quarter:d 4o:n), ((next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1990-Q4))
No correct parses. No update.
Sample processing time 0.0030
496 : ================== [0]
Sample type: TemporalSentence
Phrase:            two year
Sentence:          Chairman Theodore Cooper called the program part of the company's two-year strategy to implement budget constraints and "an effective headcount-control program."
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 2:n) => ((*:<d,<n,d>> year:d 2:n)) => (DURATION,P2Y)
Correct. No update.
Sample processing time 0.0020
497 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          In composite trading on the New York Stock Exchange yesterday, Upjohn shares rose 87.5 cents to $38.875 apiece.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0020
498 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier this year
Sentence:          The company earlier this year adopted a shareholder-rights plan to ward off unwanted suitors.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
499 : ================== [0]
Sample type: TemporalSentence
Phrase:            two year
Sentence:          The spokesman said it is the first early retirement plan offered under its two-year cost-control strategy.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 2:n) => ((*:<d,<n,d>> year:d 2:n)) => (DURATION,P2Y)
Correct. No update.
Sample processing time 0.0020
500 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier
Sentence:          Earlier staff-reduction moves have trimmed about 300 jobs, the spokesman said.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: earlier
with logic: past_ref:r
and lexical entries: [earlier :- NP : past_ref:r]
Executing the phrase: earlier
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [earlier :- NP : past_ref:r]
Executing the phrase: earlier
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [earlier :- NP : past_ref:r]
Executing the phrase: earlier
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [earlier :- NP : past_ref:r]
Executing the phrase: earlier
with logic: past_ref:r
and lexical entries: [earlier :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0010
501 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Under an accord signed yesterday, the government and Union Bank of Finland would become major shareholders in the new company, each injecting 100 million Finnish markkaa ($23.5 million).
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0020
502 : ================== [0]
Sample type: TemporalSentence
Phrase:            this week
Sentence:          Carnival, which has three ships on order from Waertsilae Marine, presented claims for $1.5 billion damages in the bankruptcy court this week.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-W44
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(this:<d,<r,s>> week:d ref_time:r) => ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44)
Correct. No update.
Sample processing time 0.0030
503 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          Waertsilae Marine's bankruptcy proceedings began Tuesday in a Helsinki court.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-10-31
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Correct parses:
tuesday:s => ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1989-10-31)
Correct. No update.
Sample processing time 0.0010
504 : ================== [0]
Sample type: TemporalSentence
Phrase:            fourth quarter
Sentence:          reported a 47% decline in fourth-quarter earnings, reflecting restructuring costs as well as a more difficult pet food market.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          1989-Q4
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Bad violating parse: ((nth:<d,<n,s>> quarter:d 4o:n), ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4))
No correct parses. No update.
Sample processing time 0.0020
505 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          The St. Louis company earned $45.2 million, or 65 cents a share, compared with $84.9 million, or $1.24 a share, a year earlier.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q4
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q4)
Correct. No update.
Sample processing time 0.0040
506 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest period
Sentence:          Sales in the latest period were $1.76 billion, a 13% increase from last year's $1.55 billion.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
No correct parses. No update.
Sample processing time 0.0020
507 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Sales in the latest period were $1.76 billion, a 13% increase from last year's $1.55 billion.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988-Q4
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
No correct parses. No update.
Sample processing time 0.0030
508 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year
Sentence:          For the year ended Sept. 30, Ralston earned $422.5 million, or $6.44 a share, up 8.9% from $387.8 million, or $5.63 a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0010
509 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          For the year ended Sept. 30, Ralston earned $422.5 million, or $6.44 a share, up 8.9% from $387.8 million, or $5.63 a share.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-09-30
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> september:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30)
Correct. No update.
Sample processing time 0.0020
510 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          This year's results included a gain of $70.2 million on the disposal of seafood operations.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
511 : ================== [0]
Sample type: TemporalSentence
Phrase:            the full year
Sentence:          Sales for the full year were $6.6 billion, up 13% from $5.8 billion.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
512 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent
Sentence:          Ralston said its restructuring costs include the phase-out of a battery facility in Greenville, N.C., the recent closing of a Hostess cake bakery in Cincinnati and a reduction in staff throughout the company.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
513 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next year or so
Sentence:          The battery plant, which makes rechargeable nickel cadmium and carbon zinc products, will be closed over the next year or so, a spokesman said.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1990
Executing the phrase: the next year or so
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), year :- NP : year:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), year :- NP : year:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), year :- NP : year:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), year :- NP : year:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), year :- NP : year:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d, or so :- NP\NP : (lambda $0:s $0), or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d, or so :- NP\NP : (lambda $0:s $0), or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d, or so :- NP\NP : (lambda $0:s $0), or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d, or so :- NP\NP : (lambda $0:s $0), or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d, or so :- NP\NP : (lambda $0:s $0), or so :- NP\NP : (lambda $0:d $0)]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0070
514 : ================== [0]
Sample type: TemporalSentence
Phrase:            fourth quarter
Sentence:          Ralston attributed its fourth-quarter slump partly to higher costs of ingredients in the pet food business as well as competitive pressures, which required higher advertising spending.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Correct. No update.
Sample processing time 0.0020
515 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year
Sentence:          For the year, pet food volume was flat, the company said.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0010
516 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Ralston shares closed yesterday at $80.50, off $1, in New York Stock Exchange composite trading.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0020
517 : ================== [0]
Sample type: TemporalSentence
Phrase:            jan. 3
Sentence:          The split and quarterly dividend will be payable Jan. 3 to stock of record Nov. 16, the company said.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1990-01-03
Executing the phrase: jan. 3
with logic: (intersect:<s*,s> january:s 3d:s)
and lexical entries: [jan. :- NP : january:s, 3 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 3d:s))]
Executing the phrase: jan. 3
with logic: (previous:<s,<r,s>> (intersect:<s*,s> january:s 3d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 3 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 3d:s))]
Executing the phrase: jan. 3
with logic: (this:<s,<r,s>> (intersect:<s*,s> january:s 3d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 3 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 3d:s))]
Executing the phrase: jan. 3
with logic: (next:<s,<r,s>> (intersect:<s*,s> january:s 3d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 3 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 3d:s))]
Executing the phrase: jan. 3
with logic: (intersect:<s*,s> january:s 3d:s)
and lexical entries: [jan. :- NP : january:s, 3 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 3d:s))]
Correct parses:
(intersect:<s*,s> january:s 3d:s) => ((next:<s,<r,s>> (intersect:<s*,s> january:s 3d:s) ref_time:r)) => (DATE,1990-01-03)
Correct. No update.
Sample processing time 0.0020
518 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 16
Sentence:          The split and quarterly dividend will be payable Jan. 3 to stock of record Nov. 16, the company said.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-11-16
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Correct parses:
(intersect:<s*,s> november:s 16d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)) => (DATE,1989-11-16)
Correct. No update.
Sample processing time 0.0020
519 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fourth quarter
Sentence:          Separately, UniFirst reported that net income rose 21% to $3 million, or 29 cents a share adjusted for the split, for the fourth quarter ended Aug. 26.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Correct. No update.
Sample processing time 0.0040
520 : ================== [0]
Sample type: TemporalSentence
Phrase:            aug. 26
Sentence:          Separately, UniFirst reported that net income rose 21% to $3 million, or 29 cents a share adjusted for the split, for the fourth quarter ended Aug. 26.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-08-26
Executing the phrase: aug. 26
with logic: (intersect:<s*,s> august:s 26d:s)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (intersect:<s*,s> august:s 26d:s)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Correct parses:
(intersect:<s*,s> august:s 26d:s) => ((this:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)) => (DATE,1989-08-26)
Correct. No update.
Sample processing time 0.0040
521 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          A year earlier UniFirst earned $2.4 million, or 24 cents a share adjusted for the split.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-11-01
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-08-26))
No correct parses. No update.
Sample processing time 0.0010
522 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 23
Sentence:          I was pleased to note that your Oct. 23 Centennial Journal item recognized the money-fund concept as one of the significant events of the past century.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-10-23
Executing the phrase: oct. 23
with logic: (intersect:<s*,s> october:s 23d:s)
and lexical entries: [oct. :- NP : october:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: oct. 23
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 23d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: oct. 23
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 23d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: oct. 23
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 23d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: oct. 23
with logic: (intersect:<s*,s> october:s 23d:s)
and lexical entries: [oct. :- NP : october:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Correct parses:
(intersect:<s*,s> october:s 23d:s) => ((this:<s,<r,s>> (intersect:<s*,s> october:s 23d:s) ref_time:r)) => (DATE,1989-10-23)
Correct. No update.
Sample processing time 0.0020
523 : ================== [0]
Sample type: TemporalSentence
Phrase:            about two years ago
Sentence:          Actually, about two years ago, the Journal listed the creation of the money fund as one of the 10 most significant events in the world of finance in the 20th century.
ref_time:          1989-11-01
Gold type:         DURATION
gold val:          P2Y
No correct parses. No update.
Sample processing time 0.0010
524 : ================== [0]
Sample type: TemporalSentence
Phrase:            the 20th century
Sentence:          Actually, about two years ago, the Journal listed the creation of the money fund as one of the 10 most significant events in the world of finance in the 20th century.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          19XX
Executing the phrase: the 20th century
with logic: 19:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 20th century :- NP : 19:r]
Executing the phrase: the 20th century
with logic: (previous:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 20th century :- NP : 19:r]
Executing the phrase: the 20th century
with logic: (this:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 20th century :- NP : 19:r]
Executing the phrase: the 20th century
with logic: (next:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 20th century :- NP : 19:r]
Executing the phrase: the 20th century
with logic: 19:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 20th century :- NP : 19:r]
Bad violating parse: (19:r, ((this:<s,<r,s>> 19:r ref_time:r)) => (DATE,19))
No correct parses. No update.
Sample processing time 0.0040
525 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          posted a 20% gain in third-quarter net income.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
526 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          The consumer-products and newsprint company said net rose to $108.8 million, or $1.35 a share, from $90.5 million, or $1.12 a share, a year ago.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0040
527 : ================== [0]
Sample type: TemporalSentence
Phrase:            a flat second quarter
Sentence:          After a flat second quarter tied largely to lower newsprint earnings, Kimberly-Clark attributed the gain to improved results in its consumer businesses in North America, Brazil and Korea.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q2
Executing the phrase: a flat second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [a :- NP/NP : (lambda $0:s $0), flat :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: a flat second quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:s $0), flat :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: a flat second quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:s $0), flat :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: a flat second quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:s $0), flat :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: a flat second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [a :- NP/NP : (lambda $0:s $0), flat :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 2o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)) => (DATE,1989-Q2)
Correct. No update.
Sample processing time 0.0020
528 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year earlier period
Sentence:          The quarter-to-quarter comparison was also enhanced by charges taken in the year-earlier period, including $11 million related to the modernization of a pulp and newsprint mill in Alabama.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0010
529 : ================== [0]
Sample type: TemporalSentence
Phrase:            the 1989 period
Sentence:          In the 1989 period also, interest expense and tax rates were lower than a year ago.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
No correct parses. No update.
Sample processing time 0.0010
530 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          In the 1989 period also, interest expense and tax rates were lower than a year ago.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0030
531 : ================== [0]
Sample type: TemporalSentence
Phrase:            the first nine months
Sentence:          In the first nine months, profit rose 10% to $313.2 million, or $3.89 a share, from $283.9 million, or $3.53 a share.
ref_time:          1989-11-01
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0030
532 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          Ocean Drilling amp Exploration Co. will sell its contract-drilling business, and took a $50.9 million loss from discontinued operations in the third quarter because of the planned sale.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
533 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          In the third quarter, the company, which is 61%-owned by Murphy Oil Corp. of Arkansas, had a net loss of $46.9 million, or 91 cents a share, compared with a restated loss of $9 million, or 18 cents a share, a year ago.
ref_time:          1989-11-01
Gold type:         DURATION
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Bad violating parse: ((nth:<d,<n,s>> quarter:d 3o:n), ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3))
No correct parses. No update.
Sample processing time 0.0030
534 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          In the third quarter, the company, which is 61%-owned by Murphy Oil Corp. of Arkansas, had a net loss of $46.9 million, or 91 cents a share, compared with a restated loss of $9 million, or 18 cents a share, a year ago.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0050
535 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest period
Sentence:          The latest period had profit from continuing operations of $4 million.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Correct parses:
(previous:<d,<r,s>> quarter:d ref_time:r) => ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
536 : ================== [0]
Sample type: TemporalSentence
Phrase:            the near future
Sentence:          Ocean Drilling said it will offer 15% to 20% of the contract-drilling business through an initial public offering in the near future.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: the near future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near future :- NP : future_ref:r]
Executing the phrase: the near future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near future :- NP : future_ref:r]
Executing the phrase: the near future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near future :- NP : future_ref:r]
Executing the phrase: the near future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near future :- NP : future_ref:r]
Executing the phrase: the near future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near future :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0030
537 : ================== [0]
Sample type: TemporalSentence
Phrase:            early next year
Sentence:          Salt Lake City-based First Security, with $5.4 billion in assets, said the agreement is subject to shareholder and regulatory approval, and that it hopes to complete the transaction early next year.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1990
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0050
538 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          StatesWest Airlines, Phoenix, Ariz., said it withdrew its offer to acquire Mesa Airlines because the Farmington, N.M., carrier didn't respond to its offer by the close of business yesterday, a deadline StatesWest had set for a response.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-10-31
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-31)
Correct. No update.
Sample processing time 0.0030
539 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          The acquisition brings together the two largest competitors to Home Shopping Network Inc., which now reaches more viewers than any other company in the video shopping industry.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
540 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Among them, Home Shopping, QVC and CVN already control most of that young and fast-growing market, which last year had sales of about $1.4 billion.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0020
541 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          reported a third-quarter loss, citing a previously announced capital restructuring program.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
542 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          The Los Angeles thrift holding company said it had a loss of $92.2 million, or $6.98 a share, for the quarter ended Sept. 30.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0030
543 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          The Los Angeles thrift holding company said it had a loss of $92.2 million, or $6.98 a share, for the quarter ended Sept. 30.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-09-30
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> september:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30)
Correct. No update.
Sample processing time 0.0030
544 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year ago quarter
Sentence:          Coast earned $10.2 million, or 67 cents a share, in the year-ago quarter.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0030
545 : ================== [0]
Sample type: TemporalSentence
Phrase:            year ago
Sentence:          The year-ago results have been restated to comply with government regulations.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)) => (DATE,1988))
No correct parses. No update.
Sample processing time 0.0020
546 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          During the third quarter, the company charged about $46 million against earnings in reducing goodwill, added $20 million to its general loan loss reserves and established a $30 million reserve for its high-yield bond portfolio.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
547 : ================== [0]
Sample type: TemporalSentence
Phrase:            three years
Sentence:          The remaining $40 million can be used over three years for oil and gas acquisitions, the company said.
ref_time:          1989-11-01
Gold type:         DURATION
gold val:          P3Y
Executing the phrase: three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 3:n) => ((*:<d,<n,d>> years:d 3:n)) => (DURATION,P3Y)
Correct. No update.
Sample processing time 0.0020
548 : ================== [0]
Sample type: TemporalSentence
Phrase:            each month
Sentence:          Ted Eubank, Coda's president, said the loan carries an interest rate of prime plus one percentage point, with 85% of the company's net oil and gas revenue each month dedicated to repayment.
ref_time:          1989-11-01
Gold type:         SET
gold val:          P1M
Executing the phrase: each month
with logic: month:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: each month
with logic: month:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: each month
with logic: month:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: each month
with logic: month:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: each month
with logic: (temporal_ref:<d,s> month:d)
and lexical entries: [each :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
No correct parses. No update.
Sample processing time 0.0030
549 : ================== [0]
Sample type: TemporalSentence
Phrase:            last wednesday
Sentence:          Orkem and Coates said last Wednesday that the two were considering a merger, through Orkem's British subsidiary, Orkem Coatings U.K. Ltd.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: last wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), wednesday :- NP : wednesday:s]
Executing the phrase: last wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), wednesday :- NP : wednesday:s]
Executing the phrase: last wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), wednesday :- NP : wednesday:s]
Executing the phrase: last wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), wednesday :- NP : wednesday:s]
Executing the phrase: last wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), wednesday :- NP : wednesday:s]
Correct parses:
(previous:<s,<r,s>> wednesday:s ref_time:r) => ((previous:<s,<r,s>> wednesday:s ref_time:r)) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0020
550 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier yesterday
Sentence:          Earlier yesterday, the Societe de Bourses Francaises was told that a unit of Framatome S.A. also bought Navigation Mixte shares, this purchase covering more than 160,000 shares.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-10-31
Executing the phrase: earlier yesterday
with logic: yesterday:r
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: earlier yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: earlier yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: earlier yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: earlier yesterday
with logic: yesterday:r
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-31)
Correct. No update.
Sample processing time 0.0020
551 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          Both companies are allies of Navigation Mixte in its fight against a hostile takeover bid launched last week by Cie. Financiere de Paribas at 1,850 French francs ($297) a share.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
No correct parses. No update.
Sample processing time 0.0020
552 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          Navigation Mixte's chairman had suggested that friendly institutions were likely to buy its stock as soon as trading opened Monday.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-11-06
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Correct parses:
monday:s => ((next:<s,<r,s>> monday:s ref_time:r)) => (DATE,1989-11-06)
Bad violating parse: (monday:s, ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1989-10-30))
Update: {TEMPORAL_CONTEXT__next_VBD=1.0, TEMPORAL_CONTEXT__previous_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0, TEMPORAL_WEEKDAY_notSameDay_next=1.0, TEMPORAL_WEEKDAY_notSameDay_previous=-1.0}
Sample processing time 0.0040
553 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          said it hired an investment banking firm to assist in evaluating restructuring or merger alternatives and reported a net loss of $8.1 million, or $2.14 a share, for the third quarter ended Sept. 30.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Bad violating parse: ((nth:<d,<n,s>> quarter:d 3o:n), ((next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1990-Q3))
Update: {TEMPORAL_CONTEXT__next_VBD=-1.0, TEMPORAL_CONTEXT__this_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0050
554 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          said it hired an investment banking firm to assist in evaluating restructuring or merger alternatives and reported a net loss of $8.1 million, or $2.14 a share, for the third quarter ended Sept. 30.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-09-30
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> september:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30)
Correct. No update.
Sample processing time 0.0040
555 : ================== [0]
Sample type: TemporalSentence
Phrase:            the corresponding period last year
Sentence:          These results compare with net income of $1.8 million, or 44 cents a share, for the corresponding period last year.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0010
556 : ================== [0]
Sample type: TemporalSentence
Phrase:            this quarter
Sentence:          This quarter's loss includes pretax charges of $4.9 million on the proposed discontinuation of the company's troubled British subsidiary, and $3.7 million of other write-offs the company said were non-recurring and principally related to inventory, publishing advances and pre-publication costs.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: this quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: this quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: this quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: this quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: this quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Bad violating parse: ((this:<d,<r,s>> quarter:d ref_time:r), ((this:<d,<r,s>> quarter:d ref_time:r)) => (DATE,XXXX-QX))
Bad violating parse: ((this:<d,<r,s>> quarter:d ref_time:r), ((this:<d,<r,s>> quarter:d ref_time:r)) => (DATE,XXXX-QX))
Bad violating parse: ((this:<d,<r,s>> quarter:d ref_time:r), ((this:<d,<r,s>> quarter:d ref_time:r)) => (DATE,XXXX-QX))
Bad violating parse: ((this:<d,<r,s>> quarter:d ref_time:r), ((this:<d,<r,s>> quarter:d ref_time:r)) => (DATE,XXXX-QX))
Bad violating parse: ((this:<d,<r,s>> quarter:d ref_time:r), ((this:<d,<r,s>> quarter:d ref_time:r)) => (DATE,XXXX-QX))
No correct parses. No update.
Sample processing time 0.0020
557 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year's third quarter
Sentence:          Net sales for this year's third quarter were $14 million, down from $21.4 million last year.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
No correct parses. No update.
Sample processing time 0.0010
558 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Net sales for this year's third quarter were $14 million, down from $21.4 million last year.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0020
559 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year's quarter
Sentence:          U.K. sales for last year's quarter were about $3 million.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0000
560 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year
Sentence:          Cilcorp said the businesses to be acquired had revenue of $76 million for the year ended March 31.
ref_time:          1989-11-01
Gold type:         DURATION
gold val:          P1Y
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Correct parses:
year:d => (year:d) => (DURATION,P1Y)
Correct. No update.
Sample processing time 0.0020
561 : ================== [0]
Sample type: TemporalSentence
Phrase:            march 31
Sentence:          Cilcorp said the businesses to be acquired had revenue of $76 million for the year ended March 31.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-03-31
Executing the phrase: march 31
with logic: (intersect:<s*,s> march:s 31d:s)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (intersect:<s*,s> march:s 31d:s)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Correct parses:
(intersect:<s*,s> march:s 31d:s) => ((this:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)) => (DATE,1989-03-31)
Correct. No update.
Sample processing time 0.0030
562 : ================== [0]
Sample type: TemporalSentence
Phrase:            currently
Sentence:          The company, which currently has 13.5 million common shares outstanding, said it has no specific plans for the shares.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
563 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          said net income jumped to $6.6 million, or 18 cents a share, in the third quarter.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
564 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          The Fairfield, N.J., company, which is 92%-owned by Ogden Corp., New York, had net of $1.1 million, or four cents a share, a year ago.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0040
565 : ================== [0]
Sample type: TemporalSentence
Phrase:            august
Sentence:          Ogden Projects, whose shares began trading on the New York Stock Exchange in August, closed yesterday at $26.875, down 75 cents.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-08
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (this:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (next:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Correct parses:
august:s => ((this:<s,<r,s>> august:s ref_time:r)) => (DATE,1989-08)
Correct. No update.
Sample processing time 0.0020
566 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Ogden Projects, whose shares began trading on the New York Stock Exchange in August, closed yesterday at $26.875, down 75 cents.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-10-31
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-31)
Correct. No update.
Sample processing time 0.0020
567 : ================== [0]
Sample type: TemporalSentence
Phrase:            this summer
Sentence:          The stock began trading this summer at $14 apiece.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-SU
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Correct parses:
(this:<s,<r,s>> summer:s ref_time:r) => ((this:<s,<r,s>> summer:s ref_time:r)) => (DATE,1989-SU)
Correct. No update.
Sample processing time 0.0020
568 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          Ogden Projects, which has interests in solid-waste recovery and hazardous-waste cleanup, said it has 13 facilities in operation, up from seven a year ago.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-11
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-SU))
No correct parses. No update.
Sample processing time 0.0040
569 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Meanwhile, Ogden Corp., which also has interests in building maintenance and management, reported third-quarter net income of $27.1 million, or 67 cents a share, more than twice the $13.5 million, or 34 cents a share, a year earlier.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
570 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year
Sentence:          Meanwhile, Ogden Corp., which also has interests in building maintenance and management, reported third-quarter net income of $27.1 million, or 67 cents a share, more than twice the $13.5 million, or 34 cents a share, a year earlier.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Correct parses:
year:d => ((temporal_ref:<d,s> year:d)) => (DATE,1988-Q3)
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Update: {TEMPORAL_CONTEXT_temporal_ref_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_reftemporal_refnotTempRef=1.0, TEMPORAL_TYPE_d=-1.0, TEMPORAL_TYPE_s=1.0}
Sample processing time 0.0090
571 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier this month
Sentence:          Earlier this month, a group led by three of the company's directors, Burt Sugarman, James M. Trotter III and Willam E. Trotter II, indicated it had a 45.2% stake in the Louisville, Ky., fast-food company and that it planned to seek a majority of seats on Rally's nine-member board.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-11
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-11)
Correct. No update.
Sample processing time 0.0020
572 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year's first quarter
Sentence:          The establishment of the separate company, to be called Courtaulds Textiles, could be effective as early as next year's first quarter.
ref_time:          1989-10-31
Gold type:         DATE
gold val:          1990-Q1
No correct parses. No update.
Sample processing time 0.0010
573 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year
Sentence:          The divested Courtaulds textile operations had operating profit of #50 million on #980 million in revenue in the year ended March 31.
ref_time:          1989-10-31
Gold type:         DURATION
gold val:          P1Y
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Correct parses:
year:d => (year:d) => (DURATION,P1Y)
Correct. No update.
Sample processing time 0.0030
574 : ================== [0]
Sample type: TemporalSentence
Phrase:            march 31
Sentence:          The divested Courtaulds textile operations had operating profit of #50 million on #980 million in revenue in the year ended March 31.
ref_time:          1989-10-31
Gold type:         DATE
gold val:          1989-03-31
Executing the phrase: march 31
with logic: (intersect:<s*,s> march:s 31d:s)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (intersect:<s*,s> march:s 31d:s)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Correct parses:
(intersect:<s*,s> march:s 31d:s) => ((this:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)) => (DATE,1989-03-31)
Correct. No update.
Sample processing time 0.0030
575 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Courtaulds has been under pressure to enhance shareholder value since takeover speculators -- including Australian financier Kerry Packer -- surfaced holding small stakes last year.
ref_time:          1989-10-31
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
576 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier this year
Sentence:          Earlier this year, Dataproducts had rejected a $15 a share offer from DPC, saying it wasn't adequately financed.
ref_time:          1989-10-31
Gold type:         DATE
gold val:          1989
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
577 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          DPC last week launched a new, $10-a-share offer for the Woodland Hills, Calif.-based computer printer maker.
ref_time:          1989-10-31
Gold type:         DATE
gold val:          1989-W43
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(previous:<d,<r,s>> week:d ref_time:r) => ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43)
Correct. No update.
Sample processing time 0.0010
578 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Weisfield's shares soared on the announcement yesterday, closing up $11 to close at $50 in national over-the-counter trading.
ref_time:          1989-10-31
Gold type:         DATE
gold val:          1989-10-30
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-30)
Correct. No update.
Sample processing time 0.0020
579 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 15
Sentence:          They said they expect the transaction to be completed by Dec. 15.
ref_time:          1989-10-31
Gold type:         DATE
gold val:          1989-12-15
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Correct parses:
(intersect:<s*,s> december:s 15d:s) => ((next:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)) => (DATE,1989-12-15)
Correct. No update.
Sample processing time 0.0020
580 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fiscal year
Sentence:          In the fiscal year ended Jan. 31, the company reported sales of $59.5 million and pretax profit of $2.9 million.
ref_time:          1989-10-31
Gold type:         DURATION
gold val:          P1Y
No correct parses. No update.
Sample processing time 0.0010
581 : ================== [0]
Sample type: TemporalSentence
Phrase:            jan. 31
Sentence:          In the fiscal year ended Jan. 31, the company reported sales of $59.5 million and pretax profit of $2.9 million.
ref_time:          1989-10-31
Gold type:         DATE
gold val:          1989-01-31
Executing the phrase: jan. 31
with logic: (intersect:<s*,s> january:s 31d:s)
and lexical entries: [jan. :- NP : january:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: jan. 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> january:s 31d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: jan. 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> january:s 31d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: jan. 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> january:s 31d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: jan. 31
with logic: (intersect:<s*,s> january:s 31d:s)
and lexical entries: [jan. :- NP : january:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Correct parses:
(intersect:<s*,s> january:s 31d:s) => ((this:<s,<r,s>> (intersect:<s*,s> january:s 31d:s) ref_time:r)) => (DATE,1989-01-31)
Correct. No update.
Sample processing time 0.0010
582 : ================== [0]
Sample type: TemporalSentence
Phrase:            1992
Sentence:          It has said it hopes to control 5% of jewelry business in the U.S. by 1992; currently it controls about 2%.
ref_time:          1989-10-31
Gold type:         DATE
gold val:          1992
Executing the phrase: 1992
with logic: 1992:r
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (previous:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (this:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (next:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: 1992:r
and lexical entries: [1992 :- NP : 1992:r]
Correct parses:
1992:r => (1992:r) => (DATE,1992)
Correct. No update.
Sample processing time 0.0020
583 : ================== [0]
Sample type: TemporalSentence
Phrase:            currently
Sentence:          It has said it hopes to control 5% of jewelry business in the U.S. by 1992; currently it controls about 2%.
ref_time:          1989-10-31
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
584 : ================== [0]
Sample type: TemporalSentence
Phrase:            six months
Sentence:          Nashua Corp., rumored a potential takeover target for six months, said that a Dutch company has sought U.S. approval to buy up to 25% of Nashua's shares.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P6M
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 6:n) => ((*:<d,<n,d>> months:d 6:n)) => (DURATION,P6M)
Correct. No update.
Sample processing time 0.0020
585 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year
Sentence:          Nashua's stock has fluctuated sharply on takeover speculation, rising to a high for the year of $42.875 a share in June from $29.75 in March.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Bad violating parse: (year:d, ((temporal_ref:<d,s> year:d)) => (DATE,0))
No correct parses. No update.
Sample processing time 0.0030
586 : ================== [0]
Sample type: TemporalSentence
Phrase:            june
Sentence:          Nashua's stock has fluctuated sharply on takeover speculation, rising to a high for the year of $42.875 a share in June from $29.75 in March.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-06
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (this:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (next:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Correct parses:
june:s => ((this:<s,<r,s>> june:s ref_time:r)) => (DATE,1989-06)
Correct. No update.
Sample processing time 0.0020
587 : ================== [0]
Sample type: TemporalSentence
Phrase:            march
Sentence:          Nashua's stock has fluctuated sharply on takeover speculation, rising to a high for the year of $42.875 a share in June from $29.75 in March.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-03
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (previous:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (this:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (next:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Correct parses:
march:s => ((this:<s,<r,s>> march:s ref_time:r)) => (DATE,1989-03)
Correct. No update.
Sample processing time 0.0040
588 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          But the company has had weak results so far this year, with earnings declining 43% to $13.7 million, or $1.43 a share, on a 4% decline in revenue to $713.5 million through the first nine months of the year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-30
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Bad violating parse: ((this:<d,<r,s>> year:d ref_time:r), ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989))
Bad violating parse: ((this:<d,<r,s>> year:d ref_time:r), ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989))
Bad violating parse: ((this:<d,<r,s>> year:d ref_time:r), ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989))
Bad violating parse: ((this:<d,<r,s>> year:d ref_time:r), ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989))
Bad violating parse: ((this:<d,<r,s>> year:d ref_time:r), ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989))
No correct parses. No update.
Sample processing time 0.0020
589 : ================== [0]
Sample type: TemporalSentence
Phrase:            the first nine months
Sentence:          But the company has had weak results so far this year, with earnings declining 43% to $13.7 million, or $1.43 a share, on a 4% decline in revenue to $713.5 million through the first nine months of the year.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Bad violating parse: ((*:<d,<n,d>> months:d 9:n), ((temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))) => (DATE,0))
Update: {TEMPORAL_CONTEXT_temporal_ref_VBG=-1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=1.0, TEMPORAL_REFERENCE_temporal_reftemporal_refnotTempRef=-1.0, TEMPORAL_TYPE_d=1.0, TEMPORAL_TYPE_s=-1.0}
Sample processing time 0.0070
590 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year
Sentence:          But the company has had weak results so far this year, with earnings declining 43% to $13.7 million, or $1.43 a share, on a 4% decline in revenue to $713.5 million through the first nine months of the year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0050
591 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          Its stock has slumped recently, closing unchanged Friday at $29 a share in composite trading on the New York Stock Exchange; at that price, the company has a market value of about $278.4 million.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0010
592 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Its stock has slumped recently, closing unchanged Friday at $29 a share in composite trading on the New York Stock Exchange; at that price, the company has a market value of about $278.4 million.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Bad violating parse: (friday:s, ((next:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-11-03))
Update: {TEMPORAL_CONTEXT__next_VBG=-1.0, TEMPORAL_CONTEXT__previous_VBG=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_WEEKDAY_notSameDay_next=-1.0, TEMPORAL_WEEKDAY_notSameDay_previous=1.0}
Sample processing time 0.0030
593 : ================== [0]
Sample type: TemporalSentence
Phrase:            1987
Sentence:          Under a program approved by the company in 1987 that didn't specify a share amount, Nashua had purchased 481,000 shares through Sept. 29.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1987
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (previous:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (this:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (next:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Correct parses:
1987:r => (1987:r) => (DATE,1987)
Correct. No update.
Sample processing time 0.0010
594 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 29
Sentence:          Under a program approved by the company in 1987 that didn't specify a share amount, Nashua had purchased 481,000 shares through Sept. 29.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-09-29
Executing the phrase: sept. 29
with logic: (intersect:<s*,s> september:s 29d:s)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (intersect:<s*,s> september:s 29d:s)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Correct parses:
(intersect:<s*,s> september:s 29d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)) => (DATE,1989-09-29)
Correct. No update.
Sample processing time 0.0040
595 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Alex Henderson, an analyst at Prudential-Bache Securities, said that while Nashua's performance this year has been "atrocious," the company nonetheless is attractive as a "classic breakup candidate because there's no similarity between its {four} businesses."
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
596 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 7
Sentence:          Crossland Savings Bank's stock plummeted after management recommended a suspension of dividend payments on both its common and preferred stock because Crossland may not meet the new government capital criteria effective Dec. 7.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-12-07
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Correct parses:
(intersect:<s*,s> december:s 7d:s) => ((next:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)) => (DATE,1989-12-07)
Correct. No update.
Sample processing time 0.0040
597 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          In composite trading on the New York Stock Exchange Friday, Crossland closed at $5.25, down $1.875, a 26% decline.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Bad violating parse: (friday:s, ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-WXX-5))
Update: {TEMPORAL_CONTEXT__previous_VBD=1.0, TEMPORAL_CONTEXT__this_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0, TEMPORAL_WEEKDAY_notSameDay_previous=1.0, TEMPORAL_WEEKDAY_notSameDay_this=-1.0}
Sample processing time 0.0020
598 : ================== [0]
Sample type: TemporalSentence
Phrase:            1989
Sentence:          A spokesman said the savings bank may not qualify for the capital requirements because, under the proposed guidelines, its $380 million of preferred stock doesn't meet the "core capital" criteria outlined under the new Financial Institutions Reform, Recovery and Enforcement Act of 1989.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Correct parses:
1989:r => (1989:r) => (DATE,1989)
Correct. No update.
Sample processing time 0.0050
599 : ================== [0]
Sample type: TemporalSentence
Phrase:            early november
Sentence:          He added that final guidelines to be published in early November will determine whether the bank is in compliance.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-11
Executing the phrase: early november
with logic: november:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: early november
with logic: (previous:<s,<r,s>> november:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: early november
with logic: (this:<s,<r,s>> november:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: early november
with logic: (next:<s,<r,s>> november:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: early november
with logic: november:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Correct parses:
november:s => ((next:<s,<r,s>> november:s ref_time:r)) => (DATE,1989-11)
Correct. No update.
Sample processing time 0.0020
600 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Additionally, Crossland reported a third-quarter loss of $175.5 million, or $13.44 a share, compared with net income of $27.1 million, or $1.16 a share, a year ago.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
601 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          Additionally, Crossland reported a third-quarter loss of $175.5 million, or $13.44 a share, compared with net income of $27.1 million, or $1.16 a share, a year ago.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0040
602 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          A major factor in the third-quarter loss was the write-down of $143.6 million of goodwill.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
603 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          Crossland recorded an additional $20 million in loan loss reserves in the third quarter.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
604 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          Net interest income for the third quarter declined to $35.6 million from $70.1 million a year ago.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
605 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          Net interest income for the third quarter declined to $35.6 million from $70.1 million a year ago.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0030
606 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Third-quarter loan originations dropped sharply to $663 million from $1 billion a year ago.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0010
607 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          Third-quarter loan originations dropped sharply to $663 million from $1 billion a year ago.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0020
608 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Two rival bidders for Connaught BioSciences extended their offers to acquire the Toronto-based vaccine manufacturer Friday.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Bad violating parse: (friday:s, ((next:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-11-03))
Update: {TEMPORAL_CONTEXT__next_VB=-1.0, TEMPORAL_CONTEXT__previous_VB=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_WEEKDAY_notSameDay_next=-1.0, TEMPORAL_WEEKDAY_notSameDay_previous=1.0}
Sample processing time 0.0030
609 : ================== [0]
Sample type: TemporalSentence
Phrase:            last thursday
Sentence:          Institut Merieux S.A., which offered 942 million Canadian dollars (US$801.2 million), or C$37 a share for Connaught, said it would extend its bid, due to expire last Thursday, to Nov. 6.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: last thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), thursday :- NP : thursday:s]
Executing the phrase: last thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), thursday :- NP : thursday:s]
Executing the phrase: last thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), thursday :- NP : thursday:s]
Executing the phrase: last thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), thursday :- NP : thursday:s]
Executing the phrase: last thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), thursday :- NP : thursday:s]
Correct parses:
(previous:<s,<r,s>> thursday:s ref_time:r) => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0040
610 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 6
Sentence:          Institut Merieux S.A., which offered 942 million Canadian dollars (US$801.2 million), or C$37 a share for Connaught, said it would extend its bid, due to expire last Thursday, to Nov. 6.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-11-06
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Correct parses:
(intersect:<s*,s> november:s 6d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)) => (DATE,1989-11-06)
Bad violating parse: ((intersect:<s*,s> november:s 6d:s), ((intersect:<s*,s> november:s 6d:s)) => (DATE,XXXX-11-06))
Bad violating parse: ((intersect:<s*,s> november:s 6d:s), ((previous:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)) => (DATE,1988-11-06))
Bad violating parse: ((intersect:<s*,s> november:s 6d:s), ((intersect:<s*,s> november:s 6d:s)) => (DATE,XXXX-11-06))
Update: {TEMPORAL_CONTEXT__next_VB=1.0, TEMPORAL_CONTEXT__none_VB=-0.6666666666666666, TEMPORAL_CONTEXT__previous_VB=-0.3333333333333333, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=-0.6666666666666666, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-0.3333333333333333}
Sample processing time 0.0070
611 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 16
Sentence:          A C$30-a-share bid by Ciba-Geigy Ltd., a pharmaceutical company based in Basel, Switzerland, and California-based Chiron Corp., a bioresearch concern, was extended to Nov. 16.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-11-16
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Correct parses:
(intersect:<s*,s> november:s 16d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)) => (DATE,1989-11-16)
Bad violating parse: ((intersect:<s*,s> november:s 16d:s), ((previous:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)) => (DATE,1988-11-16))
Update: {TEMPORAL_CONTEXT__next_VBN=1.0, TEMPORAL_CONTEXT__previous_VBN=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0}
Sample processing time 0.0050
612 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday evening
Sentence:          It had been due to expire Friday evening.
ref_time:          1989-10-30
Gold type:         TIME
gold val:          1989-10-27TEV
No correct parses. No update.
Sample processing time 0.0010
613 : ================== [0]
Sample type: TemporalSentence
Phrase:            mid november
Sentence:          The Canadian government previously said Merieux's bid didn't offer enough "net benefit" to Canada to be approved, and gave Merieux an until mid-November to submit additional information.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-11
Executing the phrase: mid november
with logic: november:s
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (previous:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (this:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (next:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: november:s
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Correct parses:
november:s => ((next:<s,<r,s>> november:s ref_time:r)) => (DATE,1989-11)
Correct. No update.
Sample processing time 0.0030
614 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          Merieux officials said last week that they are "highly confident" the offer will be approved once it submits details of its proposed investments to federal regulators.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
No correct parses. No update.
Sample processing time 0.0020
615 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          Institut Merieux, which already holds a 12.5% stake in Connaught, said that at the close of business Thursday, 5,745,188 shares of Connaught and C$44.3 million face amount of debentures, convertible into 1,826,596 common shares, had been tendered to its offer.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0030
616 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          At the close of business Thursday, Ciba-Geigy and Chiron said 11,580 common shares had been tendered to their offer.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0020
617 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 7
Sentence:          said it is calling for the redemption on Dec. 7 of all the 800,000 remaining shares outstanding of its $1.875 Series A convertible preferred stock at $26.805 a share.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-12-07
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Correct parses:
(intersect:<s*,s> december:s 7d:s) => ((next:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)) => (DATE,1989-12-07)
Bad violating parse: ((intersect:<s*,s> december:s 7d:s), ((previous:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)) => (DATE,1988-12-07))
Update: {TEMPORAL_CONTEXT__next_VBG=1.0, TEMPORAL_CONTEXT__previous_VBG=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0}
Sample processing time 0.0020
618 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 30
Sentence:          The insurance concern said all conversion rights on the stock will terminate on Nov. 30.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-11-30
Executing the phrase: nov. 30
with logic: (intersect:<s*,s> november:s 30d:s)
and lexical entries: [nov. :- NP : november:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: nov. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 30d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: nov. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 30d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: nov. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 30d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: nov. 30
with logic: (intersect:<s*,s> november:s 30d:s)
and lexical entries: [nov. :- NP : november:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> november:s 30d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 30d:s) ref_time:r)) => (DATE,1989-11-30)
Correct. No update.
Sample processing time 0.0030
619 : ================== [0]
Sample type: TemporalSentence
Phrase:            then
Sentence:          Until then, Conseco said the stock remains convertible into common stock at the rate of 1.439 shares of common stock for each share of preferred stock, which is equivalent to a conversion price of $17.50 a common share.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-11-30
No correct parses. No update.
Sample processing time 0.0000
620 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          In New York Stock Exchange trading Friday, Conseco closed at $19.50, down 25 cents.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0010
621 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 16
Sentence:          plans to redeem on Nov. 16 its $150 million of 6.5% convertible subordinated debentures due March 1, 2011.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-11-16
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Correct parses:
(intersect:<s*,s> november:s 16d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)) => (DATE,1989-11-16)
Correct. No update.
Sample processing time 0.0020
622 : ================== [0]
Sample type: TemporalSentence
Phrase:            march 1 2011
Sentence:          plans to redeem on Nov. 16 its $150 million of 6.5% convertible subordinated debentures due March 1, 2011.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          2011-03-01
Executing the phrase: march 1 2011
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r)
and lexical entries: [march :- NP : march:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2011 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2011:r))]
Executing the phrase: march 1 2011
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2011 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2011:r))]
Executing the phrase: march 1 2011
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2011 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2011:r))]
Executing the phrase: march 1 2011
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2011 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2011:r))]
Executing the phrase: march 1 2011
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r)
and lexical entries: [march :- NP : march:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2011 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2011:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r) => ((intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r)) => (DATE,2011-03-01)
Correct. No update.
Sample processing time 0.0030
623 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          In New York Stock Exchange composite trading Friday, Automatic Data closed at $46.50 a share, down $2.25.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
624 : ================== [0]
Sample type: TemporalSentence
Phrase:            last monday
Sentence:          If all the debt is converted to common, Automatic Data will issue about 3.6 million shares; last Monday, the company had nearly 73 million shares outstanding.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-23
Executing the phrase: last monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), monday :- NP : monday:s]
Executing the phrase: last monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), monday :- NP : monday:s]
Executing the phrase: last monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), monday :- NP : monday:s]
Executing the phrase: last monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), monday :- NP : monday:s]
Executing the phrase: last monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), monday :- NP : monday:s]
Correct parses:
(previous:<s,<r,s>> monday:s ref_time:r) => ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1989-10-23)
Correct. No update.
Sample processing time 0.0030
625 : ================== [0]
Sample type: TemporalSentence
Phrase:            5 p.m. est nov. 6
Sentence:          extended its tender offer of $18 a share, or about $576 million, for the 33% of Telerate Inc. that it doesn't already own until 5 p.m. EST, Nov. 6.
ref_time:          1989-10-30
Gold type:         TIME
gold val:          1989-11-06T17
No correct parses. No update.
Sample processing time 0.0010
626 : ================== [0]
Sample type: TemporalSentence
Phrase:            midnight friday
Sentence:          The offer, which Telerate's two independent directors have rejected as inadequate, previously had been scheduled to expire at midnight Friday.
ref_time:          1989-10-30
Gold type:         TIME
gold val:          1989-10-27T24
No correct parses. No update.
Sample processing time 0.0000
627 : ================== [0]
Sample type: TemporalSentence
Phrase:            last friday
Sentence:          Dow Jones said it extended the offer to allow shareholders time to review a supplement to the Dow Jones tender offer circular that it mailed last Friday.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Correct parses:
(previous:<s,<r,s>> friday:s ref_time:r) => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0030
628 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 26
Sentence:          The supplement contains various information that has been filed with the Securities and Exchange Commission since Dow Jones launched the offer on Sept. 26, but it doesn't change the terms and conditions of the offer except to extend its expiration date.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-09-26
Executing the phrase: sept. 26
with logic: (intersect:<s*,s> september:s 26d:s)
and lexical entries: [sept. :- NP : september:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: sept. 26
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 26d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: sept. 26
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 26d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: sept. 26
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 26d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: sept. 26
with logic: (intersect:<s*,s> september:s 26d:s)
and lexical entries: [sept. :- NP : september:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Correct parses:
(intersect:<s*,s> september:s 26d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 26d:s) ref_time:r)) => (DATE,1989-09-26)
Correct. No update.
Sample processing time 0.0030
629 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Telerate shares fell 50 cents on Friday to close at $20 each in New York Stock Exchange composite trading.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
630 : ================== [0]
Sample type: TemporalSentence
Phrase:            late last week
Sentence:          Late last week, representatives of Dow Jones and Telerate began negotiations about the terms of the offer, but those talks didn't result in any changes in the offer.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: late last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: late last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: late last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: late last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: late last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
No correct parses. No update.
Sample processing time 0.0020
631 : ================== [0]
Sample type: TemporalSentence
Phrase:            june
Sentence:          Society Corp., which is also a bank, agreed in June to buy Trustcorp for 12.4 million shares of stock with a market value of about $450 million.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-06
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (this:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (next:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Correct parses:
june:s => ((this:<s,<r,s>> june:s ref_time:r)) => (DATE,1989-06)
Correct. No update.
Sample processing time 0.0020
632 : ================== [0]
Sample type: TemporalSentence
Phrase:            around year end
Sentence:          The transaction is expected to close around year end.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-12
Executing the phrase: around year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [around :- NP/NP : (lambda $0:s $0), year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: around year end
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: around year end
with logic: (this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: around year end
with logic: (next:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: around year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [around :- NP/NP : (lambda $0:s $0), year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Bad violating parse: ((intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)), ((next:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)) => (DATE,1989-12-31))
No correct parses. No update.
Sample processing time 0.0020
633 : ================== [0]
Sample type: TemporalSentence
Phrase:            march 15 2007
Sentence:          said holders of $6,542,000 face amount of its 6 1/4% convertible subordinated debentures, due March 15, 2007, have elected to convert the debt into about 683,000 common shares.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          2007-03-15
Executing the phrase: march 15 2007
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r)
and lexical entries: [march :- NP : march:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 2007 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2007:r))]
Executing the phrase: march 15 2007
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 2007 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2007:r))]
Executing the phrase: march 15 2007
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 2007 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2007:r))]
Executing the phrase: march 15 2007
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 2007 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2007:r))]
Executing the phrase: march 15 2007
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r)
and lexical entries: [march :- NP : march:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 2007 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2007:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r) => ((intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r)) => (DATE,2007-03-15)
Correct. No update.
Sample processing time 0.0030
634 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          The candy businesses had sales of about $154 million last year, which was roughly 12% of total revenue for RJR's Planters LifeSavers unit, according to a memorandum distributed by RJR's owner, Kohlberg Kravis Roberts amp Co., to bankers last December.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
635 : ================== [0]
Sample type: TemporalSentence
Phrase:            last december
Sentence:          The candy businesses had sales of about $154 million last year, which was roughly 12% of total revenue for RJR's Planters LifeSavers unit, according to a memorandum distributed by RJR's owner, Kohlberg Kravis Roberts amp Co., to bankers last December.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-12
Executing the phrase: last december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), december :- NP : december:s]
Executing the phrase: last december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), december :- NP : december:s]
Executing the phrase: last december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), december :- NP : december:s]
Executing the phrase: last december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), december :- NP : december:s]
Executing the phrase: last december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), december :- NP : december:s]
Correct parses:
(previous:<s,<r,s>> december:s ref_time:r) => ((previous:<s,<r,s>> december:s ref_time:r)) => (DATE,1988-12)
Correct. No update.
Sample processing time 0.0050
636 : ================== [0]
Sample type: TemporalSentence
Phrase:            february
Sentence:          The sale, which had been expected, is part of KKR's program to pay down $5 billion of a $6 billion bridge loan by February.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990-02
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (this:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (next:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Correct parses:
february:s => ((next:<s,<r,s>> february:s ref_time:r)) => (DATE,1990-02)
Correct. No update.
Sample processing time 0.0030
637 : ================== [0]
Sample type: TemporalSentence
Phrase:            february
Sentence:          Since KKR bought RJR in February for $25 billion of debt, it has agreed to sell nearly $5 billion of RJR assets.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-02
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (this:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (next:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Correct parses:
february:s => ((this:<s,<r,s>> february:s ref_time:r)) => (DATE,1989-02)
Correct. No update.
Sample processing time 0.0020
638 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          "RJR Nabisco and Planters LifeSavers will concentrate more on our own core businesses," Mr. Gerstner said Friday.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
639 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Nestle's share of 7% before Friday's purchases is far below the shares of market leaders Hershey Foods Corp. and Mars Inc., which have about 40% and 36% of the market, respectively.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Bad violating parse: (friday:s, ((next:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-11-03))
Update: {TEMPORAL_CONTEXT__next_VBZ=-1.0, TEMPORAL_CONTEXT__previous_VBZ=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_WEEKDAY_notSameDay_next=-1.0, TEMPORAL_WEEKDAY_notSameDay_previous=1.0}
Sample processing time 0.0030
640 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Aetna Life amp Casualty Co.'s third-quarter net income fell 22% to $182.6 million, or $1.63 a share, reflecting the damages from Hurricane Hugo and lower results for some of the company's major divisions.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
641 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Last year catastrophe losses totaled $5 million, when net was $235.5 million, or $2.07 a share.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0010
642 : ================== [0]
Sample type: TemporalSentence
Phrase:            year earlier
Sentence:          The year-earlier results have been restated to reflect an accounting change.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1987))
No correct parses. No update.
Sample processing time 0.0020
643 : ================== [0]
Sample type: TemporalSentence
Phrase:            nearly two weeks ago
Sentence:          The insurer has started processing claims from the Northern California earthquake nearly two weeks ago.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: nearly two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)) => (DATE,1989-W42))
No correct parses. No update.
Sample processing time 0.0030
644 : ================== [0]
Sample type: TemporalSentence
Phrase:            fourth quarter
Sentence:          But because these claims are more difficult to evaluate and have been coming in more slowly, the company has no estimate of the impact of the earthquake on fourth-quarter results.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Bad violating parse: ((nth:<d,<n,s>> quarter:d 4o:n), ((previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1988-Q4))
Update: {TEMPORAL_CONTEXT__previous_VBZ=-1.0, TEMPORAL_CONTEXT__this_VBZ=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0050
645 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          In New York Stock Exchange composite trading Friday, Aetna closed at $60, down 50 cents.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
646 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest quarter
Sentence:          In the latest quarter, Aetna had a $23 million loss on its auto/homeowners line, compared with earnings of $33 million last year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Correct parses:
(previous:<d,<r,s>> quarter:d ref_time:r) => ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
647 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          In the latest quarter, Aetna had a $23 million loss on its auto/homeowners line, compared with earnings of $33 million last year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
No correct parses. No update.
Sample processing time 0.0030
648 : ================== [0]
Sample type: TemporalSentence
Phrase:            nearly three years
Sentence:          Profit for its commercial insurance division fell 30% to $59 million, reflecting higher catastrophe losses and the price war in the property/casualty market for nearly three years.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P3Y
Executing the phrase: nearly three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: nearly three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: nearly three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: nearly three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: nearly three years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 3:n))
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 3:n) => ((*:<d,<n,d>> years:d 3:n)) => (DURATION,P3Y)
Correct. No update.
Sample processing time 0.0040
649 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Third-quarter results included net realized capital gains of $48 million, which included $27 million from the sale of Federated Investors in August and a $15 million tax credit.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0010
650 : ================== [0]
Sample type: TemporalSentence
Phrase:            august
Sentence:          Third-quarter results included net realized capital gains of $48 million, which included $27 million from the sale of Federated Investors in August and a $15 million tax credit.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-08
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (this:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (next:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Correct parses:
august:s => ((this:<s,<r,s>> august:s ref_time:r)) => (DATE,1989-08)
Correct. No update.
Sample processing time 0.0030
651 : ================== [0]
Sample type: TemporalSentence
Phrase:            the nine months
Sentence:          In the nine months, net rose 4.3% to $525.8 million or $4.67 a share, from $504.2 million, or $4.41 a share, last year.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0020
652 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          In the nine months, net rose 4.3% to $525.8 million or $4.67 a share, from $504.2 million, or $4.41 a share, last year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0040
653 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Unisys Corp.'s announcement Friday of a $648.2 million loss for the third quarter showed that the company is moving even faster than expected to take write-offs on its various problems and prepare for a turnaround next year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
654 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          Unisys Corp.'s announcement Friday of a $648.2 million loss for the third quarter showed that the company is moving even faster than expected to take write-offs on its various problems and prepare for a turnaround next year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
655 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          Unisys Corp.'s announcement Friday of a $648.2 million loss for the third quarter showed that the company is moving even faster than expected to take write-offs on its various problems and prepare for a turnaround next year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0040
656 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          Unisys, whose revenue inched up 3.7% in the quarter to $2.35 billion from $2.27 billion in the year-earlier quarter, had an operating loss of about $30 million.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0020
657 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year earlier quarter
Sentence:          Unisys, whose revenue inched up 3.7% in the quarter to $2.35 billion from $2.27 billion in the year-earlier quarter, had an operating loss of about $30 million.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0010
658 : ================== [0]
Sample type: TemporalSentence
Phrase:            a month ago
Sentence:          That is at the high end of the range of 7,000 to 8,000 employees that Unisys said a month ago would be laid off.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-09
Executing the phrase: a month ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a month ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a month ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a month ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a month ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0030
659 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          Unisys also noted that it paid $78.8 million in taxes during the quarter, even though tax payments normally would be minimal in a quarter that produced such a big loss.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0020
660 : ================== [0]
Sample type: TemporalSentence
Phrase:            future quarters
Sentence:          The tax payments will leave Unisys with $225 million in loss carry-forwards that will cut tax payments in future quarters.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: future quarters
with logic: future_ref:r
and lexical entries: [future :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: future quarters
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: future quarters
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: future quarters
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: future quarters
with logic: future_ref:r
and lexical entries: [future :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0030
661 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          In addition, Unisys said it reduced computer inventories a further $100 million during the quarter, leaving it within $100 million of its goal of a reduction of $500 million by the end of the year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0020
662 : ================== [0]
Sample type: TemporalSentence
Phrase:            the end of the year
Sentence:          In addition, Unisys said it reduced computer inventories a further $100 million during the quarter, leaving it within $100 million of its goal of a reduction of $500 million by the end of the year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: the end of the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the end of the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the end of the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the end of the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the end of the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0050
663 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          Still, Unisys said its European business was weak during the quarter, a worrisome sign given that the company has relied on solid results overseas to overcome weakness in the U.S. over the past several quarters.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0030
664 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past several quarters
Sentence:          Still, Unisys said its European business was weak during the quarter, a worrisome sign given that the company has relied on solid results overseas to overcome weakness in the U.S. over the past several quarters.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: the past several quarters
with logic: quarters:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: the past several quarters
with logic: quarters:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: the past several quarters
with logic: quarters:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: the past several quarters
with logic: quarters:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: the past several quarters
with logic: (temporal_ref:<d,s> quarters:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Bad violating parse: (quarters:d, (quarters:d) => (DURATION,PXQ))
Bad violating parse: (quarters:d, (quarters:d) => (DURATION,PXQ))
Bad violating parse: (quarters:d, (quarters:d) => (DURATION,PXQ))
Bad violating parse: (quarters:d, (quarters:d) => (DURATION,PXQ))
No correct parses. No update.
Sample processing time 0.0040
665 : ================== [0]
Sample type: TemporalSentence
Phrase:            every quarter
Sentence:          That means Unisys must pay about $100 million in interest every quarter, on top of $27 million in dividends on preferred stock.
ref_time:          1989-10-30
Gold type:         SET
gold val:          P1Q
Executing the phrase: every quarter
with logic: quarter:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: every quarter
with logic: quarter:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: every quarter
with logic: quarter:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: every quarter
with logic: quarter:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: every quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [every :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0020
666 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          He also said that the price wars flaring up in parts of the computer industry will continue through next year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
667 : ================== [0]
Sample type: TemporalSentence
Phrase:            the near term
Sentence:          But we don't minimize the challenges of the near term."
ref_time:          1989-10-30
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: the near term
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near term :- NP : future_ref:r]
Executing the phrase: the near term
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near term :- NP : future_ref:r]
Executing the phrase: the near term
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near term :- NP : future_ref:r]
Executing the phrase: the near term
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near term :- NP : future_ref:r]
Executing the phrase: the near term
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near term :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0020
668 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Securities analysts were even more cautious, having been burned repeatedly on Unisys this year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
669 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Some had predicted earnings of more than $4 a share for this year, up from last year's fully diluted $3.27 a share on earnings of $680.6 million.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
670 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Some had predicted earnings of more than $4 a share for this year, up from last year's fully diluted $3.27 a share on earnings of $680.6 million.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
671 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          But the company said Friday that it had losses of $673.3 million through the first nine months, compared with earnings a year earlier of $382.2 million, or $2.22 a share fully diluted, as revenue inched up 1.4% to $7.13 billion from $7.03 billion.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
672 : ================== [0]
Sample type: TemporalSentence
Phrase:            the first nine months
Sentence:          But the company said Friday that it had losses of $673.3 million through the first nine months, compared with earnings a year earlier of $382.2 million, or $2.22 a share fully diluted, as revenue inched up 1.4% to $7.13 billion from $7.03 billion.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0040
673 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year
Sentence:          But the company said Friday that it had losses of $673.3 million through the first nine months, compared with earnings a year earlier of $382.2 million, or $2.22 a share fully diluted, as revenue inched up 1.4% to $7.13 billion from $7.03 billion.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0040
674 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fourth quarter
Sentence:          And Unisys is expected to do little better than break even in the fourth quarter.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Correct. No update.
Sample processing time 0.0020
675 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          So Steve Milunovich at First Boston said he is cutting his earnings estimate for next year to $2 a share from $3.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0020
676 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          Mr. Weil of Weil amp Associates said he will remain at $1 a share for next year but said he wonders whether even that low target is at risk.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
677 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          "The break-even point for next year is much lower, but is it low enough?"
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0020
678 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Reflecting the concern, Unisys stock fell a further 75 cents to $16.25 in composite trading Friday on the New York Stock Exchange.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
679 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past
Sentence:          In the filing, Crane said that in the past it considered seeking control of Milton Roy, of St. Petersburg, Fla., through a merger or tender offer and that it expects to continue to evaluate an acquisition from time to time.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
680 : ================== [0]
Sample type: TemporalSentence
Phrase:            from time to time
Sentence:          In the filing, Crane said that in the past it considered seeking control of Milton Roy, of St. Petersburg, Fla., through a merger or tender offer and that it expects to continue to evaluate an acquisition from time to time.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: from time to time
with logic: future_ref:r
and lexical entries: [from time to time :- NP : future_ref:r]
Executing the phrase: from time to time
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [from time to time :- NP : future_ref:r]
Executing the phrase: from time to time
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [from time to time :- NP : future_ref:r]
Executing the phrase: from time to time
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [from time to time :- NP : future_ref:r]
Executing the phrase: from time to time
with logic: future_ref:r
and lexical entries: [from time to time :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0050
681 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 14
Sentence:          Crane holds 504,200 Milton Roy shares, including 254,200 bought from Sept. 14 to Thursday for $15.50 to $16.75 each.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-09-14
Executing the phrase: sept. 14
with logic: (intersect:<s*,s> september:s 14d:s)
and lexical entries: [sept. :- NP : september:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: sept. 14
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 14d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: sept. 14
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 14d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: sept. 14
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 14d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: sept. 14
with logic: (intersect:<s*,s> september:s 14d:s)
and lexical entries: [sept. :- NP : september:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Correct parses:
(intersect:<s*,s> september:s 14d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 14d:s) ref_time:r)) => (DATE,1989-09-14)
Correct. No update.
Sample processing time 0.0020
682 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          Crane holds 504,200 Milton Roy shares, including 254,200 bought from Sept. 14 to Thursday for $15.50 to $16.75 each.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0020
683 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          In New York Stock Exchange composite trading Friday, Milton Roy shares leaped $2, to $18.375 each, while Crane sank $1.125, to $21.125 a share.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
684 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          Milton Roy recently fended off unsolicited overtures from Thermo Electron Corp., a Waltham, Mass., maker of biomedical products.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
685 : ================== [0]
Sample type: TemporalSentence
Phrase:            may
Sentence:          Milton Roy disclosed in May that it was approached for a possible acquisition by Thermo Electron, which agreed to purchase Milton Roy's liquid-chromatography line for $22 million in February.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-05
Executing the phrase: may
with logic: may:s
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (this:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (next:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: may:s
and lexical entries: [may :- NP : may:s]
Correct parses:
may:s => ((this:<s,<r,s>> may:s ref_time:r)) => (DATE,1989-05)
Correct. No update.
Sample processing time 0.0010
686 : ================== [0]
Sample type: TemporalSentence
Phrase:            february
Sentence:          Milton Roy disclosed in May that it was approached for a possible acquisition by Thermo Electron, which agreed to purchase Milton Roy's liquid-chromatography line for $22 million in February.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990-02
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (this:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (next:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Correct parses:
february:s => ((next:<s,<r,s>> february:s ref_time:r)) => (DATE,1990-02)
Correct. No update.
Sample processing time 0.0040
687 : ================== [0]
Sample type: TemporalSentence
Phrase:            early september
Sentence:          Thermo Electron acquired some 6% of Milton Roy's common stock before throwing in the towel and reducing its stake in early September.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-09
Executing the phrase: early september
with logic: september:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: september:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Correct parses:
september:s => ((this:<s,<r,s>> september:s ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0030
688 : ================== [0]
Sample type: TemporalSentence
Phrase:            july
Sentence:          Gabelli Group began raising its Milton Roy stake in July, and holds 14.6%, according to a recent SEC filing.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-07
Executing the phrase: july
with logic: july:s
and lexical entries: [july :- NP : july:s]
Executing the phrase: july
with logic: (previous:<s,<r,s>> july:s ref_time:r)
and lexical entries: [july :- NP : july:s]
Executing the phrase: july
with logic: (this:<s,<r,s>> july:s ref_time:r)
and lexical entries: [july :- NP : july:s]
Executing the phrase: july
with logic: (next:<s,<r,s>> july:s ref_time:r)
and lexical entries: [july :- NP : july:s]
Executing the phrase: july
with logic: july:s
and lexical entries: [july :- NP : july:s]
Correct parses:
july:s => ((this:<s,<r,s>> july:s ref_time:r)) => (DATE,1989-07)
Correct. No update.
Sample processing time 0.0010
689 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent
Sentence:          Gabelli Group began raising its Milton Roy stake in July, and holds 14.6%, according to a recent SEC filing.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0030
690 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier this month
Sentence:          Earlier this month, Milton Roy signed a letter of intent to acquire Automated Custom Systems Inc., Orange, Calif., and its sister operation, Environmental Testing Co., in Aurora, Colo.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0020
691 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next four years
Sentence:          Under the terms, Milton Roy will pay an initial $4 million for the operations and additional payments during the next four years based on the earnings performance of the businesses.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P4Y
Executing the phrase: the next four years
with logic: (*:<d,<n,d>> years:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (*:<d,<n,d>> years:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (*:<d,<n,d>> years:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (*:<d,<n,d>> years:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 4:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Correct parses:
(next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r) => ((next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r)) => (DURATION,P4Y)
Correct. No update.
Sample processing time 0.0060
692 : ================== [0]
Sample type: TemporalSentence
Phrase:            the nine months
Sentence:          In the nine months, Milton Roy earned $6.6 million, or $1.18 a share, on sales of $94.3 million.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0020
693 : ================== [0]
Sample type: TemporalSentence
Phrase:            months ago
Sentence:          Control Data Corp., which just months ago was hemorrhaging financially, thinks it will be healthy enough soon to consider repurchasing public debt.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          PXM
Executing the phrase: months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)
and lexical entries: [months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)
and lexical entries: [months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)
and lexical entries: [months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)
and lexical entries: [months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)
and lexical entries: [months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)) => (DATE,1989-09))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)) => (DATE,1989-09))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)) => (DATE,1989-09))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)) => (DATE,1989-09))
Bad violating parse: ((previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r), ((previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)) => (DATE,1989-09))
No correct parses. No update.
Sample processing time 0.0020
694 : ================== [0]
Sample type: TemporalSentence
Phrase:            soon
Sentence:          Control Data Corp., which just months ago was hemorrhaging financially, thinks it will be healthy enough soon to consider repurchasing public debt.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0020
695 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Moreover, the company, whose go-it-alone approach nearly proved fatal, now sees alliances with others as the way back to prosperity in what it calls "the data solutions" business.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
696 : ================== [0]
Sample type: TemporalSentence
Phrase:            five year
Sentence:          "Transition" is a reference to the company's five-year restructuring effort.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P5Y
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 5:n) => ((*:<d,<n,d>> year:d 5:n)) => (DURATION,P5Y)
Correct. No update.
Sample processing time 0.0020
697 : ================== [0]
Sample type: TemporalSentence
Phrase:            that time
Sentence:          During that time, Control Data had losses of more than $1 billion.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P5Y
No correct parses. No update.
Sample processing time 0.0000
698 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Now, following asset sales that shrank revenue by more than one-third this year alone, Control Data is flush with cash.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
699 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          So its senior executives are talking openly about possibly buying back some of the company's $172.5 million in subordinated convertible debentures next year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
700 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent
Sentence:          The offer was automatically triggered by the recent sale of Control Data's Imprimis disk-drive business to Seagate Technology Inc.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0010
701 : ================== [0]
Sample type: TemporalSentence
Phrase:            1990
Sentence:          Mr. Perlman, who is also acting chief financial officer and the odds-on favorite to become the next chief executive, said the company is achieving "modest positive cash flow from operations, and we expect that to continue into 1990."
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0050
702 : ================== [0]
Sample type: TemporalSentence
Phrase:            a good part of 1990
Sentence:          He said the company has no intention of tapping its short-term bank lines "for a good part of 1990."
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: a good part of 1990
with logic: 1990:r
and lexical entries: [a good part of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: a good part of 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [a good part of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: a good part of 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [a good part of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: a good part of 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [a good part of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: a good part of 1990
with logic: 1990:r
and lexical entries: [a good part of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
703 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          Sometime next year, Control Data will " develop a new bank relationship," Mr. Perlman said.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0010
704 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent months
Sentence:          In recent months a group of lenders, led by Bank of America, has extended Control Data up to $90 million in revolving loans through January, as well as $115 million in standby letters of credit.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          PXM
Executing the phrase: recent months
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Bad violating parse: (past_ref:r, ((this:<s,<r,s>> past_ref:r ref_time:r)) => (DATE,PAST_REF))
No correct parses. No update.
Sample processing time 0.0020
705 : ================== [0]
Sample type: TemporalSentence
Phrase:            january
Sentence:          In recent months a group of lenders, led by Bank of America, has extended Control Data up to $90 million in revolving loans through January, as well as $115 million in standby letters of credit.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990-01
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Correct parses:
january:s => ((next:<s,<r,s>> january:s ref_time:r)) => (DATE,1990-01)
Bad violating parse: (january:s, ((this:<s,<r,s>> january:s ref_time:r)) => (DATE,1989-01))
Update: {TEMPORAL_CONTEXT__next_VBN=1.0, TEMPORAL_CONTEXT__this_VBN=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0040
706 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          Last week Control Data reported third-quarter earnings of $9.8 million, or 23 cents a share, on revenue of $763 million.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
No correct parses. No update.
Sample processing time 0.0020
707 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Last week Control Data reported third-quarter earnings of $9.8 million, or 23 cents a share, on revenue of $763 million.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
708 : ================== [0]
Sample type: TemporalSentence
Phrase:            the first nine months
Sentence:          Through the first nine months, the company had a loss of $484 million, largely reflecting the closing of its supercomputer unit.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0020
709 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          The company's strategy for keeping its computer products business profitable -- it recently achieved profitability after several quarters of losses -- calls for a narrow focus and a lid on expenses.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
710 : ================== [0]
Sample type: TemporalSentence
Phrase:            several quarters
Sentence:          The company's strategy for keeping its computer products business profitable -- it recently achieved profitability after several quarters of losses -- calls for a narrow focus and a lid on expenses.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          PXQ
Executing the phrase: several quarters
with logic: quarters:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: several quarters
with logic: quarters:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: several quarters
with logic: quarters:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: several quarters
with logic: quarters:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: several quarters
with logic: (temporal_ref:<d,s> quarters:d)
and lexical entries: [several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Correct parses:
quarters:d => (quarters:d) => (DURATION,PXQ)
Correct. No update.
Sample processing time 0.0020
711 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          Control Data recently announced an agreement with MIPS Computer Systems Inc. to jointly develop machines with simplified operating software.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0010
712 : ================== [0]
Sample type: TemporalSentence
Phrase:            the end of 1990
Sentence:          James E. Ousley, computer products group president, said such arrangements could help slash Control Data's computer research and development costs in half by the end of 1990.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: the end of 1990
with logic: 1990:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: 1990:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0040
713 : ================== [0]
Sample type: TemporalSentence
Phrase:            this past spring
Sentence:          He disclosed that before Control Data scrapped its ETA Systems Inc. supercomputer business this past spring, those costs were running at nearly 35% of group revenue.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-SP
Executing the phrase: this past spring
with logic: (this:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), past :- NP/NP : (lambda $0:s $0), spring :- NP : spring:s]
Executing the phrase: this past spring
with logic: (this:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), past :- NP/NP : (lambda $0:s $0), spring :- NP : spring:s]
Executing the phrase: this past spring
with logic: (this:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), past :- NP/NP : (lambda $0:s $0), spring :- NP : spring:s]
Executing the phrase: this past spring
with logic: (this:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), past :- NP/NP : (lambda $0:s $0), spring :- NP : spring:s]
Executing the phrase: this past spring
with logic: (this:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), past :- NP/NP : (lambda $0:s $0), spring :- NP : spring:s]
Correct parses:
(this:<s,<r,s>> spring:s ref_time:r) => ((this:<s,<r,s>> spring:s ref_time:r)) => (DATE,1989-SP)
Correct. No update.
Sample processing time 0.0020
714 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Polly Peck's chairman, Asil Nadir, echoed the official Japanese view of the accord, which was announced Friday.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0030
715 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year
Sentence:          It expects to post a loss of 6.4 billion yen for the year ending tomorrow and its liabilities currently exceed its assets by about 13.8 billion yen.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P1Y
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Correct parses:
year:d => (year:d) => (DURATION,P1Y)
Correct. No update.
Sample processing time 0.0020
716 : ================== [0]
Sample type: TemporalSentence
Phrase:            tomorrow
Sentence:          It expects to post a loss of 6.4 billion yen for the year ending tomorrow and its liabilities currently exceed its assets by about 13.8 billion yen.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-31
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (previous:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (this:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (next:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Correct parses:
tomorrow:r => (tomorrow:r) => (DATE,1989-10-31)
Correct. No update.
Sample processing time 0.0020
717 : ================== [0]
Sample type: TemporalSentence
Phrase:            currently
Sentence:          It expects to post a loss of 6.4 billion yen for the year ending tomorrow and its liabilities currently exceed its assets by about 13.8 billion yen.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
718 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          But by all accounts foreign companies have bought only a relative handful of Japanese companies this year, while Japanese companies have acquired hundreds of foreign companies.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
719 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent years
Sentence:          But in recent years, the market has moved toward less expensive "mini-component" sets, miniaturized amplifiers and receivers and software players that could be stacked on top of each other.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PXY
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Bad violating parse: (past_ref:r, ((next:<s,<r,s>> past_ref:r ref_time:r)) => (DATE,PAST_REF))
No correct parses. No update.
Sample processing time 0.0020
720 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent years
Sentence:          As the yen soared in recent years, Sansui's deepening financial problems became a vicious circle.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0010
721 : ================== [0]
Sample type: TemporalSentence
Phrase:            the future
Sentence:          Yoshihisa Murasawa, a management consultant for Booz-Allen amp Hamilton (Japan) Inc., said his firm will likely be recommending acquisitions of Japanese companies more often to foreign clients in the future.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0040
722 : ================== [0]
Sample type: TemporalSentence
Phrase:            1980
Sentence:          He took Polly Peck, once a small fabric wholesaler, and used it at as a base to build a conglomerate that has been doubling its profits annually since 1980.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1980
Executing the phrase: 1980
with logic: 1980:r
and lexical entries: [1980 :- NP : 1980:r]
Executing the phrase: 1980
with logic: (previous:<s,<r,s>> 1980:r ref_time:r)
and lexical entries: [1980 :- NP : 1980:r]
Executing the phrase: 1980
with logic: (this:<s,<r,s>> 1980:r ref_time:r)
and lexical entries: [1980 :- NP : 1980:r]
Executing the phrase: 1980
with logic: (next:<s,<r,s>> 1980:r ref_time:r)
and lexical entries: [1980 :- NP : 1980:r]
Executing the phrase: 1980
with logic: 1980:r
and lexical entries: [1980 :- NP : 1980:r]
Correct parses:
1980:r => (1980:r) => (DATE,1980)
Correct. No update.
Sample processing time 0.0030
723 : ================== [0]
Sample type: TemporalSentence
Phrase:            september
Sentence:          In September, it announced plans to acquire the tropical-fruit business of RJR Nabisco Inc.'s Del Monte foods unit for #557 million ($878 million).
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-09
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Correct parses:
september:s => ((this:<s,<r,s>> september:s ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0010
724 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          Last month, Polly Peck posted a 38% jump in pretax profit for the first half to #54.8 million from #39.8 million on a 63% rise in sales.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-09
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0010
725 : ================== [0]
Sample type: TemporalSentence
Phrase:            the short term
Sentence:          The debt, estimated at $4.7 billion, could mortgage the cellular company's future earning power in order to placate some LIN holders in the short term.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: the short term
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), short term :- NP : future_ref:r]
Executing the phrase: the short term
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), short term :- NP : future_ref:r]
Executing the phrase: the short term
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), short term :- NP : future_ref:r]
Executing the phrase: the short term
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), short term :- NP : future_ref:r]
Executing the phrase: the short term
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), short term :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0030
726 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          But under new terms of the agreement, announced Friday, LIN holders would receive a special cash dividend of $42 a share, representing a payout of about $2.23 billion, shortly before the proposed merger.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
727 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier this month
Sentence:          In effect, McCaw has forced LIN's hand by bidding $1.9 billion for the stake earlier this month.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0020
728 : ================== [0]
Sample type: TemporalSentence
Phrase:            1994 or later
Sentence:          Although he expressed confidence that the proposed new company's cash flow would be sufficient to cover interest payments on the debt, he estimated that the company wouldn't be profitable until 1994 or later.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1994
Executing the phrase: 1994 or later
with logic: 1994:r
and lexical entries: [1994 :- NP : 1994:r, or later :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1994 or later
with logic: (previous:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r, or later :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1994 or later
with logic: (this:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r, or later :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1994 or later
with logic: (next:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r, or later :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1994 or later
with logic: 1994:r
and lexical entries: [1994 :- NP : 1994:r, or later :- NP\NP : (lambda $0:r $0)]
Correct parses:
1994:r => (1994:r) => (DATE,1994)
Correct. No update.
Sample processing time 0.0040
729 : ================== [0]
Sample type: TemporalSentence
Phrase:            the weekend
Sentence:          Over the weekend, McCaw continued to call for an auction of LIN.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-W43-WE
No correct parses. No update.
Sample processing time 0.0010
730 : ================== [0]
Sample type: TemporalSentence
Phrase:            june 1994
Sentence:          Only McCaw's proposal requires the company to begin an auction process in June 1994 for remaining shares at third-party prices.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1994-06
Executing the phrase: june 1994
with logic: (intersect:<s*,s> 1994:r june:s)
and lexical entries: [june :- NP : june:s, 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r)), june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1994 :- NP : 1994:r]
Executing the phrase: june 1994
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1994:r june:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r)), june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1994 :- NP : 1994:r]
Executing the phrase: june 1994
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1994:r june:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r)), june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1994 :- NP : 1994:r]
Executing the phrase: june 1994
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1994:r june:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r)), june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1994 :- NP : 1994:r]
Executing the phrase: june 1994
with logic: (intersect:<s*,s> 1994:r june:s)
and lexical entries: [june :- NP : june:s, 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r)), june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1994 :- NP : 1994:r]
Correct parses:
(intersect:<s*,s> 1994:r june:s) => ((intersect:<s*,s> 1994:r june:s)) => (DATE,1994-06)
Correct. No update.
Sample processing time 0.0020
731 : ================== [0]
Sample type: TemporalSentence
Phrase:            five years
Sentence:          To mollify shareholders concerned about the long-term value of the company under the BellSouth-LIN agreement, BellSouth also agreed to pay as much as $10 a share, or $540 million, if, after five years, the trading value of the new cellular company isn't as high as the value that shareholders would have realized from the McCaw offer.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P5Y
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 5:n) => ((*:<d,<n,d>> years:d 5:n)) => (DURATION,P5Y)
Correct. No update.
Sample processing time 0.0050
732 : ================== [0]
Sample type: TemporalSentence
Phrase:            1990
Sentence:          William O. McCoy, president of the company's BellSouth Enterprises Inc. unit, said the revised agreement with LIN would dilute BellSouth earnings by about 9% in both 1990 and 1991 and by significantly less thereafter.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
733 : ================== [0]
Sample type: TemporalSentence
Phrase:            1991
Sentence:          William O. McCoy, president of the company's BellSouth Enterprises Inc. unit, said the revised agreement with LIN would dilute BellSouth earnings by about 9% in both 1990 and 1991 and by significantly less thereafter.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1991
Executing the phrase: 1991
with logic: 1991:r
and lexical entries: [1991 :- NP : 1991:r]
Executing the phrase: 1991
with logic: (previous:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [1991 :- NP : 1991:r]
Executing the phrase: 1991
with logic: (this:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [1991 :- NP : 1991:r]
Executing the phrase: 1991
with logic: (next:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [1991 :- NP : 1991:r]
Executing the phrase: 1991
with logic: 1991:r
and lexical entries: [1991 :- NP : 1991:r]
Correct parses:
1991:r => (1991:r) => (DATE,1991)
Correct. No update.
Sample processing time 0.0040
734 : ================== [0]
Sample type: TemporalSentence
Phrase:            1988
Sentence:          For 1988, BellSouth earned $1.7 billion, or $3.51 a share, on revenue of $13.6 billion.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Correct parses:
1988:r => (1988:r) => (DATE,1988)
Correct. No update.
Sample processing time 0.0010
735 : ================== [0]
Sample type: TemporalSentence
Phrase:            1990
Sentence:          Analysts were predicting 1990 BellSouth earnings in the range of $3.90 a share, or $1.9 billion, but now those estimates are being scaled back.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0010
736 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Analysts were predicting 1990 BellSouth earnings in the range of $3.90 a share, or $1.9 billion, but now those estimates are being scaled back.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
737 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          In composite trading Friday on the New York Stock Exchange, BellSouth shares fell 87.5 cents to $52.125.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0010
738 : ================== [0]
Sample type: TemporalSentence
Phrase:            1984
Sentence:          Mr. Leon of Bear Stearns speculated that McCaw, in an attempt to buy time, might consider filing an antitrust suit against BellSouth with the Justice Department and U.S. District Judge Harold Greene, who oversees enforcement of the consent decree that broke up the Bell system in 1984.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1984
Executing the phrase: 1984
with logic: 1984:r
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (previous:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (this:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (next:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: 1984:r
and lexical entries: [1984 :- NP : 1984:r]
Correct parses:
1984:r => (1984:r) => (DATE,1984)
Correct. No update.
Sample processing time 0.0050
739 : ================== [0]
Sample type: TemporalSentence
Phrase:            september
Sentence:          The portion of OTC volume attributable to program trading isn't known, as it is on the New York Stock Exchange, where it amounted to more than 13% in September.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-09
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Correct parses:
september:s => ((this:<s,<r,s>> september:s ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0040
740 : ================== [0]
Sample type: TemporalSentence
Phrase:            this month
Sentence:          But the big, often tumultuous slide in stock prices this month has turned some of those who have been profiting from the practice against it.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0020
741 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          "We weren't as concerned until they became sell programs," says Mr. DaPuzzo, who now thinks it adds unnecessary volatility.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
742 : ================== [0]
Sample type: TemporalSentence
Phrase:            past years
Sentence:          Of course, there were sell programs in past years, too, but they seem to hurt market makers more painfully these days.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: past years
with logic: past_ref:r
and lexical entries: [past :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d, past years :- NP : past_ref:r]
Executing the phrase: past years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [past :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d, past years :- NP : past_ref:r]
Executing the phrase: past years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [past :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d, past years :- NP : past_ref:r]
Executing the phrase: past years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [past :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d, past years :- NP : past_ref:r]
Executing the phrase: past years
with logic: past_ref:r
and lexical entries: [past :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d, past years :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
743 : ================== [0]
Sample type: TemporalSentence
Phrase:            these days
Sentence:          Of course, there were sell programs in past years, too, but they seem to hurt market makers more painfully these days.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: these days
with logic: present_ref:r
and lexical entries: [these days :- NP : present_ref:r]
Executing the phrase: these days
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [these days :- NP : present_ref:r]
Executing the phrase: these days
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [these days :- NP : present_ref:r]
Executing the phrase: these days
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [these days :- NP : present_ref:r]
Executing the phrase: these days
with logic: present_ref:r
and lexical entries: [these days :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
744 : ================== [0]
Sample type: TemporalSentence
Phrase:            1987
Sentence:          That's largely because of defensive measures they adopted after the 1987 crash, when individual investors fled the market and trading activity dwindled.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1987
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (previous:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (this:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (next:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Correct parses:
1987:r => (1987:r) => (DATE,1987)
Correct. No update.
Sample processing time 0.0020
745 : ================== [0]
Sample type: TemporalSentence
Phrase:            eight trading days
Sentence:          Eight trading days after Oct. 12, the day before the stock market plunge, for instance, the Nasdaq Composite had fallen 4.3%, compared with 3.3% for the SampP 500, 3.5% for the New York Stock Exchange Composite Index and 3.6% for the industrial average.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P8D
Executing the phrase: eight trading days
with logic: (*:<d,<n,d>> days:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), trading :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: eight trading days
with logic: (*:<d,<n,d>> days:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), trading :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: eight trading days
with logic: (*:<d,<n,d>> days:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), trading :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: eight trading days
with logic: (*:<d,<n,d>> days:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), trading :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: eight trading days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 8:n))
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), trading :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Correct parses:
(*:<d,<n,d>> days:d 8:n) => ((*:<d,<n,d>> days:d 8:n)) => (DURATION,P8D)
Correct. No update.
Sample processing time 0.0030
746 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 12
Sentence:          Eight trading days after Oct. 12, the day before the stock market plunge, for instance, the Nasdaq Composite had fallen 4.3%, compared with 3.3% for the SampP 500, 3.5% for the New York Stock Exchange Composite Index and 3.6% for the industrial average.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-12
Executing the phrase: oct. 12
with logic: (intersect:<s*,s> october:s 12d:s)
and lexical entries: [oct. :- NP : october:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: oct. 12
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 12d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: oct. 12
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 12d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: oct. 12
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 12d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: oct. 12
with logic: (intersect:<s*,s> october:s 12d:s)
and lexical entries: [oct. :- NP : october:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Correct parses:
(intersect:<s*,s> october:s 12d:s) => ((this:<s,<r,s>> (intersect:<s*,s> october:s 12d:s) ref_time:r)) => (DATE,1989-10-12)
Bad violating parse: ((intersect:<s*,s> october:s 12d:s), ((next:<s,<r,s>> (intersect:<s*,s> october:s 12d:s) ref_time:r)) => (DATE,1990-10-12))
Update: {TEMPORAL_CONTEXT__next_VBN=-1.0, TEMPORAL_CONTEXT__this_VBN=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0020
747 : ================== [0]
Sample type: TemporalSentence
Phrase:            the day
Sentence:          Eight trading days after Oct. 12, the day before the stock market plunge, for instance, the Nasdaq Composite had fallen 4.3%, compared with 3.3% for the SampP 500, 3.5% for the New York Stock Exchange Composite Index and 3.6% for the industrial average.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-12
Executing the phrase: the day
with logic: today:r
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: today:r
and lexical entries: [the day :- NP : today:r]
Bad violating parse: (today:r, ((this:<s,<r,s>> today:r ref_time:r)) => (DATE,1989-10-30))
No correct parses. No update.
Sample processing time 0.0020
748 : ================== [0]
Sample type: TemporalSentence
Phrase:            three days
Sentence:          Three days later, as of Friday's close, the Nasdaq Composite was down 6%, compared with 5.9% for the industrial average, 5.7% for the SampP 500 and 5.8% for the Big Board Composite.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P3D
Executing the phrase: three days
with logic: (*:<d,<n,d>> days:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), days :- NP : days:d]
Executing the phrase: three days
with logic: (*:<d,<n,d>> days:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), days :- NP : days:d]
Executing the phrase: three days
with logic: (*:<d,<n,d>> days:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), days :- NP : days:d]
Executing the phrase: three days
with logic: (*:<d,<n,d>> days:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), days :- NP : days:d]
Executing the phrase: three days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 3:n))
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), days :- NP : days:d]
Correct parses:
(*:<d,<n,d>> days:d 3:n) => ((*:<d,<n,d>> days:d 3:n)) => (DURATION,P3D)
Correct. No update.
Sample processing time 0.0020
749 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Three days later, as of Friday's close, the Nasdaq Composite was down 6%, compared with 5.9% for the industrial average, 5.7% for the SampP 500 and 5.8% for the Big Board Composite.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
750 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          The Nasdaq Composite Index tumbled 5.39, or 1.2% to 452.76 on Friday.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
751 : ================== [0]
Sample type: TemporalSentence
Phrase:            the week
Sentence:          For the week, the index dropped 3.8%.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
No correct parses. No update.
Sample processing time 0.0020
752 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Weakness in big technology stocks hurt the composite as well as the Nasdaq 100 Index, which fell 1.4%, or 6.43, on Friday, to 437.68.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0030
753 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Friday's trading volume totaled 132.8 million shares.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0010
754 : ================== [0]
Sample type: TemporalSentence
Phrase:            october
Sentence:          The average daily share turnover for October is almost 148 million shares.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10
Executing the phrase: october
with logic: october:s
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (previous:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (this:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (next:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: october:s
and lexical entries: [october :- NP : october:s]
Correct parses:
october:s => ((this:<s,<r,s>> october:s ref_time:r)) => (DATE,1989-10)
Bad violating parse: (october:s, ((next:<s,<r,s>> october:s ref_time:r)) => (DATE,1990-10))
Update: {TEMPORAL_CONTEXT__next_VBZ=-1.0, TEMPORAL_CONTEXT__this_VBZ=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0020
755 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          LIN now plans to dole out $42 a share in cash, up from the earlier $20 amount.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
756 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          The stock fell 7/8 Thursday amid concerns over problems discovered with the chip.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0010
757 : ================== [0]
Sample type: TemporalSentence
Phrase:            two to three weeks
Sentence:          Intel told analysts that the company will resume shipments of the chips within two to three weeks.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P2W
No correct parses. No update.
Sample processing time 0.0010
758 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          The company said its third-quarter earnings will probably be lower than the 16 cents a share it reported last year, despite a rise in the company's revenue.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
759 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          The company said its third-quarter earnings will probably be lower than the 16 cents a share it reported last year, despite a rise in the company's revenue.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
760 : ================== [0]
Sample type: TemporalSentence
Phrase:            the 1988 quarter
Sentence:          Kirschner earned $376,000 on revenue of $14.5 million in the 1988 quarter.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0000
761 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          London share prices closed sharply lower Friday in active trading after Chancellor of the Exchequer Nigel Lawson's resignation slapped the market and Wall Street's rapid initial sell-off knocked it down.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
762 : ================== [0]
Sample type: TemporalSentence
Phrase:            overnight
Sentence:          London shares were depressed initially by overnight losses in New York and by the drop in sterling after Mr. Lawson's resignation.
ref_time:          1989-10-30
Gold type:         TIME
gold val:          1989-10-26TNI
No correct parses. No update.
Sample processing time 0.0000
763 : ================== [0]
Sample type: TemporalSentence
Phrase:            the previous friday
Sentence:          The Financial Times 100-share index shed 47.3 points to close at 2082.1, down 4.5% from the previous Friday and 6.8% from Oct. 13, when Wall Street's plunge helped spark the current weakness in London.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-20
No correct parses. No update.
Sample processing time 0.0010
764 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 13
Sentence:          The Financial Times 100-share index shed 47.3 points to close at 2082.1, down 4.5% from the previous Friday and 6.8% from Oct. 13, when Wall Street's plunge helped spark the current weakness in London.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-13
Executing the phrase: oct. 13
with logic: (intersect:<s*,s> october:s 13d:s)
and lexical entries: [oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: oct. 13
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 13d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: oct. 13
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 13d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: oct. 13
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 13d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: oct. 13
with logic: (intersect:<s*,s> october:s 13d:s)
and lexical entries: [oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Correct parses:
(intersect:<s*,s> october:s 13d:s) => ((this:<s,<r,s>> (intersect:<s*,s> october:s 13d:s) ref_time:r)) => (DATE,1989-10-13)
Bad violating parse: ((intersect:<s*,s> october:s 13d:s), ((next:<s,<r,s>> (intersect:<s*,s> october:s 13d:s) ref_time:r)) => (DATE,1990-10-13))
Update: {TEMPORAL_CONTEXT__next_VB=-1.0, TEMPORAL_CONTEXT__this_VB=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0050
765 : ================== [0]
Sample type: TemporalSentence
Phrase:            current
Sentence:          The Financial Times 100-share index shed 47.3 points to close at 2082.1, down 4.5% from the previous Friday and 6.8% from Oct. 13, when Wall Street's plunge helped spark the current weakness in London.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0040
766 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          Volume was 840.8 million shares, up from 443.6 million Thursday and the week's most active session.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0020
767 : ================== [0]
Sample type: TemporalSentence
Phrase:            the week
Sentence:          Volume was 840.8 million shares, up from 443.6 million Thursday and the week's most active session.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
No correct parses. No update.
Sample processing time 0.0090
768 : ================== [0]
Sample type: TemporalSentence
Phrase:            two week
Sentence:          Dealers said the turnover, largely confined to the 100-share index stocks, partly reflected the flurry of activity typical at the close of a two-week trading account and the start of a new account.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P2W
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> week:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Correct parses:
(*:<d,<n,d>> week:d 2:n) => ((*:<d,<n,d>> week:d 2:n)) => (DURATION,P2W)
Correct. No update.
Sample processing time 0.0040
769 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          But they said Friday's focus on the top-tier stocks telegraphed active overseas selling and showed the broad-based fears over the status of the U.K. economy and Britain's currency in the wake of the upheaval in Prime Minister Margaret Thatcher's cabinet.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
770 : ================== [0]
Sample type: TemporalSentence
Phrase:            one day
Sentence:          Other dealers added that the blue-chip stocks in general were hit by profit-taking over concerns that London shares will continue posting declines and the uncertainty over sterling given that Mr. Lawson's successor, John Major, had only been in the job one day.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P1D
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> day:d 1:n))
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Correct parses:
(*:<d,<n,d>> day:d 1:n) => ((*:<d,<n,d>> day:d 1:n)) => (DURATION,P1D)
Correct. No update.
Sample processing time 0.0050
771 : ================== [0]
Sample type: TemporalSentence
Phrase:            this week
Sentence:          The Nikkei index was pressured down by profit-taking triggered by sharp advances made through this week and fell 151.20 points to 35527.29.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-W44
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(this:<d,<r,s>> week:d ref_time:r) => ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44)
Correct. No update.
Sample processing time 0.0020
772 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          In early trading in Tokyo Monday, the Nikkei index fell 148.85 points to 35378.44.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-30
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Correct parses:
monday:s => ((this:<s,<r,s>> monday:s ref_time:r)) => (DATE,1989-10-30)
Correct. No update.
Sample processing time 0.0020
773 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          On Friday, the Tokyo stock price index of first section issues was down 15.82 at 2681.76.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
774 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          First-section volume was estimated at 1.3 billion shares, up from 886 million shares Thursday.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0020
775 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent
Sentence:          An official at Wako Securities said brokerages' excessive expectations about recent advances in Tokyu Group shares and real estate issues were dashed Friday.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
776 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          An official at Wako Securities said brokerages' excessive expectations about recent advances in Tokyu Group shares and real estate issues were dashed Friday.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0030
777 : ================== [0]
Sample type: TemporalSentence
Phrase:            the morning
Sentence:          Dealers placed heavy buy orders in the morning to start the first trading day for November transactions.
ref_time:          1989-10-30
Gold type:         TIME
gold val:          1989-10-27TMO
No correct parses. No update.
Sample processing time 0.0000
778 : ================== [0]
Sample type: TemporalSentence
Phrase:            day
Sentence:          Dealers placed heavy buy orders in the morning to start the first trading day for November transactions.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P1D
Executing the phrase: day
with logic: day:d
and lexical entries: [day :- NP : day:d]
Executing the phrase: day
with logic: day:d
and lexical entries: [day :- NP : day:d]
Executing the phrase: day
with logic: day:d
and lexical entries: [day :- NP : day:d]
Executing the phrase: day
with logic: day:d
and lexical entries: [day :- NP : day:d]
Executing the phrase: day
with logic: day:d
and lexical entries: [day :- NP : day:d]
Correct parses:
day:d => (day:d) => (DURATION,P1D)
Correct. No update.
Sample processing time 0.0020
779 : ================== [0]
Sample type: TemporalSentence
Phrase:            november
Sentence:          Dealers placed heavy buy orders in the morning to start the first trading day for November transactions.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-11
Executing the phrase: november
with logic: november:s
and lexical entries: [november :- NP : november:s]
Executing the phrase: november
with logic: (previous:<s,<r,s>> november:s ref_time:r)
and lexical entries: [november :- NP : november:s]
Executing the phrase: november
with logic: (this:<s,<r,s>> november:s ref_time:r)
and lexical entries: [november :- NP : november:s]
Executing the phrase: november
with logic: (next:<s,<r,s>> november:s ref_time:r)
and lexical entries: [november :- NP : november:s]
Executing the phrase: november
with logic: november:s
and lexical entries: [november :- NP : november:s]
Correct parses:
november:s => ((next:<s,<r,s>> november:s ref_time:r)) => (DATE,1989-11)
Correct. No update.
Sample processing time 0.0020
780 : ================== [0]
Sample type: TemporalSentence
Phrase:            this week
Sentence:          But they failed to sell these stocks to client investors, who were cautious about the sharp gains these issues made this week, the Wako official said.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-W44
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(this:<d,<r,s>> week:d ref_time:r) => ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44)
Correct. No update.
Sample processing time 0.0020
781 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Fund managers said Friday's profittaking was a natural result of the week's "abnormal fever" in buying real estate, shipbuilding, steel and construction shares.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0010
782 : ================== [0]
Sample type: TemporalSentence
Phrase:            the week
Sentence:          Fund managers said Friday's profittaking was a natural result of the week's "abnormal fever" in buying real estate, shipbuilding, steel and construction shares.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
No correct parses. No update.
Sample processing time 0.0030
783 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Frankfurt prices closed lower again Friday, the fourth decline in the past five days and the culmination of a week that saw the DAX index lose 4%.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0010
784 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past five days
Sentence:          Frankfurt prices closed lower again Friday, the fourth decline in the past five days and the culmination of a week that saw the DAX index lose 4%.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P5D
Executing the phrase: the past five days
with logic: (*:<d,<n,d>> days:d 5:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), days :- NP : days:d]
Executing the phrase: the past five days
with logic: (*:<d,<n,d>> days:d 5:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), days :- NP : days:d]
Executing the phrase: the past five days
with logic: (*:<d,<n,d>> days:d 5:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), days :- NP : days:d]
Executing the phrase: the past five days
with logic: (*:<d,<n,d>> days:d 5:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), days :- NP : days:d]
Executing the phrase: the past five days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 5:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), days :- NP : days:d]
Correct parses:
(*:<d,<n,d>> days:d 5:n) => ((*:<d,<n,d>> days:d 5:n)) => (DURATION,P5D)
Correct. No update.
Sample processing time 0.0040
785 : ================== [0]
Sample type: TemporalSentence
Phrase:            a week
Sentence:          Frankfurt prices closed lower again Friday, the fourth decline in the past five days and the culmination of a week that saw the DAX index lose 4%.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P1W
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Correct parses:
week:d => (week:d) => (DURATION,P1W)
Correct. No update.
Sample processing time 0.0030
786 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          The DAX dropped 19.69 points Friday to 1462.93.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0010
787 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Traders said that selling pressure wasn't enormous and that the DAX dropped Friday more on a lack of any substantial buying interest.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0030
788 : ================== [0]
Sample type: TemporalSentence
Phrase:            the weekend
Sentence:          They said contributing to the downward drift was the fact that many professional traders had chosen to square positions ahead of the weekend.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-W44-WE
No correct parses. No update.
Sample processing time 0.0000
789 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          Traders said the market remains extremely nervous because of the wild swings seen on the New York Stock Exchange last week.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-W43
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(previous:<d,<r,s>> week:d ref_time:r) => ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43)
Correct. No update.
Sample processing time 0.0030
790 : ================== [0]
Sample type: TemporalSentence
Phrase:            year end
Sentence:          The percentage change is since year-end.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-12-31
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (next:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Bad violating parse: ((intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)), ((this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)) => (DATE,1989-12-31))
No correct parses. No update.
Sample processing time 0.0010
791 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          And now Kellogg is indefinitely suspending work on what was to be a $1 billion cereal plant.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
792 : ================== [0]
Sample type: TemporalSentence
Phrase:            current
Sentence:          The company said it was delaying construction because of current market conditions.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
793 : ================== [0]
Sample type: TemporalSentence
Phrase:            1993
Sentence:          But the Memphis, Tenn., facility wasn't to begin turning out product until 1993, so the decision may reveal a more pessimistic long-term outlook as well.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1993
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (previous:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (this:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (next:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Correct parses:
1993:r => (1993:r) => (DATE,1993)
Correct. No update.
Sample processing time 0.0030
794 : ================== [0]
Sample type: TemporalSentence
Phrase:            current
Sentence:          Kellogg's current share is believed to be slightly under 40% while General Mills' share is about 27%.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
795 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Led by its oat-based Cheerios line, General Mills has gained an estimated 2% share so far this year, mostly at the expense of Kellogg.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0030
796 : ================== [0]
Sample type: TemporalSentence
Phrase:            soon
Sentence:          Kellogg is so anxious to turn around Corn Flakes sales that it soon will begin selling boxes for as little as 99 cents, trade sources say.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0020
797 : ================== [0]
Sample type: TemporalSentence
Phrase:            right now
Sentence:          "They are not a happy group of people at Battle Creek right now."
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: right now
with logic: present_ref:r
and lexical entries: [right now :- NP : present_ref:r]
Executing the phrase: right now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [right now :- NP : present_ref:r]
Executing the phrase: right now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [right now :- NP : present_ref:r]
Executing the phrase: right now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [right now :- NP : present_ref:r]
Executing the phrase: right now
with logic: present_ref:r
and lexical entries: [right now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
798 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          Another analyst, John C. Maxwell Jr. of Wheat, First Securities in Richmond, Va., recently went to a "sell" recommendation on Kellogg stock, which closed Friday at $71.75, down 75 cents, in New York Stock Exchange composite trading.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
799 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          Another analyst, John C. Maxwell Jr. of Wheat, First Securities in Richmond, Va., recently went to a "sell" recommendation on Kellogg stock, which closed Friday at $71.75, down 75 cents, in New York Stock Exchange composite trading.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0040
800 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          "I don't think Kellogg can get back to 40% this year," he said.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0030
801 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next two years or so
Sentence:          Mr. Maxwell said he wouldn't be surprised if, over the next two years or so, General Mills' share increased to 30% or more.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: the next two years or so
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next two years or so
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next two years or so
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next two years or so
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next two years or so
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next two years or so
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0), or so :- NP\NP : (lambda $0:s $0)]
Executing the phrase: the next two years or so
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0), or so :- NP\NP : (lambda $0:s $0)]
Executing the phrase: the next two years or so
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0), or so :- NP\NP : (lambda $0:s $0)]
Executing the phrase: the next two years or so
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0), or so :- NP\NP : (lambda $0:s $0)]
Executing the phrase: the next two years or so
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0), or so :- NP\NP : (lambda $0:s $0)]
Correct parses:
(next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r) => ((next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)) => (DURATION,P2Y)
Correct. No update.
Sample processing time 0.0060
802 : ================== [0]
Sample type: TemporalSentence
Phrase:            1989
Sentence:          In announcing the plant delay, Kellogg Chairman William E. LaMothe said, "Cereal volume growth in the U.S. has not met our expectations for 1989".
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Correct parses:
1989:r => (1989:r) => (DATE,1989)
Correct. No update.
Sample processing time 0.0030
803 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          The company has five other U.S. plants, including a modern facility at its Battle Creek headquarters known as Building 100, which is to add bran-processing and rice-processing capacity next year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0040
804 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          A large plant in Covington, Ga., is to come on line next year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0020
805 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent weeks
Sentence:          But in recent weeks, construction-industry sources reported that early preparation work was slowing at the 185-acre site.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          PXW
Executing the phrase: recent weeks
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), weeks :- NP : weeks:d]
Executing the phrase: recent weeks
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), weeks :- NP : weeks:d]
Executing the phrase: recent weeks
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), weeks :- NP : weeks:d]
Executing the phrase: recent weeks
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), weeks :- NP : weeks:d]
Executing the phrase: recent weeks
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), weeks :- NP : weeks:d]
Bad violating parse: (past_ref:r, ((this:<s,<r,s>> past_ref:r ref_time:r)) => (DATE,PAST_REF))
No correct parses. No update.
Sample processing time 0.0020
806 : ================== [0]
Sample type: TemporalSentence
Phrase:            last friday
Sentence:          Last Friday's announcement was the first official word that the project was in trouble and that the company's plans for a surge in market share may have been overly optimistic.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Correct parses:
(previous:<s,<r,s>> friday:s ref_time:r) => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
807 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          Until recently, Kellogg had been telling its sales force and Wall Street that by 1992 it intended to achieve a 50% share of market, measured in dollar volume.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0010
808 : ================== [0]
Sample type: TemporalSentence
Phrase:            1992
Sentence:          Until recently, Kellogg had been telling its sales force and Wall Street that by 1992 it intended to achieve a 50% share of market, measured in dollar volume.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1992
Executing the phrase: 1992
with logic: 1992:r
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (previous:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (this:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (next:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: 1992:r
and lexical entries: [1992 :- NP : 1992:r]
Correct parses:
1992:r => (1992:r) => (DATE,1992)
Correct. No update.
Sample processing time 0.0020
809 : ================== [0]
Sample type: TemporalSentence
Phrase:            the full year
Sentence:          Although he called current market conditions "highly competitive," Mr. LaMothe, Kellogg's chairman and chief executive officer, forecast an earnings increase for the full year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0040
810 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Last year, the company earned $480.4 million, or $3.90 a share, on sales of $4.3 billion.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0010
811 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          As expected, Kellogg reported lower third-quarter earnings.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
812 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest quarter
Sentence:          The company had a one-time charge of $14.8 million in the latest quarter covering the disposition of certain assets.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Correct parses:
(previous:<d,<r,s>> quarter:d ref_time:r) => ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
813 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          The following were among Friday's offerings and pricings in the U.S. and non-U.S. capital markets, with terms and syndicate manager, as compiled by Dow Jones Capital Markets Report: @ CORPORATES Sun Microsystems Inc. -- $125 million of 6 3/8% convertible subordinated debentures due Oct. 15, 1999, priced at 84.90 to yield 7.51%.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0020
814 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 15 1999
Sentence:          The following were among Friday's offerings and pricings in the U.S. and non-U.S. capital markets, with terms and syndicate manager, as compiled by Dow Jones Capital Markets Report: @ CORPORATES Sun Microsystems Inc. -- $125 million of 6 3/8% convertible subordinated debentures due Oct. 15, 1999, priced at 84.90 to yield 7.51%.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1999-10-15
Executing the phrase: oct. 15 1999
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) => ((intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r)) => (DATE,1999-10-15)
Correct. No update.
Sample processing time 0.0060
815 : ================== [0]
Sample type: TemporalSentence
Phrase:            thursday
Sentence:          The debentures are convertible into common stock at $25 a share, representing a 24% conversion premium over Thursday's closing price.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Correct parses:
thursday:s => ((previous:<s,<r,s>> thursday:s ref_time:r)) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0030
816 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 1 2009
Sentence:          Hertz Corp. -- $100 million of senior notes due Nov. 1, 2009, priced at par to yield 9%.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          2009-11-01
Executing the phrase: nov. 1 2009
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2009 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2009:r))]
Executing the phrase: nov. 1 2009
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2009 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2009:r))]
Executing the phrase: nov. 1 2009
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2009 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2009:r))]
Executing the phrase: nov. 1 2009
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2009 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2009:r))]
Executing the phrase: nov. 1 2009
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2009 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2009:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r) => ((intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r)) => (DATE,2009-11-01)
Correct. No update.
Sample processing time 0.0020
817 : ================== [0]
Sample type: TemporalSentence
Phrase:            1999
Sentence:          The issue, which is puttable back to the company in 1999, was priced at a spread of 110 basis points above the Treasury's 10-year note.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1999
Executing the phrase: 1999
with logic: 1999:r
and lexical entries: [1999 :- NP : 1999:r]
Executing the phrase: 1999
with logic: (previous:<s,<r,s>> 1999:r ref_time:r)
and lexical entries: [1999 :- NP : 1999:r]
Executing the phrase: 1999
with logic: (this:<s,<r,s>> 1999:r ref_time:r)
and lexical entries: [1999 :- NP : 1999:r]
Executing the phrase: 1999
with logic: (next:<s,<r,s>> 1999:r ref_time:r)
and lexical entries: [1999 :- NP : 1999:r]
Executing the phrase: 1999
with logic: 1999:r
and lexical entries: [1999 :- NP : 1999:r]
Correct parses:
1999:r => (1999:r) => (DATE,1999)
Correct. No update.
Sample processing time 0.0020
818 : ================== [0]
Sample type: TemporalSentence
Phrase:            10 year
Sentence:          The issue, which is puttable back to the company in 1999, was priced at a spread of 110 basis points above the Treasury's 10-year note.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P10Y
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 10:n))
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 10:n) => ((*:<d,<n,d>> year:d 10:n)) => (DURATION,P10Y)
Correct. No update.
Sample processing time 0.0040
819 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 17 1992
Sentence:          @ EUROBONDS Canadian Imperial Bank of Commerce (Canada) -- 10 billion yen of 5.7% bonds due Nov. 17, 1992, priced at 101 1/4 to yield 5.75% less full fees, via LTCB International Ltd.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1992-11-17
Executing the phrase: nov. 17 1992
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s)), 1992 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1992:r))]
Executing the phrase: nov. 17 1992
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s)), 1992 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1992:r))]
Executing the phrase: nov. 17 1992
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s)), 1992 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1992:r))]
Executing the phrase: nov. 17 1992
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s)), 1992 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1992:r))]
Executing the phrase: nov. 17 1992
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s)), 1992 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1992:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r) => ((intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r)) => (DATE,1992-11-17)
Correct. No update.
Sample processing time 0.0030
820 : ================== [0]
Sample type: TemporalSentence
Phrase:            around nov. 1
Sentence:          said it plans a private placement of 150 million Canadian dollars (US$127.5 million) in preferred shares, to be completed around Nov. 1.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: around nov. 1
with logic: (intersect:<s*,s> november:s 1d:s)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: around nov. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: around nov. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: around nov. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: around nov. 1
with logic: (intersect:<s*,s> november:s 1d:s)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Correct parses:
(intersect:<s*,s> november:s 1d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)) => (DATE,1989-11-01)
Correct. No update.
Sample processing time 0.0030
821 : ================== [0]
Sample type: TemporalSentence
Phrase:            30 day
Sentence:          The preferred shares will carry a floating annual dividend equal to 72% of the 30-day bankers' acceptance rate until Dec. 31, 1994.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P30D
Executing the phrase: 30 day
with logic: (*:<d,<n,d>> day:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), day :- NP : day:d]
Executing the phrase: 30 day
with logic: (*:<d,<n,d>> day:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), day :- NP : day:d]
Executing the phrase: 30 day
with logic: (*:<d,<n,d>> day:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), day :- NP : day:d]
Executing the phrase: 30 day
with logic: (*:<d,<n,d>> day:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), day :- NP : day:d]
Executing the phrase: 30 day
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> day:d 30:n))
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), day :- NP : day:d]
Correct parses:
(*:<d,<n,d>> day:d 30:n) => ((*:<d,<n,d>> day:d 30:n)) => (DURATION,P30D)
Correct. No update.
Sample processing time 0.0020
822 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 31 1994
Sentence:          The preferred shares will carry a floating annual dividend equal to 72% of the 30-day bankers' acceptance rate until Dec. 31, 1994.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1994-12-31
Executing the phrase: dec. 31 1994
with logic: (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: dec. 31 1994
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: dec. 31 1994
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: dec. 31 1994
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: dec. 31 1994
with logic: (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r) => ((intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r)) => (DATE,1994-12-31)
Correct. No update.
Sample processing time 0.0030
823 : ================== [0]
Sample type: TemporalSentence
Phrase:            the end of 1994
Sentence:          The shares are redeemable after the end of 1994.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1994
Executing the phrase: the end of 1994
with logic: 1994:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1994 :- NP : 1994:r]
Executing the phrase: the end of 1994
with logic: (previous:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1994 :- NP : 1994:r]
Executing the phrase: the end of 1994
with logic: (this:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1994 :- NP : 1994:r]
Executing the phrase: the end of 1994
with logic: (next:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1994 :- NP : 1994:r]
Executing the phrase: the end of 1994
with logic: 1994:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1994 :- NP : 1994:r]
Correct parses:
1994:r => (1994:r) => (DATE,1994)
Correct. No update.
Sample processing time 0.0020
824 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next 12 to 18 months
Sentence:          Mr. Vaux said the share issue is part of a strategy to strengthen Labatt's balance sheet in anticipation of acquisitions to be made during the next 12 to 18 months.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          PXM
No correct parses. No update.
Sample processing time 0.0020
825 : ================== [0]
Sample type: TemporalSentence
Phrase:            currently
Sentence:          Labatt's has no takeover bids outstanding currently, he said.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
826 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 15 1999
Sentence:          Sun Microsystems Inc., a computer maker, announced the effectiveness of its registration statement for $125 million of 6 3/8% convertible subordinated debentures due Oct. 15, 1999.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1999-10-15
Executing the phrase: oct. 15 1999
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) => ((intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r)) => (DATE,1999-10-15)
Correct. No update.
Sample processing time 0.0030
827 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Montedison now owns about 72% of Erbamont's shares outstanding.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0000
828 : ================== [0]
Sample type: TemporalSentence
Phrase:            as soon as possible
Sentence:          A unit of DPC Acquisition Partners launched a $10-a-share tender offer for the shares outstanding of Dataproducts Corp., and said it would seek to liquidate the computer-printer maker "as soon as possible," even if a merger isn't consummated.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: as soon as possible
with logic: future_ref:r
and lexical entries: [as soon as possible :- NP : future_ref:r]
Executing the phrase: as soon as possible
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [as soon as possible :- NP : future_ref:r]
Executing the phrase: as soon as possible
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [as soon as possible :- NP : future_ref:r]
Executing the phrase: as soon as possible
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [as soon as possible :- NP : future_ref:r]
Executing the phrase: as soon as possible
with logic: future_ref:r
and lexical entries: [as soon as possible :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0030
829 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier this year
Sentence:          Earlier this year, DPC Acquisition made a $15-a-share offer for Dataproducts, which the Dataproducts board said it rejected because the $283.7 million offer was not fully financed.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
830 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          In over-the-counter trading Friday, Jayark was quoted at 87.5 cents bid, down 15.625 cents.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((previous:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0010
831 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          In the quarter ended July 31, Jayark had an average of 5.6 million shares outstanding.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q2
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0020
832 : ================== [0]
Sample type: TemporalSentence
Phrase:            july 31
Sentence:          In the quarter ended July 31, Jayark had an average of 5.6 million shares outstanding.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-07-31
Executing the phrase: july 31
with logic: (intersect:<s*,s> july:s 31d:s)
and lexical entries: [july :- NP : july:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: july 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> july:s 31d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: july 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> july:s 31d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: july 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> july:s 31d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: july 31
with logic: (intersect:<s*,s> july:s 31d:s)
and lexical entries: [july :- NP : july:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Correct parses:
(intersect:<s*,s> july:s 31d:s) => ((this:<s,<r,s>> (intersect:<s*,s> july:s 31d:s) ref_time:r)) => (DATE,1989-07-31)
Correct. No update.
Sample processing time 0.0010
833 : ================== [0]
Sample type: TemporalSentence
Phrase:            fourth quarter
Sentence:          said it will report a write-off of $2.5 million, or seven cents a share, for its fourth quarter ended yesterday.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Correct. No update.
Sample processing time 0.0030
834 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          said it will report a write-off of $2.5 million, or seven cents a share, for its fourth quarter ended yesterday.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-29
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-29)
Correct. No update.
Sample processing time 0.0020
835 : ================== [0]
Sample type: TemporalSentence
Phrase:            1988
Sentence:          The restaurant operator cited transaction costs from its 1988 recapitalization as a result of a $160 million restructuring of its bank debt.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Correct parses:
1988:r => (1988:r) => (DATE,1988)
Correct. No update.
Sample processing time 0.0020
836 : ================== [0]
Sample type: TemporalSentence
Phrase:            1989
Sentence:          The write-off will be reported as an extraordinary item in the company's 1989 operating results.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Correct parses:
1989:r => (1989:r) => (DATE,1989)
Correct. No update.
Sample processing time 0.0010
837 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          The combined effect of these changes is expected to save the company about $4 million in interest expenses next year, or six cents a share.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
838 : ================== [0]
Sample type: TemporalSentence
Phrase:            1988
Sentence:          Shoney's said the latest restructuring affected bank indebtedness that was incurred to finance $585 million of the company's $728 million recapitalization that took place in 1988.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Correct parses:
1988:r => (1988:r) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
839 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          said it expects to report a charge of $5.3 million related to the sale of its aluminum unit's extrusion division for the third quarter.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0040
840 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          The charge is offset by an after-tax gain of about $30 million in the quarter from the previously announced pact to sell National Aluminum's rolling division.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0020
841 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year ago third quarter
Sentence:          National Intergroup in the year-ago third quarter earned $22.5 million, or 97 cents a share, including a gain of $18 million from the sale of a steel tube company.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: the year ago third quarter
with logic: (intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, the :- NP/NP : (lambda $0:s $0), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the year ago third quarter
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, the :- NP/NP : (lambda $0:s $0), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the year ago third quarter
with logic: (this:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, the :- NP/NP : (lambda $0:s $0), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the year ago third quarter
with logic: (next:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, the :- NP/NP : (lambda $0:s $0), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the year ago third quarter
with logic: (intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, the :- NP/NP : (lambda $0:s $0), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Correct parses:
(intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n)) => ((intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0030
842 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next two years
Sentence:          The agreement also provides for potential payments of additional proceeds to National Aluminum over the next two years, depending on the plant's shipping levels.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: the next two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Correct parses:
(next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r) => ((next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)) => (DURATION,P2Y)
Correct. No update.
Sample processing time 0.0050
843 : ================== [0]
Sample type: TemporalSentence
Phrase:            fiscal 1989
Sentence:          In fiscal 1989, it had sales of about $40 million and an operating loss of $1.5 million.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Correct parses:
1989:r => (1989:r) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
844 : ================== [0]
Sample type: TemporalSentence
Phrase:            currently
Sentence:          The company said it currently holds about 4.2 million of Innopac's 13.8 million common shares outstanding, which have an aggregate market value of about 137.8 million Canadian dollars (US$117.3 million).
ref_time:          1989-10-30
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
845 : ================== [0]
Sample type: TemporalSentence
Phrase:            fourth quarter
Sentence:          Separately, Innopac reported a fourth-quarter loss of about C$2.6 million, or 18 Canadian cents a share, reflecting inventory write-downs.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Correct. No update.
Sample processing time 0.0020
846 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year
Sentence:          The results made net income for the year ended Aug. 31 C$2.7 million, or 20 Canadian cents a share, down from C$9.7 million, or 70 Canadian cents a share last year.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P1Y
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Correct parses:
year:d => (year:d) => (DURATION,P1Y)
Correct. No update.
Sample processing time 0.0020
847 : ================== [0]
Sample type: TemporalSentence
Phrase:            aug. 31
Sentence:          The results made net income for the year ended Aug. 31 C$2.7 million, or 20 Canadian cents a share, down from C$9.7 million, or 70 Canadian cents a share last year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-08-31
Executing the phrase: aug. 31
with logic: (intersect:<s*,s> august:s 31d:s)
and lexical entries: [aug. :- NP : august:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: aug. 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 31d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: aug. 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 31d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: aug. 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 31d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: aug. 31
with logic: (intersect:<s*,s> august:s 31d:s)
and lexical entries: [aug. :- NP : august:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Correct parses:
(intersect:<s*,s> august:s 31d:s) => ((this:<s,<r,s>> (intersect:<s*,s> august:s 31d:s) ref_time:r)) => (DATE,1989-08-31)
Correct. No update.
Sample processing time 0.0020
848 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          The results made net income for the year ended Aug. 31 C$2.7 million, or 20 Canadian cents a share, down from C$9.7 million, or 70 Canadian cents a share last year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
849 : ================== [0]
Sample type: TemporalSentence
Phrase:            1988
Sentence:          Revenue was C$291.6 million, up from C$252 million in 1988.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Correct parses:
1988:r => (1988:r) => (DATE,1988)
Correct. No update.
Sample processing time 0.0020
850 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier this year
Sentence:          earlier this year opened the first U.S. polystyrene recycling plant, in Leominster, Mass.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0010
851 : ================== [0]
Sample type: TemporalSentence
Phrase:            september
Sentence:          Personal spending rose 0.2% in September, the smallest gain in a year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-09
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Correct parses:
september:s => ((this:<s,<r,s>> september:s ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0010
852 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          The slowdown raises questions about the economy's strength because spending fueled much of the third-quarter GNP growth.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
853 : ================== [0]
Sample type: TemporalSentence
Phrase:            this fall
Sentence:          Factory owners are buying new machinery at a healthy rate this fall, machine-tool makers say.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-FA
Executing the phrase: this fall
with logic: (this:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: this fall
with logic: (this:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: this fall
with logic: (this:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: this fall
with logic: (this:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: this fall
with logic: (this:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Correct parses:
(this:<s,<r,s>> fall:s ref_time:r) => ((this:<s,<r,s>> fall:s ref_time:r)) => (DATE,1989-FA)
Correct. No update.
Sample processing time 0.0020
854 : ================== [0]
Sample type: TemporalSentence
Phrase:            future
Sentence:          But weak car sales raise questions about future demand from the auto sector.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: future
with logic: future_ref:r
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: future_ref:r
and lexical entries: [future :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0010
855 : ================== [0]
Sample type: TemporalSentence
Phrase:            this week
Sentence:          Southern's Gulf Power unit may plead guilty this week to charges it illegally steered company money to politicians through third parties.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44))
No correct parses. No update.
Sample processing time 0.0020
856 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past year
Sentence:          The tentative pact would resolve part of a broad investigation of the Atlanta-based company in the past year.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0020
857 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          Unisys posted a $648.2 million loss for the third quarter as it moved quickly to take write-offs for various problems and prepare for a turnaround.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
858 : ================== [0]
Sample type: TemporalSentence
Phrase:            aug. 26
Sentence:          In a Securities and Exchange Commission filing, Hewlett-Packard said it now holds 1,384,119 Octel common shares, including 100,000 shares bought from Aug. 26 to Oct. 20 for $23.31 to $24.25 a share.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-08-26
Executing the phrase: aug. 26
with logic: (intersect:<s*,s> august:s 26d:s)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (intersect:<s*,s> august:s 26d:s)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Correct parses:
(intersect:<s*,s> august:s 26d:s) => ((this:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)) => (DATE,1989-08-26)
Correct. No update.
Sample processing time 0.0030
859 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 20
Sentence:          In a Securities and Exchange Commission filing, Hewlett-Packard said it now holds 1,384,119 Octel common shares, including 100,000 shares bought from Aug. 26 to Oct. 20 for $23.31 to $24.25 a share.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-20
Executing the phrase: oct. 20
with logic: (intersect:<s*,s> october:s 20d:s)
and lexical entries: [oct. :- NP : october:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: oct. 20
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 20d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: oct. 20
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 20d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: oct. 20
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 20d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: oct. 20
with logic: (intersect:<s*,s> october:s 20d:s)
and lexical entries: [oct. :- NP : october:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Correct parses:
(intersect:<s*,s> october:s 20d:s) => ((this:<s,<r,s>> (intersect:<s*,s> october:s 20d:s) ref_time:r)) => (DATE,1989-10-20)
Correct. No update.
Sample processing time 0.0030
860 : ================== [0]
Sample type: TemporalSentence
Phrase:            aug. 10 1988
Sentence:          According to the filing, Hewlett-Packard acquired 730,070 common shares from Octel as a result of an Aug. 10, 1988, stock purchase agreement.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-08-10
Executing the phrase: aug. 10 1988
with logic: (intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r)
and lexical entries: [aug. :- NP : august:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s)), 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: aug. 10 1988
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s)), 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: aug. 10 1988
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s)), 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: aug. 10 1988
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s)), 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: aug. 10 1988
with logic: (intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r)
and lexical entries: [aug. :- NP : august:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s)), 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r) => ((intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r)) => (DATE,1988-08-10)
Correct. No update.
Sample processing time 0.0030
861 : ================== [0]
Sample type: TemporalSentence
Phrase:            18 months
Sentence:          That accord also called for Hewlett-Packard to buy 730,070 Octel shares in the open market within 18 months.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P18M
Executing the phrase: 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: 18 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 18:n))
and lexical entries: [18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 18:n) => ((*:<d,<n,d>> months:d 18:n)) => (DURATION,P18M)
Correct. No update.
Sample processing time 0.0030
862 : ================== [0]
Sample type: TemporalSentence
Phrase:            two year
Sentence:          In addition, Hewlett-Packard acquired a two-year option to buy an extra 10%, of which half may be sold directly to Hewlett-Packard by Octel.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 2:n) => ((*:<d,<n,d>> year:d 2:n)) => (DURATION,P2Y)
Correct. No update.
Sample processing time 0.0020
863 : ================== [0]
Sample type: TemporalSentence
Phrase:            this month
Sentence:          The company went public earlier this month, offering 1,745,000 shares of common stock at $15 a share.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0010
864 : ================== [0]
Sample type: TemporalSentence
Phrase:            late yesterday
Sentence:          Rally officials weren't available to comment late yesterday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: late yesterday
with logic: yesterday:r
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: yesterday:r
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0020
865 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year
Sentence:          For the year ended July 2, Rally had net income of $2.4 million, or 34 cents a share, on revenue of $52.9 million.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P1Y
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Correct parses:
year:d => (year:d) => (DURATION,P1Y)
Correct. No update.
Sample processing time 0.0010
866 : ================== [0]
Sample type: TemporalSentence
Phrase:            july 2
Sentence:          For the year ended July 2, Rally had net income of $2.4 million, or 34 cents a share, on revenue of $52.9 million.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-07-02
Executing the phrase: july 2
with logic: (intersect:<s*,s> july:s 2d:s)
and lexical entries: [july :- NP : july:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: july 2
with logic: (previous:<s,<r,s>> (intersect:<s*,s> july:s 2d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: july 2
with logic: (this:<s,<r,s>> (intersect:<s*,s> july:s 2d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: july 2
with logic: (next:<s,<r,s>> (intersect:<s*,s> july:s 2d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: july 2
with logic: (intersect:<s*,s> july:s 2d:s)
and lexical entries: [july :- NP : july:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Correct parses:
(intersect:<s*,s> july:s 2d:s) => ((this:<s,<r,s>> (intersect:<s*,s> july:s 2d:s) ref_time:r)) => (DATE,1989-07-02)
Correct. No update.
Sample processing time 0.0020
867 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Security Pacific Corp. has set its sights on buying its second bank holding company this year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
868 : ================== [0]
Sample type: TemporalSentence
Phrase:            current
Sentence:          Based on the current number of La Jolla shares, that gives the transaction a value of $104 million.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
869 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          As of Sept. 30, the bank had assets of $511 million and deposits of $469 million, Security Pacific said.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-09-30
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> september:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30)
Correct. No update.
Sample processing time 0.0020
870 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier this month
Sentence:          Earlier this month, Security Pacific, which is among the 10 largest bank holding companies in the U.S., completed the acquisition of San Diego-based Southwest Bancorp.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0010
871 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          International said it expects to report net income of 15 cents a share for the third quarter.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
872 : ================== [0]
Sample type: TemporalSentence
Phrase:            mid november
Sentence:          The company said it expects to release third-quarter results in mid-November.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-11
Executing the phrase: mid november
with logic: november:s
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (previous:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (this:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (next:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: november:s
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Correct parses:
november:s => ((next:<s,<r,s>> november:s ref_time:r)) => (DATE,1989-11)
Correct. No update.
Sample processing time 0.0020
873 : ================== [0]
Sample type: TemporalSentence
Phrase:            december
Sentence:          The funeral home and cemetery operator changed from a fiscal year to a calendar year in December.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-12
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Correct parses:
december:s => ((previous:<s,<r,s>> december:s ref_time:r)) => (DATE,1988-12)
Bad violating parse: (december:s, ((this:<s,<r,s>> december:s ref_time:r)) => (DATE,1989-12))
Update: {TEMPORAL_CONTEXT__previous_VBD=1.0, TEMPORAL_CONTEXT__this_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0030
874 : ================== [0]
Sample type: TemporalSentence
Phrase:            the comparable year ago quarter
Sentence:          In the comparable year-ago quarter, the second quarter ended Oct. 31, Service Corp.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-Q2
No correct parses. No update.
Sample processing time 0.0010
875 : ================== [0]
Sample type: TemporalSentence
Phrase:            second quarter
Sentence:          In the comparable year-ago quarter, the second quarter ended Oct. 31, Service Corp.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-Q2
Executing the phrase: second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: second quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: second quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: second quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Bad violating parse: ((nth:<d,<n,s>> quarter:d 2o:n), ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)) => (DATE,1989-Q2))
No correct parses. No update.
Sample processing time 0.0020
876 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 31
Sentence:          In the comparable year-ago quarter, the second quarter ended Oct. 31, Service Corp.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-10-31
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Correct parses:
(intersect:<s*,s> october:s 31d:s) => ((previous:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)) => (DATE,1988-10-31)
Bad violating parse: ((intersect:<s*,s> october:s 31d:s), ((this:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)) => (DATE,1989-10-31))
Update: {TEMPORAL_CONTEXT__previous_VBD=1.0, TEMPORAL_CONTEXT__this_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0020
877 : ================== [0]
Sample type: TemporalSentence
Phrase:            that quarter
Sentence:          Results for that quarter included a $30 million, or 40 cents a share, write-down associated with the consolidation of a facility.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-Q2
No correct parses. No update.
Sample processing time 0.0000
878 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          Dresdner Bank said it will also buy all shares tendered by shareholders on the Paris Stock Exchange at the same price from today through Nov. 17.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0030
879 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 17
Sentence:          Dresdner Bank said it will also buy all shares tendered by shareholders on the Paris Stock Exchange at the same price from today through Nov. 17.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-11-17
Executing the phrase: nov. 17
with logic: (intersect:<s*,s> november:s 17d:s)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (intersect:<s*,s> november:s 17d:s)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Correct parses:
(intersect:<s*,s> november:s 17d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)) => (DATE,1989-11-17)
Correct. No update.
Sample processing time 0.0030
880 : ================== [0]
Sample type: TemporalSentence
Phrase:            jan. 1 1990
Sentence:          In addition, the bank has an option to buy a 30.84% stake in BIP from Societe Generale after Jan. 1, 1990 at 1,015 francs a share.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1990-01-01
Executing the phrase: jan. 1 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r)
and lexical entries: [jan. :- NP : january:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: jan. 1 1990
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: jan. 1 1990
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: jan. 1 1990
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: jan. 1 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r)
and lexical entries: [jan. :- NP : january:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r) => ((intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r)) => (DATE,1990-01-01)
Correct. No update.
Sample processing time 0.0030
881 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          Poughkeepsie also expects to post a one-time charge of $8.3 million, resulting in a net loss for the third quarter.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
882 : ================== [0]
Sample type: TemporalSentence
Phrase:            aug. 21
Sentence:          The thrift announced the plan Aug. 21.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-08-21
Executing the phrase: aug. 21
with logic: (intersect:<s*,s> august:s 21d:s)
and lexical entries: [aug. :- NP : august:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: aug. 21
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 21d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: aug. 21
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 21d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: aug. 21
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 21d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: aug. 21
with logic: (intersect:<s*,s> august:s 21d:s)
and lexical entries: [aug. :- NP : august:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Correct parses:
(intersect:<s*,s> august:s 21d:s) => ((this:<s,<r,s>> (intersect:<s*,s> august:s 21d:s) ref_time:r)) => (DATE,1989-08-21)
Correct. No update.
Sample processing time 0.0010
883 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          Additionally, the bank is increasing its loan-loss reserves for the third quarter by $8.5 million before taxes.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
884 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year earlier third quarter
Sentence:          In the year-earlier third quarter, Poughkeepsie Savings had net income of $2.8 million, or 77 cents a share.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0010
885 : ================== [0]
Sample type: TemporalSentence
Phrase:            june
Sentence:          Poughkeepsie said it is continuing to try to sell itself, under a June agreement with a dissident-shareholder group.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-06
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (this:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (next:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Correct parses:
june:s => ((this:<s,<r,s>> june:s ref_time:r)) => (DATE,1989-06)
Correct. No update.
Sample processing time 0.0020
886 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 1
Sentence:          The bank also said its effort would continue past the Nov. 1 deadline set in that agreement and that the litigation between the two sides might resume as a result.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: nov. 1
with logic: (intersect:<s*,s> november:s 1d:s)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: nov. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: nov. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: nov. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: nov. 1
with logic: (intersect:<s*,s> november:s 1d:s)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Correct parses:
(intersect:<s*,s> november:s 1d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)) => (DATE,1989-11-01)
Bad violating parse: ((intersect:<s*,s> november:s 1d:s), ((previous:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)) => (DATE,1988-11-01))
Update: {TEMPORAL_CONTEXT__nextMD_VB=1.0, TEMPORAL_CONTEXT__previousMD_VB=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0}
Sample processing time 0.0020
887 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          GM sought U.S. antitrust clearance last week to purchase more than $15 million worth of Jaguar shares but doesn't own any yet, according to GM officials here and at the company's Detroit headquarters.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-W42
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Correct parses:
(previous:<d,<r,s>> week:d ref_time:r) => ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42)
Correct. No update.
Sample processing time 0.0020
888 : ================== [0]
Sample type: TemporalSentence
Phrase:            yet
Sentence:          GM sought U.S. antitrust clearance last week to purchase more than $15 million worth of Jaguar shares but doesn't own any yet, according to GM officials here and at the company's Detroit headquarters.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: yet
with logic: present_ref:r
and lexical entries: [yet :- NP : present_ref:r]
Executing the phrase: yet
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [yet :- NP : present_ref:r]
Executing the phrase: yet
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [yet :- NP : present_ref:r]
Executing the phrase: yet
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [yet :- NP : present_ref:r]
Executing the phrase: yet
with logic: present_ref:r
and lexical entries: [yet :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
889 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          The No. 1 U.S. auto maker then wrote Jaguar that it intends "to go to that 15%" level once it wins the U.S. clearance to go beyond $15 million, a Jaguar spokesman said yesterday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0040
890 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          The GM move follows Tuesday's declaration by Ford, which holds an unwelcome 12.45% stake in Jaguar, that it is prepared to bid for the entire company.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-24
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Correct parses:
tuesday:s => ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1989-10-24)
Correct. No update.
Sample processing time 0.0010
891 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Speculative investors, betting on an imminent clash between Ford and GM, pushed up Jaguar's share price five pence (eight U.S. cents) to a near-record 720 pence ($11.60) in late trading on London's stock exchange yesterday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0040
892 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          Since Tuesday, the shares have gained nearly 4%.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-24
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Correct parses:
tuesday:s => ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1989-10-24)
Correct. No update.
Sample processing time 0.0020
893 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          "We will not go over a certain level," said David N. McCammon, Ford's vice president for finance, at a news conference yesterday in Dearborn, Mich. "There's some price at which we'd stop bidding."
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0030
894 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 31 1990
Sentence:          And powerful political pressures may convince the Conservative government to keep its so-called golden share, which limits any individual holding to 15%, until the restriction expires on Dec. 31, 1990.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1990-12-31
Executing the phrase: dec. 31 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: dec. 31 1990
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: dec. 31 1990
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: dec. 31 1990
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: dec. 31 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r) => ((intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r)) => (DATE,1990-12-31)
Correct. No update.
Sample processing time 0.0040
895 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next 14 months
Sentence:          "I really don't see the government doing something that Jaguar doesn't want over the next 14 months," said Kenneth Warren, a Conservative member of Parliament and chairman of the Select Committee on Trade and Industry in Britain's House of Commons.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P14M
Executing the phrase: the next 14 months
with logic: (*:<d,<n,d>> months:d 14:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (*:<d,<n,d>> months:d 14:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (*:<d,<n,d>> months:d 14:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (*:<d,<n,d>> months:d 14:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 14:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Correct parses:
(next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r) => ((next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r)) => (DURATION,P14M)
Correct. No update.
Sample processing time 0.0060
896 : ================== [0]
Sample type: TemporalSentence
Phrase:            1984
Sentence:          The government retained the single share after selling its stake in Jaguar in 1984 -- part of a nationalistic practice of protecting former government-owned enterprises to deflect criticism of privatization.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1984
Executing the phrase: 1984
with logic: 1984:r
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (previous:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (this:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (next:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: 1984:r
and lexical entries: [1984 :- NP : 1984:r]
Correct parses:
1984:r => (1984:r) => (DATE,1984)
Correct. No update.
Sample processing time 0.0020
897 : ================== [0]
Sample type: TemporalSentence
Phrase:            current
Sentence:          Ford might succeed because many shareholders are speculators keen for a full bid or institutional investors unhappy over Jaguar management's handling of its current financial difficulties.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
898 : ================== [0]
Sample type: TemporalSentence
Phrase:            1988
Sentence:          It has relinquished a golden share only once before -- during British Petroleum Co.'s #2.5 billion ( $4 billion ) takeover of Britoil PLC in 1988.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Correct parses:
1988:r => (1988:r) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
899 : ================== [0]
Sample type: TemporalSentence
Phrase:            this week
Sentence:          This week, the U.S. auto giant paid for 10 House of Commons members and two House of Lords members to fly to Detroit and tour its operations there.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
No correct parses. No update.
Sample processing time 0.0010
900 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          While the visit was unrelated to Jaguar, GM Chairman Roger Smith answered the legislators' questions about it over lunch Tuesday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-24
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Correct parses:
tuesday:s => ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1989-10-24)
Correct. No update.
Sample processing time 0.0030
901 : ================== [0]
Sample type: TemporalSentence
Phrase:            last april
Sentence:          Starpointe holders, who approved the plan last April, will receive $21 in cash a share, or a total $63 million.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-04
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Correct parses:
(previous:<s,<r,s>> april:s ref_time:r) => ((previous:<s,<r,s>> april:s ref_time:r)) => (DATE,1989-04)
Correct. No update.
Sample processing time 0.0020
902 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          The FDIC cleared the move yesterday, and the banks must wait at least 30 days before closing the purchase.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0010
903 : ================== [0]
Sample type: TemporalSentence
Phrase:            at least 30 days
Sentence:          The FDIC cleared the move yesterday, and the banks must wait at least 30 days before closing the purchase.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P30D
Executing the phrase: at least 30 days
with logic: (*:<d,<n,d>> days:d 30:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), days :- NP : days:d]
Executing the phrase: at least 30 days
with logic: (*:<d,<n,d>> days:d 30:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), days :- NP : days:d]
Executing the phrase: at least 30 days
with logic: (*:<d,<n,d>> days:d 30:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), days :- NP : days:d]
Executing the phrase: at least 30 days
with logic: (*:<d,<n,d>> days:d 30:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), days :- NP : days:d]
Executing the phrase: at least 30 days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 30:n))
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), days :- NP : days:d]
Correct parses:
(*:<d,<n,d>> days:d 30:n) => ((*:<d,<n,d>> days:d 30:n)) => (DURATION,P30D)
Correct. No update.
Sample processing time 0.0030
904 : ================== [0]
Sample type: TemporalSentence
Phrase:            august 1988
Sentence:          The thrifts agreed to the transaction in August 1988.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-08
Executing the phrase: august 1988
with logic: (intersect:<s*,s> 1988:r august:s)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (intersect:<s*,s> 1988:r august:s)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Correct parses:
(intersect:<s*,s> 1988:r august:s) => ((intersect:<s*,s> 1988:r august:s)) => (DATE,1988-08)
Correct. No update.
Sample processing time 0.0020
905 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 7
Sentence:          AEP INDUSTRIES Inc. directors authorized a 3-for-2 split of the common, payable Dec. 7 to stock of record Nov. 22.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-12-07
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Correct parses:
(intersect:<s*,s> december:s 7d:s) => ((next:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)) => (DATE,1989-12-07)
Bad violating parse: ((intersect:<s*,s> december:s 7d:s), ((previous:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)) => (DATE,1988-12-07))
Update: {TEMPORAL_CONTEXT__next_VBD=1.0, TEMPORAL_CONTEXT__previous_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0}
Sample processing time 0.0030
906 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 22
Sentence:          AEP INDUSTRIES Inc. directors authorized a 3-for-2 split of the common, payable Dec. 7 to stock of record Nov. 22.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-11-22
Executing the phrase: nov. 22
with logic: (intersect:<s*,s> november:s 22d:s)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (intersect:<s*,s> november:s 22d:s)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Correct parses:
(intersect:<s*,s> november:s 22d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)) => (DATE,1989-11-22)
Bad violating parse: ((intersect:<s*,s> november:s 22d:s), ((previous:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)) => (DATE,1988-11-22))
Update: {TEMPORAL_CONTEXT__next_VBD=1.0, TEMPORAL_CONTEXT__previous_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0}
Sample processing time 0.0030
907 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          In national over-the-counter trading yesterday, AEP shares closed at $21.25, down 50 cents.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0010
908 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          said net income for the third quarter fell 6% to $20.6 million, or 98 cents a share, from $22 million, or $1.03 a share.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Bad violating parse: ((nth:<d,<n,s>> quarter:d 3o:n), ((next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1990-Q3))
Update: {TEMPORAL_CONTEXT__next_VBD=-1.0, TEMPORAL_CONTEXT__this_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0030
909 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year earlier quarter
Sentence:          In the year-earlier quarter, the tax credit was $3.3 million.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0010
910 : ================== [0]
Sample type: TemporalSentence
Phrase:            last june
Sentence:          last June.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-06
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Correct parses:
(previous:<s,<r,s>> june:s ref_time:r) => ((previous:<s,<r,s>> june:s ref_time:r)) => (DATE,1989-06)
Correct. No update.
Sample processing time 0.0010
911 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier this month
Sentence:          Norton announced earlier this month that it was exploring the possible sale of all or part of Eastman Christensen.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0010
912 : ================== [0]
Sample type: TemporalSentence
Phrase:            the nine months
Sentence:          For the nine months, Norton had net of $81.2 million, or $3.87 a share, and a tax credit of $4.4 million.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0020
913 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year earlier period
Sentence:          In the year-earlier period, the company had net of $77.2 million, or $3.68 a share, and a tax credit of $7.7 million.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P9M
No correct parses. No update.
Sample processing time 0.0010
914 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 1
Sentence:          CAMBREX Corp., Bayonne, N.J., declared its initial quarterly of five cents a share, payable Dec. 1 to stock of record Nov. 10.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-12-01
Executing the phrase: dec. 1
with logic: (intersect:<s*,s> december:s 1d:s)
and lexical entries: [dec. :- NP : december:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: dec. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 1d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: dec. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 1d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: dec. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 1d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: dec. 1
with logic: (intersect:<s*,s> december:s 1d:s)
and lexical entries: [dec. :- NP : december:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Correct parses:
(intersect:<s*,s> december:s 1d:s) => ((next:<s,<r,s>> (intersect:<s*,s> december:s 1d:s) ref_time:r)) => (DATE,1989-12-01)
Correct. No update.
Sample processing time 0.0020
915 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 10
Sentence:          CAMBREX Corp., Bayonne, N.J., declared its initial quarterly of five cents a share, payable Dec. 1 to stock of record Nov. 10.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-11-10
Executing the phrase: nov. 10
with logic: (intersect:<s*,s> november:s 10d:s)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (intersect:<s*,s> november:s 10d:s)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Correct parses:
(intersect:<s*,s> november:s 10d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)) => (DATE,1989-11-10)
Correct. No update.
Sample processing time 0.0020
916 : ================== [0]
Sample type: TemporalSentence
Phrase:            1989
Sentence:          Although profits were " squeezed" in 1989, mainly as a result of higher raw-material costs, the company said it is confident about future earnings and cash flow for 1990 and beyond.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Correct parses:
1989:r => (1989:r) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
917 : ================== [0]
Sample type: TemporalSentence
Phrase:            1990 and beyond
Sentence:          Although profits were " squeezed" in 1989, mainly as a result of higher raw-material costs, the company said it is confident about future earnings and cash flow for 1990 and beyond.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1990
Executing the phrase: 1990 and beyond
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r, and beyond :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1990 and beyond
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r, and beyond :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1990 and beyond
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r, and beyond :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1990 and beyond
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r, and beyond :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1990 and beyond
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r, and beyond :- NP\NP : (lambda $0:r $0)]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0040
918 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          In national over-the-counter trading yesterday, Cambrex shares rose 50 cents to close at $13 a share.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0010
919 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          Last week alone, an eye-popping $1.6 billion flowed out of the junk funds, or nearly 5% of their total assets, according to estimates by Dalbar Financial Services Inc., a Boston research firm.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
No correct parses. No update.
Sample processing time 0.0020
920 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past two months
Sentence:          In the past two months the nation's 88 junk funds have lost a total of about $6 billion -- more than 15% of assets -- through sales or transfers of junk-fund shares, Dalbar says.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P2M
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 2:n) => ((*:<d,<n,d>> months:d 2:n)) => (DURATION,P2M)
Correct. No update.
Sample processing time 0.0020
921 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past two months
Sentence:          Their junk funds combined have had net outflows totaling nearly $500 million, or about 13% of their junk fund assets, in the past two months.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P2M
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 2:n) => ((*:<d,<n,d>> months:d 2:n)) => (DURATION,P2M)
Correct. No update.
Sample processing time 0.0040
922 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent
Sentence:          Some fund managers say negative publicity has exacerbated investors' concern about recent declines in junk-bond prices.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
923 : ================== [0]
Sample type: TemporalSentence
Phrase:            the weeks ahead
Sentence:          If the heavy outflows continue, fund managers will face increasing pressure to sell off some of their junk to pay departing investors in the weeks ahead.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          PXW
Executing the phrase: the weeks ahead
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, ahead :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the weeks ahead
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, ahead :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the weeks ahead
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, ahead :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the weeks ahead
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, ahead :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the weeks ahead
with logic: (temporal_ref:<d,s> weeks:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, ahead :- NP\NP : (lambda $0:d $0)]
Correct parses:
weeks:d => (weeks:d) => (DURATION,PXW)
Correct. No update.
Sample processing time 0.0030
924 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent years
Sentence:          But tremors are likely in the junk-bond market, which has helped to finance the takeover boom of recent years.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0030
925 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past two months
Sentence:          The $1.5 billion Fidelity High Income Fund has had a net outflow of about $150 million in the past two months.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P2M
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 2:n) => ((*:<d,<n,d>> months:d 2:n)) => (DURATION,P2M)
Correct. No update.
Sample processing time 0.0030
926 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          About $60 million streamed out last week alone, double the level of the week following last month's Campeau Corp. credit squeeze.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
No correct parses. No update.
Sample processing time 0.0020
927 : ================== [0]
Sample type: TemporalSentence
Phrase:            week
Sentence:          About $60 million streamed out last week alone, double the level of the week following last month's Campeau Corp. credit squeeze.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [week :- NP : week:d]
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
Bad violating parse: (week:d, (week:d) => (DURATION,P1W))
No correct parses. No update.
Sample processing time 0.0020
928 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          About $60 million streamed out last week alone, double the level of the week following last month's Campeau Corp. credit squeeze.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-09
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0020
929 : ================== [0]
Sample type: TemporalSentence
Phrase:            every month
Sentence:          He adds: "Our fund has had {positive} net sales every month for the last three years -- until this month."
ref_time:          1989-10-27
Gold type:         SET
gold val:          P1M
Executing the phrase: every month
with logic: month:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: every month
with logic: month:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: every month
with logic: month:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: every month
with logic: month:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: every month
with logic: (temporal_ref:<d,s> month:d)
and lexical entries: [every :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
Bad violating parse: (month:d, (month:d) => (DURATION,P1M))
No correct parses. No update.
Sample processing time 0.0030
930 : ================== [0]
Sample type: TemporalSentence
Phrase:            the last three years
Sentence:          He adds: "Our fund has had {positive} net sales every month for the last three years -- until this month."
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P3Y
Executing the phrase: the last three years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the last three years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the last three years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the last three years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the last three years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)) => (DURATION,P3Y)
Correct. No update.
Sample processing time 0.0030
931 : ================== [0]
Sample type: TemporalSentence
Phrase:            this month
Sentence:          He adds: "Our fund has had {positive} net sales every month for the last three years -- until this month."
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0030
932 : ================== [0]
Sample type: TemporalSentence
Phrase:            early september
Sentence:          Vanguard's $1 billion High Yield Bond Portfolio has seen $161 million flow out since early September; $14 million of that seeped out Friday Oct. 13 alone.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-09
Executing the phrase: early september
with logic: september:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: september:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Correct parses:
september:s => ((this:<s,<r,s>> september:s ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0020
933 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday oct. 13
Sentence:          Vanguard's $1 billion High Yield Bond Portfolio has seen $161 million flow out since early September; $14 million of that seeped out Friday Oct. 13 alone.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-13
Executing the phrase: friday oct. 13
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Bad violating parse: ((intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s), ((this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s) ref_time:r)) => (DATE,1989-10-27))
Bad violating parse: ((intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s), ((this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s) ref_time:r)) => (DATE,1989-10-27))
No correct parses. No update.
Sample processing time 0.0070
934 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          The fund now holds a cash position of about 15%.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
935 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past two months
Sentence:          At the $932 million T. Rowe Price High Yield Fund, investors yanked out about $182 million in the past two months.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P2M
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 2:n) => ((*:<d,<n,d>> months:d 2:n)) => (DURATION,P2M)
Correct. No update.
Sample processing time 0.0040
936 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Those withdrawals, most of which were transferred to other T. Rowe Price funds, followed little change in the fund's sales picture this year through August. "
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
937 : ================== [0]
Sample type: TemporalSentence
Phrase:            august
Sentence:          Those withdrawals, most of which were transferred to other T. Rowe Price funds, followed little change in the fund's sales picture this year through August. "
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-08
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (this:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (next:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Correct parses:
august:s => ((this:<s,<r,s>> august:s ref_time:r)) => (DATE,1989-08)
Correct. No update.
Sample processing time 0.0020
938 : ================== [0]
Sample type: TemporalSentence
Phrase:            the last two months
Sentence:          The last two months have been the whole ball game," says Steven Norwitz, a vice president.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P2M
Executing the phrase: the last two months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the last two months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the last two months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the last two months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the last two months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r)) => (DURATION,P2M)
Correct. No update.
Sample processing time 0.0020
939 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Junk-fund holders have barely broken even this year, as fat interest payments barely managed to offset declining prices.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0010
940 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 19
Sentence:          Through Oct. 19, high-yield funds had an average 0.85% total return (the price change plus dividends on fund shares), according to Lipper Analytical Services Inc.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-19
Executing the phrase: oct. 19
with logic: (intersect:<s*,s> october:s 19d:s)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (intersect:<s*,s> october:s 19d:s)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Correct parses:
(intersect:<s*,s> october:s 19d:s) => ((this:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)) => (DATE,1989-10-19)
Correct. No update.
Sample processing time 0.0020
941 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Fidelity's junk fund has fallen 2.08% this year through Oct. 19, Lipper says; the Vanguard fund rose 1.84%; and the T. Rowe Price fund edged up 0.66%.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
942 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 19
Sentence:          Fidelity's junk fund has fallen 2.08% this year through Oct. 19, Lipper says; the Vanguard fund rose 1.84%; and the T. Rowe Price fund edged up 0.66%.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-19
Executing the phrase: oct. 19
with logic: (intersect:<s*,s> october:s 19d:s)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (intersect:<s*,s> october:s 19d:s)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Correct parses:
(intersect:<s*,s> october:s 19d:s) => ((this:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)) => (DATE,1989-10-19)
Correct. No update.
Sample processing time 0.0020
943 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          People who remain in junk funds now could get hit again, some analysts and fund specialists say.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
944 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent weeks and months
Sentence:          Many funds in recent weeks and months have been selling their highest-quality junk issues, such as RJR Nabisco, to raise cash to meet expected redemptions.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recent weeks and months
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r, weeks and months :- NP\NP : (lambda $0:r $0)]
Executing the phrase: recent weeks and months
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r, weeks and months :- NP\NP : (lambda $0:r $0)]
Executing the phrase: recent weeks and months
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r, weeks and months :- NP\NP : (lambda $0:r $0)]
Executing the phrase: recent weeks and months
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r, weeks and months :- NP\NP : (lambda $0:r $0)]
Executing the phrase: recent weeks and months
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r, weeks and months :- NP\NP : (lambda $0:r $0)]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
945 : ================== [0]
Sample type: TemporalSentence
Phrase:            last june
Sentence:          The warning by the U.S. attorney's office follows two decisions by the U.S. Supreme Court last June.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-06
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Correct parses:
(previous:<s,<r,s>> june:s ref_time:r) => ((previous:<s,<r,s>> june:s ref_time:r)) => (DATE,1989-06)
Correct. No update.
Sample processing time 0.0020
946 : ================== [0]
Sample type: TemporalSentence
Phrase:            soon
Sentence:          Mr. Antar is being investigated by a federal grand jury in Newark, where prosecutors have told him that they may soon seek an indictment on racketeering and securities fraud charges.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0030
947 : ================== [0]
Sample type: TemporalSentence
Phrase:            this week
Sentence:          According to individuals familiar with Mr. Antar's case, prosecutors issued their warning this week after one of Mr. Antar's attorneys asked whether legal fees might be subject to seizure.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
Bad violating parse: ((this:<d,<r,s>> week:d ref_time:r), ((this:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W43))
No correct parses. No update.
Sample processing time 0.0020
948 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent
Sentence:          In a letter, prosecutors told Mr. Antar's lawyers that because of the recent Supreme Court rulings, they could expect that any fees collected from Mr. Antar may be seized.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
949 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          Mr. Antar was charged last month in a civil suit filed in federal court in Newark by the Securities and Exchange Commission.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-09
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0020
950 : ================== [0]
Sample type: TemporalSentence
Phrase:            a three year period
Sentence:          In that suit, the SEC accused Mr. Antar of engaging in a "massive financial fraud" to overstate the earnings of Crazy Eddie, Edison, N.J., over a three-year period.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P3Y
No correct parses. No update.
Sample processing time 0.0010
951 : ================== [0]
Sample type: TemporalSentence
Phrase:            1985
Sentence:          Mr. Antar, the SEC said, made more than $60 million from the sale of his shares between 1985 and 1987.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1985
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (previous:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (this:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (next:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Correct parses:
1985:r => (1985:r) => (DATE,1985)
Correct. No update.
Sample processing time 0.0020
952 : ================== [0]
Sample type: TemporalSentence
Phrase:            1987
Sentence:          Mr. Antar, the SEC said, made more than $60 million from the sale of his shares between 1985 and 1987.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1987
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (previous:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (this:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (next:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Correct parses:
1987:r => (1987:r) => (DATE,1987)
Correct. No update.
Sample processing time 0.0030
953 : ================== [0]
Sample type: TemporalSentence
Phrase:            sometime next year
Sentence:          Computer experts familiar with the flaws, found in Intel's 80486 chip, say the defects don't affect the average user and are likely to be cleared up before most computers using the chip as their " brains " appear on the market sometime next year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1990-XX-XX
No correct parses. No update.
Sample processing time 0.0000
954 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          Intel said that last week a customer discovered two flaws in its 80486 microprocessor chip's "floating-point unit", a set of circuits that do certain calculations.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
No correct parses. No update.
Sample processing time 0.0020
955 : ================== [0]
Sample type: TemporalSentence
Phrase:            friday
Sentence:          On Friday, Intel began notifying customers about the bugs which cause the chip to give wrong answers for some mathematical calculations.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Correct parses:
friday:s => ((this:<s,<r,s>> friday:s ref_time:r)) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0010
956 : ================== [0]
Sample type: TemporalSentence
Phrase:            last week
Sentence:          Hewlett announced last week that it planned to ship a computer based on the 486 chip early next year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
Bad violating parse: ((previous:<d,<r,s>> week:d ref_time:r), ((previous:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W42))
No correct parses. No update.
Sample processing time 0.0020
957 : ================== [0]
Sample type: TemporalSentence
Phrase:            early next year
Sentence:          Hewlett announced last week that it planned to ship a computer based on the 486 chip early next year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1990
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0020
958 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Nonetheless, concern about the chip may have been responsible for a decline of 87.5 cents in Intel's stock to $32 a share yesterday in over-the-counter trading, on volume of 3,609,800 shares, and partly responsible for a drop in Compaq's stock in New York Stock Exchange composite trading on Wednesday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0030
959 : ================== [0]
Sample type: TemporalSentence
Phrase:            wednesday
Sentence:          Nonetheless, concern about the chip may have been responsible for a decline of 87.5 cents in Intel's stock to $32 a share yesterday in over-the-counter trading, on volume of 3,609,800 shares, and partly responsible for a drop in Compaq's stock in New York Stock Exchange composite trading on Wednesday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Correct parses:
wednesday:s => ((previous:<s,<r,s>> wednesday:s ref_time:r)) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0040
960 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Yesterday, Compaq plunged further, closing at $100 a share, off $8.625 a share, on volume of 2,633,700 shares.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0020
961 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Most of Compaq's decline is being attributed to a third-quarter earnings report that came in at the low end of analysts' expectations.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
962 : ================== [0]
Sample type: TemporalSentence
Phrase:            next week
Sentence:          Intel said it had corrected the problems and would start producing bugless chips next week.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-WXX
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Bad violating parse: ((next:<d,<r,s>> week:d ref_time:r), ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44))
Bad violating parse: ((next:<d,<r,s>> week:d ref_time:r), ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44))
Bad violating parse: ((next:<d,<r,s>> week:d ref_time:r), ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44))
Bad violating parse: ((next:<d,<r,s>> week:d ref_time:r), ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44))
Bad violating parse: ((next:<d,<r,s>> week:d ref_time:r), ((next:<d,<r,s>> week:d ref_time:r)) => (DATE,1989-W44))
No correct parses. No update.
Sample processing time 0.0020
963 : ================== [0]
Sample type: TemporalSentence
Phrase:            late september
Sentence:          In late September, IBM began shipping a plug-in card that converts its PS/2 model 70-A21 from a 80386 machine to an 80486 machine.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-09
Executing the phrase: late september
with logic: september:s
and lexical entries: [late :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: late september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: late september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: late september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: late september
with logic: september:s
and lexical entries: [late :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Correct parses:
september:s => ((this:<s,<r,s>> september:s ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0010
964 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          An IBM spokeswoman said the company told customers Monday about the bugs and temporarily stopped shipping the product.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-23
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Correct parses:
monday:s => ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1989-10-23)
Correct. No update.
Sample processing time 0.0020
965 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 6
Sentence:          Compaq, which said it discovered the bugs, still plans to announce new 486 products on Nov. 6.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-11-06
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Correct parses:
(intersect:<s*,s> november:s 6d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)) => (DATE,1989-11-06)
Correct. No update.
Sample processing time 0.0020
966 : ================== [0]
Sample type: TemporalSentence
Phrase:            several years
Sentence:          Intel's 80486 chip is the Corvette of Intel's microprocessors, a super-fast, super-expensive chip that only the most power-hungry computer users are likely to buy for at least several years.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          PXY
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Correct parses:
years:d => (years:d) => (DURATION,PXY)
Correct. No update.
Sample processing time 0.0040
967 : ================== [0]
Sample type: TemporalSentence
Phrase:            last april
Sentence:          Unveiled last April, the chip crams 1.2 million transistors on a sliver of silicon, more than four times as many as on Intel's earlier model, 80386.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-04
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Correct parses:
(previous:<s,<r,s>> april:s ref_time:r) => ((previous:<s,<r,s>> april:s ref_time:r)) => (DATE,1989-04)
Correct. No update.
Sample processing time 0.0010
968 : ================== [0]
Sample type: TemporalSentence
Phrase:            early next year
Sentence:          Big personal computer makers and many makers of engineering workstations are developing 486-based machines, which are expected to reach the market early next year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1990
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
969 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next few years
Sentence:          "It's going to be the leading edge technology in personal computers for the next few years.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          PXY
Executing the phrase: the next few years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Correct parses:
years:d => (years:d) => (DURATION,PXY)
Correct. No update.
Sample processing time 0.0030
970 : ================== [0]
Sample type: TemporalSentence
Phrase:            months
Sentence:          The completion of the merger agreement follows months of twists and turns.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          PXM
Executing the phrase: months
with logic: months:d
and lexical entries: [months :- NP : months:d]
Executing the phrase: months
with logic: months:d
and lexical entries: [months :- NP : months:d]
Executing the phrase: months
with logic: months:d
and lexical entries: [months :- NP : months:d]
Executing the phrase: months
with logic: months:d
and lexical entries: [months :- NP : months:d]
Executing the phrase: months
with logic: months:d
and lexical entries: [months :- NP : months:d]
Correct parses:
months:d => (months:d) => (DURATION,PXM)
Correct. No update.
Sample processing time 0.0020
971 : ================== [0]
Sample type: TemporalSentence
Phrase:            january
Sentence:          In January, American Medical brought in a new chief executive officer, Richard A. Gilleland, 45, who will remain as chairman, president and chief executive.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-01
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Correct parses:
january:s => ((this:<s,<r,s>> january:s ref_time:r)) => (DATE,1989-01)
Correct. No update.
Sample processing time 0.0010
972 : ================== [0]
Sample type: TemporalSentence
Phrase:            a few days
Sentence:          A few days later, American Medical announced sharply lower earnings, taking charges of $24 million for insurance reserves and canceled real estate leases.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          PXD
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: (temporal_ref:<d,s> days:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Correct parses:
days:d => (days:d) => (DURATION,PXD)
Correct. No update.
Sample processing time 0.0010
973 : ================== [0]
Sample type: TemporalSentence
Phrase:            march
Sentence:          In March, American Medical received a $24-a-share offer to take the company private from an investor group including large holder M. Lee Pearce.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-03
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (previous:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (this:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (next:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Correct parses:
march:s => ((this:<s,<r,s>> march:s ref_time:r)) => (DATE,1989-03)
Correct. No update.
Sample processing time 0.0010
974 : ================== [0]
Sample type: TemporalSentence
Phrase:            the following month
Sentence:          The following month, the company put itself up for sale.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-04
Executing the phrase: the following month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: the following month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: the following month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: the following month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: the following month
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> month:d 1:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Correct parses:
(*:<d,<n,d>> month:d 1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> month:d 1:n))) => (DATE,1989-04)
Bad violating parse: ((*:<d,<n,d>> month:d 1:n), ((*:<d,<n,d>> month:d 1:n)) => (DURATION,P1M))
Bad violating parse: ((*:<d,<n,d>> month:d 1:n), ((*:<d,<n,d>> month:d 1:n)) => (DURATION,P1M))
Bad violating parse: ((*:<d,<n,d>> month:d 1:n), ((*:<d,<n,d>> month:d 1:n)) => (DURATION,P1M))
Bad violating parse: ((*:<d,<n,d>> month:d 1:n), ((*:<d,<n,d>> month:d 1:n)) => (DURATION,P1M))
Update: {TEMPORAL_CONTEXT_temporal_ref_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nonethe following month=-1.0, TEMPORAL_REFERENCE_temporal_reftemporal_refthe following month=1.0, TEMPORAL_TYPE_d=-1.0, TEMPORAL_TYPE_s=1.0}
Sample processing time 0.0020
975 : ================== [0]
Sample type: TemporalSentence
Phrase:            early this month
Sentence:          Then, after extending its offer four times waiting for a congressional tax ruling, IMA early this month lowered its offer to $26.50 a share amid turbulence in the junk bond market.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10
Executing the phrase: early this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: early this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: early this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: early this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: early this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0030
976 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          But they never materialized and IMA completed the purchase yesterday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0020
977 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past two quarters
Sentence:          Norwood, Mass.-based Phoenix, a once-high-flying maker of software for personal computers, has had substantial losses in the past two quarters.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P2Q
Executing the phrase: the past two quarters
with logic: (*:<d,<n,d>> quarters:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), quarters :- NP : quarters:d]
Executing the phrase: the past two quarters
with logic: (*:<d,<n,d>> quarters:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), quarters :- NP : quarters:d]
Executing the phrase: the past two quarters
with logic: (*:<d,<n,d>> quarters:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), quarters :- NP : quarters:d]
Executing the phrase: the past two quarters
with logic: (*:<d,<n,d>> quarters:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), quarters :- NP : quarters:d]
Executing the phrase: the past two quarters
with logic: (*:<d,<n,d>> quarters:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), quarters :- NP : quarters:d]
Correct parses:
(*:<d,<n,d>> quarters:d 2:n) => ((*:<d,<n,d>> quarters:d 2:n)) => (DURATION,P2Q)
Correct. No update.
Sample processing time 0.0040
978 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          Its stock, which was as high as $18.75 a share, has been trading under $4 a share recently.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
979 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Yesterday it closed at $4.375 a share, up $1.125, in national over-the-counter trading.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0010
980 : ================== [0]
Sample type: TemporalSentence
Phrase:            the beginning of october
Sentence:          Also involved in the group is Robert F. Angelo, formerly Phoenix's senior vice president, field operations, who left Phoenix at the beginning of October.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10
No correct parses. No update.
Sample processing time 0.0010
981 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 9
Sentence:          The record date is Nov. 9.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-11-09
Executing the phrase: nov. 9
with logic: (intersect:<s*,s> november:s 9d:s)
and lexical entries: [nov. :- NP : november:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: nov. 9
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 9d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: nov. 9
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 9d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: nov. 9
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 9d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: nov. 9
with logic: (intersect:<s*,s> november:s 9d:s)
and lexical entries: [nov. :- NP : november:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Correct parses:
(intersect:<s*,s> november:s 9d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 9d:s) ref_time:r)) => (DATE,1989-11-09)
Correct. No update.
Sample processing time 0.0010
982 : ================== [0]
Sample type: TemporalSentence
Phrase:            currently
Sentence:          Hudson's Bay said that Woodbridge Co., which currently holds about 77% of the ordinary shares, will subscribe for all the shares to which it is entitled and for any shares that aren't otherwise taken up.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
983 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 31
Sentence:          Hudson's Bay said it will redeem 9.5 million Series H preferred shares on Oct. 31 at a price of C$27.75 each.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-31
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Correct parses:
(intersect:<s*,s> october:s 31d:s) => ((next:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)) => (DATE,1989-10-31)
Correct. No update.
Sample processing time 0.0020
984 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          The move was approved at a special shareholders' meeting yesterday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0020
985 : ================== [0]
Sample type: TemporalSentence
Phrase:            annually
Sentence:          Gary Lukassen, chief financial officer, said redemption of the preferred shares, originally issued at C$25 each, will eliminate dividend payments of C$17.9 million annually.
ref_time:          1989-10-27
Gold type:         SET
gold val:          XXXX
No correct parses. No update.
Sample processing time 0.0000
986 : ================== [0]
Sample type: TemporalSentence
Phrase:            today
Sentence:          said management would recommend to its board today that its common stock dividend be reinstated at a "modest level" later this year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-27
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Correct parses:
today:r => (today:r) => (DATE,1989-10-27)
Correct. No update.
Sample processing time 0.0010
987 : ================== [0]
Sample type: TemporalSentence
Phrase:            later this year
Sentence:          said management would recommend to its board today that its common stock dividend be reinstated at a "modest level" later this year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-11-01
Executing the phrase: later this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: later this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: later this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: later this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: later this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Bad violating parse: ((this:<d,<r,s>> year:d ref_time:r), ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989))
Bad violating parse: ((this:<d,<r,s>> year:d ref_time:r), ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989))
Bad violating parse: ((this:<d,<r,s>> year:d ref_time:r), ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989))
Bad violating parse: ((this:<d,<r,s>> year:d ref_time:r), ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989))
Bad violating parse: ((this:<d,<r,s>> year:d ref_time:r), ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989))
No correct parses. No update.
Sample processing time 0.0040
988 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter of 1984
Sentence:          The Dearborn, Mich., energy company stopped paying a dividend in the third quarter of 1984 because of troubles at its Midland nuclear plant.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1984-Q3
No correct parses. No update.
Sample processing time 0.0010
989 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          In addition, CMS reported third-quarter net of $68.2 million, or 83 cents a share, up from $66.8 million, or 81 cents a share, a year ago.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0010
990 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          In addition, CMS reported third-quarter net of $68.2 million, or 83 cents a share, up from $66.8 million, or 81 cents a share, a year ago.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0030
991 : ================== [0]
Sample type: TemporalSentence
Phrase:            currently
Sentence:          Home Nutritional currently has 10 million shares outstanding.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
992 : ================== [0]
Sample type: TemporalSentence
Phrase:            tuesday
Sentence:          But sources said he will be urging his allies to boost their stakes in Navigation Mixte, which is being traded in London and is to resume trading in Paris Tuesday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-31
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Correct parses:
tuesday:s => ((next:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1989-10-31)
Bad violating parse: (tuesday:s, ((previous:<s,<r,s>> tuesday:s ref_time:r)) => (DATE,1989-10-24))
Update: {TEMPORAL_CONTEXT__next_VB=1.0, TEMPORAL_CONTEXT__previous_VB=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=-1.0, TEMPORAL_WEEKDAY_notSameDay_next=1.0, TEMPORAL_WEEKDAY_notSameDay_previous=-1.0}
Sample processing time 0.0050
993 : ================== [0]
Sample type: TemporalSentence
Phrase:            1989
Sentence:          Mr. Fournier said Navigation Mixte's 1989 unconsolidated, or parent-company, profit is likely to be 4.7 billion francs ($754.4 million), up from 633.8 million francs last year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Correct parses:
1989:r => (1989:r) => (DATE,1989)
Correct. No update.
Sample processing time 0.0010
994 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Mr. Fournier said Navigation Mixte's 1989 unconsolidated, or parent-company, profit is likely to be 4.7 billion francs ($754.4 million), up from 633.8 million francs last year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0040
995 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Mr. Fournier said the exceptional gain would mean nearly twice as high a dividend this year as last.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
996 : ================== [0]
Sample type: TemporalSentence
Phrase:            last
Sentence:          Mr. Fournier said the exceptional gain would mean nearly twice as high a dividend this year as last.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988
No correct parses. No update.
Sample processing time 0.0000
997 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          If holders avoid tendering to Paribas, he added, they can expect strong dividends again next year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0020
998 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past 20 years
Sentence:          Analysts noted that over the past 20 years, Mr. Fournier has built his company through astute stock-market activity and has warded off at least three takeover attempts.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P20Y
Executing the phrase: the past 20 years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past 20 years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past 20 years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past 20 years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past 20 years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 20:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 20:n) => ((*:<d,<n,d>> years:d 20:n)) => (DURATION,P20Y)
Correct. No update.
Sample processing time 0.0030
999 : ================== [0]
Sample type: TemporalSentence
Phrase:            1987
Sentence:          Mr. Fournier also noted that Navigation Mixte joined Paribas's core of shareholders when Paribas was denationalized in 1987, and said it now holds just under 5% of Paribas's shares.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1987
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (previous:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (this:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (next:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Correct parses:
1987:r => (1987:r) => (DATE,1987)
Correct. No update.
Sample processing time 0.0020
1000 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Mr. Fournier also noted that Navigation Mixte joined Paribas's core of shareholders when Paribas was denationalized in 1987, and said it now holds just under 5% of Paribas's shares.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0030
1001 : ================== [0]
Sample type: TemporalSentence
Phrase:            monday
Sentence:          Paribas said Monday that it intends to bid to boost its stake in Navigation Mixte to 66.7%, from the 18.7% it already owns.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-23
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Correct parses:
monday:s => ((previous:<s,<r,s>> monday:s ref_time:r)) => (DATE,1989-10-23)
Correct. No update.
Sample processing time 0.0010
1002 : ================== [0]
Sample type: TemporalSentence
Phrase:            july 1
Sentence:          Paribas says it will offer 1,850 francs ($296.95) each for Navigation Mixte shares that enjoy full dividend rights, and 1,800 francs each for a block of shares issued July 1, which will receive only partial dividends this year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-07-01
Executing the phrase: july 1
with logic: (intersect:<s*,s> july:s 1d:s)
and lexical entries: [july :- NP : july:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: july 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> july:s 1d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: july 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> july:s 1d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: july 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> july:s 1d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: july 1
with logic: (intersect:<s*,s> july:s 1d:s)
and lexical entries: [july :- NP : july:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Correct parses:
(intersect:<s*,s> july:s 1d:s) => ((this:<s,<r,s>> (intersect:<s*,s> july:s 1d:s) ref_time:r)) => (DATE,1989-07-01)
Correct. No update.
Sample processing time 0.0040
1003 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Paribas says it will offer 1,850 francs ($296.95) each for Navigation Mixte shares that enjoy full dividend rights, and 1,800 francs each for a block of shares issued July 1, which will receive only partial dividends this year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0040
1004 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 1 2004
Sentence:          The gross proceeds from the sale of the notes, which will be due on Nov. 1, 2004, will be used to reduce existing debt and for general corporate purposes, the company said.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          2004-11-01
Executing the phrase: nov. 1 2004
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2004 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2004:r))]
Executing the phrase: nov. 1 2004
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2004 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2004:r))]
Executing the phrase: nov. 1 2004
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2004 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2004:r))]
Executing the phrase: nov. 1 2004
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2004 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2004:r))]
Executing the phrase: nov. 1 2004
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2004 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2004:r))]
Correct parses:
(intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r) => ((intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r)) => (DATE,2004-11-01)
Correct. No update.
Sample processing time 0.0020
1005 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Blockbuster shares closed yesterday at $18.75, down $1.125, in New York Stock Exchange trading.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0020
1006 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Analysts have complained that third-quarter corporate earnings haven't been very good, but the effect hit home particularly hard yesterday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0010
1007 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Analysts have complained that third-quarter corporate earnings haven't been very good, but the effect hit home particularly hard yesterday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0030
1008 : ================== [0]
Sample type: TemporalSentence
Phrase:            wednesday
Sentence:          Compaq Computer nose-dived $8.625 a share, to $100, and pulled other technology issues lower after reporting lower-than-expected earnings after the stock market closed Wednesday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Correct parses:
wednesday:s => ((previous:<s,<r,s>> wednesday:s ref_time:r)) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0020
1009 : ================== [0]
Sample type: TemporalSentence
Phrase:            later yesterday
Sentence:          Later yesterday the nation's major auto makers added to the gloom when they each reported their core auto operations were net losers in the third quarter.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: later yesterday
with logic: yesterday:r
and lexical entries: [later :- NP/NP : (lambda $0:r $0), yesterday :- NP : yesterday:r]
Executing the phrase: later yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), yesterday :- NP : yesterday:r]
Executing the phrase: later yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), yesterday :- NP : yesterday:r]
Executing the phrase: later yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), yesterday :- NP : yesterday:r]
Executing the phrase: later yesterday
with logic: yesterday:r
and lexical entries: [later :- NP/NP : (lambda $0:r $0), yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0010
1010 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          Later yesterday the nation's major auto makers added to the gloom when they each reported their core auto operations were net losers in the third quarter.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
1011 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          The less-than-robust third-quarter results came amid renewed concern about the volatility of stock prices and the role of computer-aided program trading.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0010
1012 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          The number of stocks on the New York Stock Exchange that fell in price yesterday exceeded 1,000, a key measure of underlying sentiment among technical analysts.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-26
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-26)
Correct. No update.
Sample processing time 0.0020
1013 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          Although the government said the economy grew an estimated 2.5% in the third quarter, in line with expectations, analysts are increasingly predicting much more sluggish growth -- and therefore more corporate earnings disappointments -- for the fourth quarter.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
1014 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fourth quarter
Sentence:          Although the government said the economy grew an estimated 2.5% in the third quarter, in line with expectations, analysts are increasingly predicting much more sluggish growth -- and therefore more corporate earnings disappointments -- for the fourth quarter.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Bad violating parse: ((nth:<d,<n,s>> quarter:d 4o:n), ((next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1990-Q4))
Update: {TEMPORAL_CONTEXT__next_VBG=-1.0, TEMPORAL_CONTEXT__this_VBG=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0060
1015 : ================== [0]
Sample type: TemporalSentence
Phrase:            coming weeks
Sentence:          That is another small encouragement for the Federal Reserve to lower interest rates in coming weeks, they reasoned.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          PXW
Executing the phrase: coming weeks
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), weeks :- NP : weeks:d]
Executing the phrase: coming weeks
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), weeks :- NP : weeks:d]
Executing the phrase: coming weeks
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), weeks :- NP : weeks:d]
Executing the phrase: coming weeks
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), weeks :- NP : weeks:d]
Executing the phrase: coming weeks
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), weeks :- NP : weeks:d]
Bad violating parse: (future_ref:r, ((this:<s,<r,s>> future_ref:r ref_time:r)) => (DATE,FUTURE_REF))
No correct parses. No update.
Sample processing time 0.0020
1016 : ================== [0]
Sample type: TemporalSentence
Phrase:            30 year
Sentence:          The Treasury's benchmark 30-year rose fractionally.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P30Y
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 30:n))
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 30:n) => ((*:<d,<n,d>> year:d 30:n)) => (DURATION,P30Y)
Correct. No update.
Sample processing time 0.0020
1017 : ================== [0]
Sample type: TemporalSentence
Phrase:            wednesday
Sentence:          In late New York trading the dollar was at 1.8400 marks and 142.10 yen compared with 1.8353 marks and 141.52 yen Wednesday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Correct parses:
wednesday:s => ((previous:<s,<r,s>> wednesday:s ref_time:r)) => (DATE,1989-10-25)
Bad violating parse: (wednesday:s, ((this:<s,<r,s>> wednesday:s ref_time:r)) => (DATE,1989-WXX-3))
Update: {TEMPORAL_CONTEXT__previous_VBN=1.0, TEMPORAL_CONTEXT__this_VBN=-1.0, TEMPORAL_REFERENCE_temporal_ref_previousnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0, TEMPORAL_WEEKDAY_notSameDay_previous=1.0, TEMPORAL_WEEKDAY_notSameDay_this=-1.0}
Sample processing time 0.0030
1018 : ================== [0]
Sample type: TemporalSentence
Phrase:            wednesday
Sentence:          The dollar soared against the pound, which was at $1.5765 compared with $1.6145 Wednesday.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Correct parses:
wednesday:s => ((previous:<s,<r,s>> wednesday:s ref_time:r)) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0020
1019 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          said that its net income rose 51% in the third quarter, bolstered by unusual gains from its investment in a disk-drive maker and reflecting continued growth in its European operations.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
1020 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          The computer maker said net jumped to $87 million, or $2.02 a share, from $58 million, or $1.40 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0040
1021 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest quarter
Sentence:          The latest quarter's results, however, included a pretax gain of $13.7 million, or 20 cents a share, in the carrying value of the company's investment in Conner Peripherals Inc. and a $7.6 million gain, or 11 cents a share, from the sale of one million Conner shares.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Correct parses:
(previous:<d,<r,s>> quarter:d ref_time:r) => ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
1022 : ================== [0]
Sample type: TemporalSentence
Phrase:            the nine months
Sentence:          Net for the nine months was $254 million, or $5.94 a share, up 56% from $163 million, or $4.06 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0010
1023 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Net for the nine months was $254 million, or $5.94 a share, up 56% from $163 million, or $4.06 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,0))
No correct parses. No update.
Sample processing time 0.0040
1024 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year earlier nine months
Sentence:          Net for the year-earlier nine months also included a gain of $9.7 million, or 15 cents a share, in the carrying value of the Conner investment.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P9M
No correct parses. No update.
Sample processing time 0.0010
1025 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Michael Swavely, president of Compaq's North America division, attributed the company's third-quarter performance to continued increases in international sales, which accounted for 43% of the company's sales, a 74% increase from a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
1026 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Michael Swavely, president of Compaq's North America division, attributed the company's third-quarter performance to continued increases in international sales, which accounted for 43% of the company's sales, a 74% increase from a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0050
1027 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next couple of years
Sentence:          "Over the next couple of years we would not be surprised to see Europe and international {sales} represent 50% of the company's revenues," he said.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: the next couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: the next couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: the next couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: the next couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: the next couple of years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Correct parses:
(*:<d,<n,d>> years:d 2:n) => ((*:<d,<n,d>> years:d 2:n)) => (DURATION,P2Y)
Correct. No update.
Sample processing time 0.0020
1028 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          During the third quarter, Compaq purchased a former Wang Laboratories manufacturing facility in Stirling, Scotland, which will be used for international service and repair operations.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
1029 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          In New York Stock Exchange composite trading yesterday, Compaq shares fell $1.625 to $108.625.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0020
1030 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          said it expects to report third-quarter net income jumped 97% to $2.8 million, or 51 cents a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Bad violating parse: ((nth:<d,<n,s>> quarter:d 3o:n), ((next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1990-Q3))
Update: {TEMPORAL_CONTEXT__next_VB=-1.0, TEMPORAL_CONTEXT__this_VB=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0020
1031 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year earlier quarter
Sentence:          In the year-earlier quarter, the automobile and trucking insurer had earnings of $1.4 million, or 48 cents a share on a restated basis, on revenue of $16.5 million.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0010
1032 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest quarter
Sentence:          In an interview, W. Brent LeGere, chairman and chief executive officer, said he expects revenue in the latest quarter to total about $28 million.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Correct parses:
(previous:<d,<r,s>> quarter:d ref_time:r) => ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
1033 : ================== [0]
Sample type: TemporalSentence
Phrase:            june 1989
Sentence:          The earnings-per-share figures reflect a 25% stock dividend in June 1989.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-06
Executing the phrase: june 1989
with logic: (intersect:<s*,s> 1989:r june:s)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1989 :- NP : 1989:r, june :- NP : june:s, 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: june 1989
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1989:r june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1989 :- NP : 1989:r, june :- NP : june:s, 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: june 1989
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1989:r june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1989 :- NP : 1989:r, june :- NP : june:s, 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: june 1989
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1989:r june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1989 :- NP : 1989:r, june :- NP : june:s, 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: june 1989
with logic: (intersect:<s*,s> 1989:r june:s)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1989 :- NP : 1989:r, june :- NP : june:s, 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Correct parses:
(intersect:<s*,s> 1989:r june:s) => ((intersect:<s*,s> 1989:r june:s)) => (DATE,1989-06)
Correct. No update.
Sample processing time 0.0020
1034 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          reported that third-quarter profit grew a robust 19% from a year ago on the strength of the company's operations in various chemicals and fibers, and in petroleum.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0010
1035 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          reported that third-quarter profit grew a robust 19% from a year ago on the strength of the company's operations in various chemicals and fibers, and in petroleum.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0030
1036 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year earlier period
Sentence:          In the year-earlier period, the company earned $461 million, or $1.91 a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0000
1037 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest quarter
Sentence:          Sales in the latest quarter were $8.59 billion, up 9.4% from $7.85 billion.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Correct parses:
(previous:<d,<r,s>> quarter:d ref_time:r) => ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
1038 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          The dividend increase was Du Pont's second this year, an affirmation of statements by top executives that they intend to increase rewards to shareholders.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
1039 : ================== [0]
Sample type: TemporalSentence
Phrase:            several months
Sentence:          "We haven't benefited the shareholder as much as we need to," said Edgar Woolard Jr., Du Pont's chairman and chief executive officer, in an interview several months before he entered his current position in April.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          PXM
Executing the phrase: several months
with logic: months:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: several months
with logic: months:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: several months
with logic: months:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: several months
with logic: months:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: several months
with logic: (temporal_ref:<d,s> months:d)
and lexical entries: [several :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Correct parses:
months:d => (months:d) => (DURATION,PXM)
Correct. No update.
Sample processing time 0.0040
1040 : ================== [0]
Sample type: TemporalSentence
Phrase:            current
Sentence:          "We haven't benefited the shareholder as much as we need to," said Edgar Woolard Jr., Du Pont's chairman and chief executive officer, in an interview several months before he entered his current position in April.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0040
1041 : ================== [0]
Sample type: TemporalSentence
Phrase:            april
Sentence:          "We haven't benefited the shareholder as much as we need to," said Edgar Woolard Jr., Du Pont's chairman and chief executive officer, in an interview several months before he entered his current position in April.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-04
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (this:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (next:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Correct parses:
april:s => ((this:<s,<r,s>> april:s ref_time:r)) => (DATE,1989-04)
Correct. No update.
Sample processing time 0.0040
1042 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year
Sentence:          A spokesman for Seagram, the Montreal wine and spirits concern controlled by the Bronfman family, said the company will post additional pretax profit of about $33 million a year because of the additional Du Pont dividends.
ref_time:          1989-10-26
Gold type:         SET
gold val:          P1Y
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
Bad violating parse: (year:d, (year:d) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0030
1043 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Du Pont's stock rose $2.50 a share to close at $117.375 in New York Stock Exchange composite trading yesterday.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0020
1044 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest quarter
Sentence:          Leading the gains for Du Pont in the latest quarter was its industrial products segment, where profit soared to $155 million from $99 million a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Correct parses:
(previous:<d,<r,s>> quarter:d ref_time:r) => ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0010
1045 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Leading the gains for Du Pont in the latest quarter was its industrial products segment, where profit soared to $155 million from $99 million a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0030
1046 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          Profit climbed to $98 million from $71 million in the petroleum segment, as Du Pont's Conoco Inc. oil company was helped by crude oil prices higher than a year ago and by higher natural gas prices and volume.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1987-Q3))
No correct parses. No update.
Sample processing time 0.0040
1047 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier in the year
Sentence:          A spokesman said herbicide use in some areas of the U.S. was delayed earlier in the year by heavy rains, thus increasing sales in the third quarter.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
Executing the phrase: earlier in the year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier in the :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier in the year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier in the :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier in the year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier in the :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier in the year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier in the :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier in the year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier in the :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
1048 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          A spokesman said herbicide use in some areas of the U.S. was delayed earlier in the year by heavy rains, thus increasing sales in the third quarter.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
1049 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          Two segments posted lower earnings for the quarter.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0020
1050 : ================== [0]
Sample type: TemporalSentence
Phrase:            the nine months
Sentence:          For the nine months, Du Pont earned $2 billion, or $8.46 a share, up 18% from $1.69 billion, or $7.03 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0020
1051 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          For the nine months, Du Pont earned $2 billion, or $8.46 a share, up 18% from $1.69 billion, or $7.03 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,0))
No correct parses. No update.
Sample processing time 0.0030
1052 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 14
Sentence:          The increased dividend will be paid Dec. 14 to holders of record Nov. 15.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-12-14
Executing the phrase: dec. 14
with logic: (intersect:<s*,s> december:s 14d:s)
and lexical entries: [dec. :- NP : december:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: dec. 14
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 14d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: dec. 14
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 14d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: dec. 14
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 14d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: dec. 14
with logic: (intersect:<s*,s> december:s 14d:s)
and lexical entries: [dec. :- NP : december:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Correct parses:
(intersect:<s*,s> december:s 14d:s) => ((next:<s,<r,s>> (intersect:<s*,s> december:s 14d:s) ref_time:r)) => (DATE,1989-12-14)
Correct. No update.
Sample processing time 0.0020
1053 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 15
Sentence:          The increased dividend will be paid Dec. 14 to holders of record Nov. 15.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-11-15
Executing the phrase: nov. 15
with logic: (intersect:<s*,s> november:s 15d:s)
and lexical entries: [nov. :- NP : november:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: nov. 15
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 15d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: nov. 15
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 15d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: nov. 15
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 15d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: nov. 15
with logic: (intersect:<s*,s> november:s 15d:s)
and lexical entries: [nov. :- NP : november:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Correct parses:
(intersect:<s*,s> november:s 15d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 15d:s) ref_time:r)) => (DATE,1989-11-15)
Correct. No update.
Sample processing time 0.0020
1054 : ================== [0]
Sample type: TemporalSentence
Phrase:            january
Sentence:          The stock split, which is subject to holder approval, would be paid on a still unspecified date in January to holders of record Dec. 21.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990-01
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Correct parses:
january:s => ((next:<s,<r,s>> january:s ref_time:r)) => (DATE,1990-01)
Bad violating parse: (january:s, ((this:<s,<r,s>> january:s ref_time:r)) => (DATE,1989-01))
Update: {TEMPORAL_CONTEXT__nextMD_VBN=1.0, TEMPORAL_CONTEXT__thisMD_VBN=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0030
1055 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 21
Sentence:          The stock split, which is subject to holder approval, would be paid on a still unspecified date in January to holders of record Dec. 21.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-12-21
Executing the phrase: dec. 21
with logic: (intersect:<s*,s> december:s 21d:s)
and lexical entries: [dec. :- NP : december:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: dec. 21
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 21d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: dec. 21
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 21d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: dec. 21
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 21d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: dec. 21
with logic: (intersect:<s*,s> december:s 21d:s)
and lexical entries: [dec. :- NP : december:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Correct parses:
(intersect:<s*,s> december:s 21d:s) => ((next:<s,<r,s>> (intersect:<s*,s> december:s 21d:s) ref_time:r)) => (DATE,1989-12-21)
Correct. No update.
Sample processing time 0.0030
1056 : ================== [0]
Sample type: TemporalSentence
Phrase:            aug. 9
Sentence:          The so-called poison pill took effect Aug. 9 pending ratification by holders.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-08-09
Executing the phrase: aug. 9
with logic: (intersect:<s*,s> august:s 9d:s)
and lexical entries: [aug. :- NP : august:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: aug. 9
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 9d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: aug. 9
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 9d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: aug. 9
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 9d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: aug. 9
with logic: (intersect:<s*,s> august:s 9d:s)
and lexical entries: [aug. :- NP : august:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Correct parses:
(intersect:<s*,s> august:s 9d:s) => ((this:<s,<r,s>> (intersect:<s*,s> august:s 9d:s) ref_time:r)) => (DATE,1989-08-09)
Correct. No update.
Sample processing time 0.0010
1057 : ================== [0]
Sample type: TemporalSentence
Phrase:            then current
Sentence:          Once triggered, the rights allow holders to buy additional shares at 50% of the then current market price or, at the board's discretion, to receive securities or assets.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: then current
with logic: past_ref:r
and lexical entries: [then current :- NP : past_ref:r]
Executing the phrase: then current
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [then current :- NP : past_ref:r]
Executing the phrase: then current
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [then current :- NP : past_ref:r]
Executing the phrase: then current
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [then current :- NP : past_ref:r]
Executing the phrase: then current
with logic: past_ref:r
and lexical entries: [then current :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
1058 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fiscal first quarter
Sentence:          Separately, Dominion Textile posted net income of 4.7 million Canadian dollars ($4 million), or 12 Canadian cents a share, for the fiscal-first quarter ended Sept. 30.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q1
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 1o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)) => (DATE,1989-Q1)
Correct. No update.
Sample processing time 0.0030
1059 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          Separately, Dominion Textile posted net income of 4.7 million Canadian dollars ($4 million), or 12 Canadian cents a share, for the fiscal-first quarter ended Sept. 30.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-09-30
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> september:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30)
Correct. No update.
Sample processing time 0.0040
1060 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          The company had a net loss of C$2.3 million, or 14 Canadian cents a share, a year ago.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q1
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-09-30))
No correct parses. No update.
Sample processing time 0.0020
1061 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Sales were C$348.2 million compared with C$307.2 a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q1
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1987-09-30))
No correct parses. No update.
Sample processing time 0.0020
1062 : ================== [0]
Sample type: TemporalSentence
Phrase:            feb. 1
Sentence:          Mr. Schwarz, 52 years old, will succeed Daniel P. Davison Feb. 1, soon after Mr. Davison reaches the company's mandatory retirement age of 65.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990-02-01
Executing the phrase: feb. 1
with logic: (intersect:<s*,s> february:s 1d:s)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (intersect:<s*,s> february:s 1d:s)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Correct parses:
(intersect:<s*,s> february:s 1d:s) => ((next:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)) => (DATE,1990-02-01)
Bad violating parse: ((intersect:<s*,s> february:s 1d:s), ((this:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)) => (DATE,1989-02-01))
Update: {TEMPORAL_CONTEXT__nextMD_VB=1.0, TEMPORAL_CONTEXT__thisMD_VB=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0030
1063 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          U.S. Trust recently introduced certain mutual-fund products, which allow it to serve customers with minimum deposits of $250,000.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0010
1064 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          "We have always taken smaller accounts, but now we are looking for smaller accounts that will grow," Mr. Schwarz says.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
1065 : ================== [0]
Sample type: TemporalSentence
Phrase:            quarterly
Sentence:          Quarterly net income this year has risen just over comparable periods in 1988, when year-end net was below the 1987 level.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P3M
Executing the phrase: quarterly
with logic: (*:<d,<n,d>> month:d 3:n)
and lexical entries: [quarterly :- NP : (*:<d,<n,d>> month:d 3:n)]
Executing the phrase: quarterly
with logic: (*:<d,<n,d>> month:d 3:n)
and lexical entries: [quarterly :- NP : (*:<d,<n,d>> month:d 3:n)]
Executing the phrase: quarterly
with logic: (*:<d,<n,d>> month:d 3:n)
and lexical entries: [quarterly :- NP : (*:<d,<n,d>> month:d 3:n)]
Executing the phrase: quarterly
with logic: (*:<d,<n,d>> month:d 3:n)
and lexical entries: [quarterly :- NP : (*:<d,<n,d>> month:d 3:n)]
Executing the phrase: quarterly
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> month:d 3:n))
and lexical entries: [quarterly :- NP : (*:<d,<n,d>> month:d 3:n)]
Correct parses:
(*:<d,<n,d>> month:d 3:n) => ((*:<d,<n,d>> month:d 3:n)) => (DURATION,P3M)
Correct. No update.
Sample processing time 0.0010
1066 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Quarterly net income this year has risen just over comparable periods in 1988, when year-end net was below the 1987 level.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
1067 : ================== [0]
Sample type: TemporalSentence
Phrase:            1988
Sentence:          Quarterly net income this year has risen just over comparable periods in 1988, when year-end net was below the 1987 level.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Correct parses:
1988:r => (1988:r) => (DATE,1988)
Correct. No update.
Sample processing time 0.0010
1068 : ================== [0]
Sample type: TemporalSentence
Phrase:            1987
Sentence:          Quarterly net income this year has risen just over comparable periods in 1988, when year-end net was below the 1987 level.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1987
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (previous:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (this:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (next:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Correct parses:
1987:r => (1987:r) => (DATE,1987)
Correct. No update.
Sample processing time 0.0030
1069 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year's third quarter
Sentence:          In this year's third quarter, for example, net was $10.5 million, or $1.05 a share, compared with $10.3 million, or $1.02 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
No correct parses. No update.
Sample processing time 0.0010
1070 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          In this year's third quarter, for example, net was $10.5 million, or $1.05 a share, compared with $10.3 million, or $1.02 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
No correct parses. No update.
Sample processing time 0.0060
1071 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          Assets as of Sept. 30 fell to $2.46 billion from about $2.77 billion.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-09-30
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> september:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30)
Bad violating parse: ((intersect:<s*,s> september:s 30d:s), ((next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1990-09-30))
Update: {TEMPORAL_CONTEXT__next_VBD=-1.0, TEMPORAL_CONTEXT__this_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0020
1072 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          "We will have a reasonably flat year this year," Mr. Schwarz says.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0010
1073 : ================== [0]
Sample type: TemporalSentence
Phrase:            1990
Sentence:          Mr. Schwarz also said costs associated with U.S. Trust's planned move to midtown Manhattan from Wall Street will continue to be a drag on earnings through 1990.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
1074 : ================== [0]
Sample type: TemporalSentence
Phrase:            1974
Sentence:          Mr. Schwarz's father was a U.S. Trust trustee until 1974.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1974
Executing the phrase: 1974
with logic: 1974:r
and lexical entries: [1974 :- NP : 1974:r]
Executing the phrase: 1974
with logic: (previous:<s,<r,s>> 1974:r ref_time:r)
and lexical entries: [1974 :- NP : 1974:r]
Executing the phrase: 1974
with logic: (this:<s,<r,s>> 1974:r ref_time:r)
and lexical entries: [1974 :- NP : 1974:r]
Executing the phrase: 1974
with logic: (next:<s,<r,s>> 1974:r ref_time:r)
and lexical entries: [1974 :- NP : 1974:r]
Executing the phrase: 1974
with logic: 1974:r
and lexical entries: [1974 :- NP : 1974:r]
Correct parses:
1974:r => (1974:r) => (DATE,1974)
Correct. No update.
Sample processing time 0.0020
1075 : ================== [0]
Sample type: TemporalSentence
Phrase:            feb. 1
Sentence:          U.S. Trust also created a four-member office of the chairman, effective Feb. 1.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990-02-01
Executing the phrase: feb. 1
with logic: (intersect:<s*,s> february:s 1d:s)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (intersect:<s*,s> february:s 1d:s)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Correct parses:
(intersect:<s*,s> february:s 1d:s) => ((next:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)) => (DATE,1990-02-01)
Bad violating parse: ((intersect:<s*,s> february:s 1d:s), ((this:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)) => (DATE,1989-02-01))
Update: {TEMPORAL_CONTEXT__next_VBD=1.0, TEMPORAL_CONTEXT__this_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0020
1076 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fiscal first quarter
Sentence:          Sun Microsystems Inc., snapping back to profitability after its first quarterly loss as a public firm, said it earned $5.2 million, or seven cents a share, in the fiscal first quarter.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q1
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 1o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)) => (DATE,1989-Q1)
Bad violating parse: ((nth:<d,<n,s>> quarter:d 1o:n), ((next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)) => (DATE,1990-Q1))
Update: {TEMPORAL_CONTEXT__next_VBD=-1.0, TEMPORAL_CONTEXT__this_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0060
1077 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          Sun, a maker of computer workstations, reported sales of $538.5 million for the quarter ended Sept. 29, up 39% from $388.5 million a year earlier.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P1Q
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Correct parses:
quarter:d => (quarter:d) => (DURATION,P1Q)
Correct. No update.
Sample processing time 0.0020
1078 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 29
Sentence:          Sun, a maker of computer workstations, reported sales of $538.5 million for the quarter ended Sept. 29, up 39% from $388.5 million a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-09-29
Executing the phrase: sept. 29
with logic: (intersect:<s*,s> september:s 29d:s)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (intersect:<s*,s> september:s 29d:s)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Correct parses:
(intersect:<s*,s> september:s 29d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)) => (DATE,1989-09-29)
Correct. No update.
Sample processing time 0.0030
1079 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Sun, a maker of computer workstations, reported sales of $538.5 million for the quarter ended Sept. 29, up 39% from $388.5 million a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-QX
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-09-29))
No correct parses. No update.
Sample processing time 0.0030
1080 : ================== [0]
Sample type: TemporalSentence
Phrase:            the 1988 period
Sentence:          In the 1988 period, the company earned $20.6 million, or 26 cents a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q1
No correct parses. No update.
Sample processing time 0.0010
1081 : ================== [0]
Sample type: TemporalSentence
Phrase:            this month
Sentence:          Earlier this month, the company said it expected to break even for the quarter on sales of $530 million.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0010
1082 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          Earlier this month, the company said it expected to break even for the quarter on sales of $530 million.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          1989-Q1
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0020
1083 : ================== [0]
Sample type: TemporalSentence
Phrase:            april
Sentence:          In a statement, Scott McNealy, Sun's chief executive officer, said the company's performance was hampered by problems tied to the introduction of a major new family of computers in April.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-04
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (this:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (next:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Bad violating parse: (april:s, ((this:<s,<r,s>> april:s ref_time:r)) => (DATE,1989-04))
No correct parses. No update.
Sample processing time 0.0030
1084 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          One of those new computers, called Sparcstation 1, accounted for nearly half of the 28,000 systems Sun shipped in the quarter, he said.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q1
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0020
1085 : ================== [0]
Sample type: TemporalSentence
Phrase:            april
Sentence:          More than two-thirds of the systems shipped, meanwhile, were products introduced in April.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-04
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (this:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (next:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Correct parses:
april:s => ((this:<s,<r,s>> april:s ref_time:r)) => (DATE,1989-04)
Correct. No update.
Sample processing time 0.0020
1086 : ================== [0]
Sample type: TemporalSentence
Phrase:            the summer
Sentence:          But problems in manufacturing, forecasting demand and getting the bugs out of a new management information system made it extremely difficult for Sun to meet demand for its newest computers well into the summer.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-SU
Executing the phrase: the summer
with logic: summer:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the summer
with logic: (previous:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the summer
with logic: (next:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the summer
with logic: summer:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Correct parses:
summer:s => ((this:<s,<r,s>> summer:s ref_time:r)) => (DATE,1989-SU)
Correct. No update.
Sample processing time 0.0030
1087 : ================== [0]
Sample type: TemporalSentence
Phrase:            its fourth quarter
Sentence:          These problems also resulted in Sun reporting a $20.3 million loss for its fourth quarter ended June 30.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: its fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [its :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: its fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [its :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: its fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [its :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: its fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [its :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: its fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [its :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Correct. No update.
Sample processing time 0.0030
1088 : ================== [0]
Sample type: TemporalSentence
Phrase:            june 30
Sentence:          These problems also resulted in Sun reporting a $20.3 million loss for its fourth quarter ended June 30.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-06-30
Executing the phrase: june 30
with logic: (intersect:<s*,s> june:s 30d:s)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (intersect:<s*,s> june:s 30d:s)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> june:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)) => (DATE,1989-06-30)
Correct. No update.
Sample processing time 0.0020
1089 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Mr. McNealy said the issues that hurt Sun's performance earlier this year are now " largely" behind the firm, and he indicated that Sun's profitability should increase throughout the fiscal year.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
1090 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fiscal year
Sentence:          Mr. McNealy said the issues that hurt Sun's performance earlier this year are now " largely" behind the firm, and he indicated that Sun's profitability should increase throughout the fiscal year.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P1Y
No correct parses. No update.
Sample processing time 0.0010
1091 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          Recently, analysts have said Sun also is vulnerable to competition from International Business Machines Corp., which plans to introduce a group of workstations early next year, and Next Inc.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0010
1092 : ================== [0]
Sample type: TemporalSentence
Phrase:            early next year
Sentence:          Recently, analysts have said Sun also is vulnerable to competition from International Business Machines Corp., which plans to introduce a group of workstations early next year, and Next Inc.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
1093 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 22
Sentence:          The directors said if Messrs. Drabinsky and Gottlieb mail an offer to shareholders by Nov. 22, it will reimburse them a maximum of C$8.5 million for expenses related to a bid.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-11-22
Executing the phrase: nov. 22
with logic: (intersect:<s*,s> november:s 22d:s)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (intersect:<s*,s> november:s 22d:s)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Correct parses:
(intersect:<s*,s> november:s 22d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)) => (DATE,1989-11-22)
Correct. No update.
Sample processing time 0.0020
1094 : ================== [0]
Sample type: TemporalSentence
Phrase:            last may
Sentence:          "We consider that his bid is an acceptable bid," said Sandra Kolber, spokeswoman for the independent directors' committee appointed last May to solicit and review bids for the company in the wake of a dispute between Mr. Drabinsky and Cineplex's major shareholder, MCA Inc.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-05
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Correct parses:
(previous:<s,<r,s>> may:s ref_time:r) => ((previous:<s,<r,s>> may:s ref_time:r)) => (DATE,1989-05)
Correct. No update.
Sample processing time 0.0040
1095 : ================== [0]
Sample type: TemporalSentence
Phrase:            last april
Sentence:          Last April, Mr. Drabinsky and a group of financial backers planned to acquire up to 30.2% of Cineplex for C$17.50 a share from Bronfman associates.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-04
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Correct parses:
(previous:<s,<r,s>> april:s ref_time:r) => ((previous:<s,<r,s>> april:s ref_time:r)) => (DATE,1989-04)
Correct. No update.
Sample processing time 0.0010
1096 : ================== [0]
Sample type: TemporalSentence
Phrase:            two years
Sentence:          Mr. Drabinsky, who would have had the right to vote those shares for two years, said the purchase, subsequently rejected by regulators, was aimed at consolidating his control of the company.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: two years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 2:n) => ((*:<d,<n,d>> years:d 2:n)) => (DURATION,P2Y)
Correct. No update.
Sample processing time 0.0020
1097 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Cineplex shareholders responded coolly to yesterday's announcement.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0010
1098 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          General Motors Corp.'s big defense and automotive electronics unit, GM Hughes Electronics, said net income fell 22% in the third quarter, reflecting declining military spending and slumping GM vehicle production.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
1099 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          GM closed down $1.875 at $44.875 in New York Stock Exchange trading yesterday.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0020
1100 : ================== [0]
Sample type: TemporalSentence
Phrase:            this morning
Sentence:          Earnings for GM common stock, reflecting the performance of GM's core automotive operations, will be disclosed this morning.
ref_time:          1989-10-26
Gold type:         TIME
gold val:          1989-10-26TMO
No correct parses. No update.
Sample processing time 0.0000
1101 : ================== [0]
Sample type: TemporalSentence
Phrase:            year end
Sentence:          Profit at the unit fell to $110.6 million, or 37 cents a share, from $142.4 million, or 45 cents a share, largely because of a $24 million one-time charge associated with Hughes's previously announced plan to reduce employment by at least 6,000 people by year end.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (next:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Bad violating parse: ((intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)), ((this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)) => (DATE,1989-12-31))
No correct parses. No update.
Sample processing time 0.0050
1102 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          In addition, GM's North American vehicle production fell 8.4% from a year ago, which hurt Delco Electronic's earnings, a company spokesman said.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-10
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-12-31))
No correct parses. No update.
Sample processing time 0.0020
1103 : ================== [0]
Sample type: TemporalSentence
Phrase:            the nine months
Sentence:          In the nine months, GM Hughes net fell 6.6% to $486.6 million, or $1.48 a share, from $521 million, or $1.58 a share.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0020
1104 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          The finance unit attributed the decline to higher borrowing costs compared with a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,0))
No correct parses. No update.
Sample processing time 0.0020
1105 : ================== [0]
Sample type: TemporalSentence
Phrase:            the first nine months
Sentence:          In the first nine months, GMAC's earnings fell 8% to $859.5 million from $930.2 million.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0030
1106 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          At EDS, third-quarter profit jumped 16% to a record $110.9 million, or 93 cents a share, from $95.9 million, or 79 cents a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0010
1107 : ================== [0]
Sample type: TemporalSentence
Phrase:            the nine months
Sentence:          In the nine months, EDS earned $315.8 million, or $2.62 a share, up 13% from $280.7 million, or $2.30 a share.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0020
1108 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest nine months
Sentence:          Revenue from non-GM accounts was 45% of EDS's total business in the latest nine months, compared with 40% a year earlier.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the latest nine months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the latest nine months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the latest nine months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the latest nine months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the latest nine months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0030
1109 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Revenue from non-GM accounts was 45% of EDS's total business in the latest nine months, compared with 40% a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,0))
No correct parses. No update.
Sample processing time 0.0030
1110 : ================== [0]
Sample type: TemporalSentence
Phrase:            the end of 1990
Sentence:          The company has said it wants to boost non-GM revenue to at least 50% of its total business by the end of 1990.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990
Executing the phrase: the end of 1990
with logic: 1990:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: 1990:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0020
1111 : ================== [0]
Sample type: TemporalSentence
Phrase:            next year
Sentence:          Westinghouse Electric Corp., capitalizing on a major restructuring program, expects operating margins of more than 10% and double-digit per-share earnings growth next year, top officers told securities analysts here.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(next:<d,<r,s>> year:d ref_time:r) => ((next:<d,<r,s>> year:d ref_time:r)) => (DATE,1990)
Correct. No update.
Sample processing time 0.0020
1112 : ================== [0]
Sample type: TemporalSentence
Phrase:            the next three years
Sentence:          John C. Marous, chairman and chief executive officer, also said the company expects sales from continuing businesses to rise 8.5% annually through the next three years.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P3Y
Executing the phrase: the next three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 3:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Correct parses:
(next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r) => ((next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)) => (DURATION,P3Y)
Correct. No update.
Sample processing time 0.0070
1113 : ================== [0]
Sample type: TemporalSentence
Phrase:            1988
Sentence:          In 1988, the company earned $822.8 million, or $5.66 a share, on sales of $12.49 billion.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Correct parses:
1988:r => (1988:r) => (DATE,1988)
Correct. No update.
Sample processing time 0.0010
1114 : ================== [0]
Sample type: TemporalSentence
Phrase:            1983
Sentence:          Since 1983, Westinghouse has shed 70 businesses that it didn't expect to produce 10% operating margins while acquiring 55 businesses.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1983
Executing the phrase: 1983
with logic: 1983:r
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (previous:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (this:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (next:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: 1983:r
and lexical entries: [1983 :- NP : 1983:r]
Correct parses:
1983:r => (1983:r) => (DATE,1983)
Correct. No update.
Sample processing time 0.0010
1115 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past 20 months
Sentence:          In the past 20 months alone, Paul E. Lego, president and chief operating officer, said the divestiture of $300 million of slow-growth, low-profit businesses has been more than offset by $600 million in profitable acquisitions.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P20M
Executing the phrase: the past 20 months
with logic: (*:<d,<n,d>> months:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), months :- NP : months:d]
Executing the phrase: the past 20 months
with logic: (*:<d,<n,d>> months:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), months :- NP : months:d]
Executing the phrase: the past 20 months
with logic: (*:<d,<n,d>> months:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), months :- NP : months:d]
Executing the phrase: the past 20 months
with logic: (*:<d,<n,d>> months:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), months :- NP : months:d]
Executing the phrase: the past 20 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 20:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 20:n) => ((*:<d,<n,d>> months:d 20:n)) => (DURATION,P20M)
Correct. No update.
Sample processing time 0.0030
1116 : ================== [0]
Sample type: TemporalSentence
Phrase:            years
Sentence:          A bright spot is the company's power-generation business, which is experiencing a surge of growth for the first time in years.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          PXY
Executing the phrase: years
with logic: years:d
and lexical entries: [years :- NP : years:d]
Executing the phrase: years
with logic: years:d
and lexical entries: [years :- NP : years:d]
Executing the phrase: years
with logic: years:d
and lexical entries: [years :- NP : years:d]
Executing the phrase: years
with logic: years:d
and lexical entries: [years :- NP : years:d]
Executing the phrase: years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [years :- NP : years:d]
Correct parses:
years:d => (years:d) => (DURATION,PXY)
Correct. No update.
Sample processing time 0.0020
1117 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Mr. Marous said the business will achieve higher sales this year than the company's target goal of 8.5%.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
1118 : ================== [0]
Sample type: TemporalSentence
Phrase:            about a decade
Sentence:          While Westinghouse hasn't had a nuclear power plant order from a U.S. utility in about a decade, excess capacity is beginning to shrink.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P1E
No correct parses. No update.
Sample processing time 0.0010
1119 : ================== [0]
Sample type: TemporalSentence
Phrase:            the 1990s
Sentence:          Mr. Lego said the company foresees the need for a major boost in new-generation capability throughout the 1990s.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          199
Executing the phrase: the 1990s
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the 1990s
with logic: (previous:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the 1990s
with logic: (this:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the 1990s
with logic: (next:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the 1990s
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Bad violating parse: (199:r, ((this:<s,<r,s>> 199:r ref_time:r)) => (DATE,199))
No correct parses. No update.
Sample processing time 0.0020
1120 : ================== [0]
Sample type: TemporalSentence
Phrase:            recently
Sentence:          The company's ability to respond to energy needs world-wide will be enhanced through a recently announced venture with Mitsubishi Heavy Industries, Mr. Lego said.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
1121 : ================== [0]
Sample type: TemporalSentence
Phrase:            soon
Sentence:          Westinghouse also expects its international sales to soon grow to 25% of total corporate sales from 20% last year.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0010
1122 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Westinghouse also expects its international sales to soon grow to 25% of total corporate sales from 20% last year.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
1123 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fourth quarter
Sentence:          Company officials also said that any gain from the sale of Westinghouse's 55% stake in its transmission and distribution venture with the Swiss firm of Asea Brown Boveri will be offset by a restructuring charge in the fourth quarter.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Bad violating parse: ((nth:<d,<n,s>> quarter:d 4o:n), ((next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1990-Q4))
Update: {TEMPORAL_CONTEXT__nextMD_VBN=-1.0, TEMPORAL_CONTEXT__thisMD_VBN=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0060
1124 : ================== [0]
Sample type: TemporalSentence
Phrase:            1990
Sentence:          Capital expenditure in 1990 will rise slightly, Mr. Marous said, from an estimated $470 million this year.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0010
1125 : ================== [0]
Sample type: TemporalSentence
Phrase:            this year
Sentence:          Capital expenditure in 1990 will rise slightly, Mr. Marous said, from an estimated $470 million this year.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
1126 : ================== [0]
Sample type: TemporalSentence
Phrase:            this month
Sentence:          The luxury airline and casino company, 98.6%-owned by investor Kirk Kerkorian and his Tracinda Corp., earlier this month announced its agreements to acquire the properties, but didn't disclose the purchase price.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0030
1127 : ================== [0]
Sample type: TemporalSentence
Phrase:            a later date
Sentence:          MGM Grand said the latest stock offering won't cover the $600 million or more cost of building the proposed resort and theme park, and added it will need to seek additional financing, either through bank borrowings or debt and equity offerings, at a later date.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: a later date
with logic: future_ref:r
and lexical entries: [a later date :- NP : future_ref:r]
Executing the phrase: a later date
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a later date :- NP : future_ref:r]
Executing the phrase: a later date
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a later date :- NP : future_ref:r]
Executing the phrase: a later date
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a later date :- NP : future_ref:r]
Executing the phrase: a later date
with logic: future_ref:r
and lexical entries: [a later date :- NP : future_ref:r]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0050
1128 : ================== [0]
Sample type: TemporalSentence
Phrase:            early 1991
Sentence:          Construction is set to begin in early 1991.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1991
Executing the phrase: early 1991
with logic: 1991:r
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1991 :- NP : 1991:r]
Executing the phrase: early 1991
with logic: (previous:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1991 :- NP : 1991:r]
Executing the phrase: early 1991
with logic: (this:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1991 :- NP : 1991:r]
Executing the phrase: early 1991
with logic: (next:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1991 :- NP : 1991:r]
Executing the phrase: early 1991
with logic: 1991:r
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1991 :- NP : 1991:r]
Correct parses:
1991:r => (1991:r) => (DATE,1991)
Correct. No update.
Sample processing time 0.0010
1129 : ================== [0]
Sample type: TemporalSentence
Phrase:            this month
Sentence:          The prospectus didn't include many details about the studio and theme park, although conceptual drawings, released this month, show that it may feature several "themed" areas similar to those found at parks built by Walt Disney Co.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(this:<d,<r,s>> month:d ref_time:r) => ((this:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-10)
Correct. No update.
Sample processing time 0.0030
1130 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          Total Assets Protection Inc., rebounding from its earlier loss, expects to report earnings from operations of about $200,000 for the third quarter, J.C. Matlock, chairman, said.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
1131 : ================== [0]
Sample type: TemporalSentence
Phrase:            the 1988 third quarter
Sentence:          In the 1988 third quarter, the company posted a net loss of $876,706, or 22 cents a share, on revenue of about $5.1 million.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: the 1988 third quarter
with logic: (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n))
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the 1988 third quarter
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the 1988 third quarter
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the 1988 third quarter
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the 1988 third quarter
with logic: (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n))
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Correct parses:
(intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n)) => ((intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0020
1132 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Bethlehem Steel Corp., hammered by higher costs and lower shipments to key automotive and service-center customers, posted a 54% drop in third-quarter profit.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
1133 : ================== [0]
Sample type: TemporalSentence
Phrase:            two year
Sentence:          Separately, two more of the nation's top steelmakers -- Armco Inc. and National Intergroup Inc. -- reported lower operating earnings in their steel businesses, marking what is generally believed to be the end of a two-year boom in the industry.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Correct parses:
(*:<d,<n,d>> year:d 2:n) => ((*:<d,<n,d>> year:d 2:n)) => (DURATION,P2Y)
Correct. No update.
Sample processing time 0.0040
1134 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fourth quarter
Sentence:          Wall Street analysts expect the disappointing trend to continue into the fourth quarter and through at least the first two quarters of 1990, when the industry will increasingly see the effect of price erosion in major product lines, such as rolled sheet used for cars, appliances and construction.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Correct. No update.
Sample processing time 0.0020
1135 : ================== [0]
Sample type: TemporalSentence
Phrase:            first two quarters of 1990
Sentence:          Wall Street analysts expect the disappointing trend to continue into the fourth quarter and through at least the first two quarters of 1990, when the industry will increasingly see the effect of price erosion in major product lines, such as rolled sheet used for cars, appliances and construction.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990-H1
No correct parses. No update.
Sample processing time 0.0010
1136 : ================== [0]
Sample type: TemporalSentence
Phrase:            coming quarters
Sentence:          "It doesn't bode well for coming quarters," said John Jacobson, who follows the steel industry for AUS Consultants.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          FUTURE_REF
Executing the phrase: coming quarters
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: coming quarters
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: coming quarters
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: coming quarters
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: coming quarters
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Correct parses:
future_ref:r => (future_ref:r) => (DATE,FUTURE_REF)
Correct. No update.
Sample processing time 0.0010
1137 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter of 1990
Sentence:          In fact, he thinks several steelmakers will report actual losses through the third quarter of 1990.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990-Q3
No correct parses. No update.
Sample processing time 0.0010
1138 : ================== [0]
Sample type: TemporalSentence
Phrase:            year ago period
Sentence:          In the year-ago period, Bethlehem earned $101.4 million, or $1.27 a share, including a $3.8 million gain from early retirement of debt.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0010
1139 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Third-quarter sales dropped 11% to $1.27 billion from $1.43 billion a year ago.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0010
1140 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          Third-quarter sales dropped 11% to $1.27 billion from $1.43 billion a year ago.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0020
1141 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Ms. Applebaum had estimated third-quarter earnings of 55 cents a shhha55 cents a share, ents a share, but ssa share, but said the losses for the unusual items were larger than expected.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
1142 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          Still, Bethlehem's core basic steel operations experienced a steep drop in operating profit to $58.6 million from $186.4 million a year ago, when the industry enjoyed strong demand and pricing.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-10-26
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3))
No correct parses. No update.
Sample processing time 0.0030
1143 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          At the same time, production costs, compared with a year ago, were boosted by higher raw material and employment costs, which resulted from the company's new labor pact effective June 1.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-10-26
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1987-Q3))
No correct parses. No update.
Sample processing time 0.0020
1144 : ================== [0]
Sample type: TemporalSentence
Phrase:            june 1
Sentence:          At the same time, production costs, compared with a year ago, were boosted by higher raw material and employment costs, which resulted from the company's new labor pact effective June 1.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990-06-01
Executing the phrase: june 1
with logic: (intersect:<s*,s> june:s 1d:s)
and lexical entries: [june :- NP : june:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: june 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> june:s 1d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: june 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> june:s 1d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: june 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> june:s 1d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: june 1
with logic: (intersect:<s*,s> june:s 1d:s)
and lexical entries: [june :- NP : june:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Correct parses:
(intersect:<s*,s> june:s 1d:s) => ((next:<s,<r,s>> (intersect:<s*,s> june:s 1d:s) ref_time:r)) => (DATE,1990-06-01)
Bad violating parse: ((intersect:<s*,s> june:s 1d:s), ((this:<s,<r,s>> (intersect:<s*,s> june:s 1d:s) ref_time:r)) => (DATE,1989-06-01))
Update: {TEMPORAL_CONTEXT__next_VBD=1.0, TEMPORAL_CONTEXT__this_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=-1.0}
Sample processing time 0.0050
1145 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fourth quarter
Sentence:          "We anticipate that steel market conditions will exhibit a further moderate decline in the fourth quarter as the automotive sector remains weak and customers continue to adjust inventories," said Bethlehem Chairman Walter F. Williams.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 4o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1989-Q4)
Bad violating parse: ((nth:<d,<n,s>> quarter:d 4o:n), ((next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)) => (DATE,1990-Q4))
Update: {TEMPORAL_CONTEXT__nextMD_VB=-1.0, TEMPORAL_CONTEXT__thisMD_VB=1.0, TEMPORAL_REFERENCE_temporal_ref_nextnotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_ref_thisnotTempRef=1.0}
Sample processing time 0.0030
1146 : ================== [0]
Sample type: TemporalSentence
Phrase:            the early summer
Sentence:          He noted, however, that the company's order entry has increased from the low levels of the early summer, following the end of labor negotiations.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-SU
Executing the phrase: the early summer
with logic: summer:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the early summer
with logic: (previous:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the early summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the early summer
with logic: (next:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the early summer
with logic: summer:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Correct parses:
summer:s => ((this:<s,<r,s>> summer:s ref_time:r)) => (DATE,1989-SU)
Correct. No update.
Sample processing time 0.0030
1147 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Steel business, said third-quarter net income dropped 8% to $33 million, or 35 cents a share, from $36 million, or 39 cents a share in the year-ago quarter.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
1148 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year ago quarter
Sentence:          Steel business, said third-quarter net income dropped 8% to $33 million, or 35 cents a share, from $36 million, or 39 cents a share in the year-ago quarter.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((*:<d,<n,d>> year:d -1:n)) => (DURATION,P1Y))
Update: {TEMPORAL_CONTEXT_temporal_ref_VBD=1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=-1.0, TEMPORAL_REFERENCE_temporal_reftemporal_refnotTempRef=1.0, TEMPORAL_TYPE_d=-1.0, TEMPORAL_TYPE_s=1.0}
Sample processing time 0.0070
1149 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Sales dropped to $441.1 million from $820.4 million, because the company no longer consolidates its Eastern Steel division, which is now a joint venture with Kawasaki Steel Corp.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
1150 : ================== [0]
Sample type: TemporalSentence
Phrase:            fiscal second quarter
Sentence:          National Intergroup, which owns 50% of the nation's sixth largest steelmaker -- National Steel Corp. -- posted net income for the fiscal second-quarter of $8.6 million, or 33 cents a share, compared with a net loss of $50.3 million.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q2
Executing the phrase: fiscal second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: fiscal second quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: fiscal second quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: fiscal second quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: fiscal second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 2o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)) => (DATE,1989-Q2)
Correct. No update.
Sample processing time 0.0040
1151 : ================== [0]
Sample type: TemporalSentence
Phrase:            quarter
Sentence:          Sales increased in the quarter ended Sept. 30 to $747.8 million from $623.5 million a year ago.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-QX
Executing the phrase: quarter
with logic: quarter:d
and lexical entries: [quarter :- NP : quarter:d]
Executing the phrase: quarter
with logic: quarter:d
and lexical entries: [quarter :- NP : quarter:d]
Executing the phrase: quarter
with logic: quarter:d
and lexical entries: [quarter :- NP : quarter:d]
Executing the phrase: quarter
with logic: quarter:d
and lexical entries: [quarter :- NP : quarter:d]
Executing the phrase: quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, ((temporal_ref:<d,s> quarter:d)) => (DATE,1989-Q1))
No correct parses. No update.
Sample processing time 0.0010
1152 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          Sales increased in the quarter ended Sept. 30 to $747.8 million from $623.5 million a year ago.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-09-30
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> september:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30)
Correct. No update.
Sample processing time 0.0010
1153 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          Sales increased in the quarter ended Sept. 30 to $747.8 million from $623.5 million a year ago.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-QX
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-09-30))
No correct parses. No update.
Sample processing time 0.0030
1154 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest period
Sentence:          The latest period includes gains of $9.1 million from early retirement of debt and tax loss carry-forward.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q2
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
No correct parses. No update.
Sample processing time 0.0010
1155 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          Last year's results were hurt by $41.3 million in restructuring charges.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q2
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
Bad violating parse: ((previous:<d,<r,s>> year:d ref_time:r), ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988))
No correct parses. No update.
Sample processing time 0.0010
1156 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest fiscal year
Sentence:          The non-food operations accounted for about 27% of Provigo's 7.38 billion Canadian dollars (US$6.3 billion) in sales in the latest fiscal year.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
No correct parses. No update.
Sample processing time 0.0010
1157 : ================== [0]
Sample type: TemporalSentence
Phrase:            1985
Sentence:          Mr. Lortie joined Provigo in 1985 and spearheaded the company's drive to grow outside its traditional food business.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1985
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (previous:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (this:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (next:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Correct parses:
1985:r => (1985:r) => (DATE,1985)
Correct. No update.
Sample processing time 0.0020
1158 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past two years
Sentence:          Provigo's profit record over the past two years tarnished the company's and Mr. Lortie's reputations.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P2Y
Executing the phrase: the past two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the past two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the past two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the past two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the past two years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 2:n) => ((*:<d,<n,d>> years:d 2:n)) => (DURATION,P2Y)
Bad violating parse: ((*:<d,<n,d>> years:d 2:n), ((temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))) => (DATE,1987))
Update: {TEMPORAL_CONTEXT_temporal_ref_VBD=-1.0, TEMPORAL_REFERENCE_temporal_ref_nonenotTempRef=1.0, TEMPORAL_REFERENCE_temporal_reftemporal_refnotTempRef=-1.0, TEMPORAL_TYPE_d=1.0, TEMPORAL_TYPE_s=-1.0}
Sample processing time 0.0020
1159 : ================== [0]
Sample type: TemporalSentence
Phrase:            the six months
Sentence:          For the six months ended Aug. 12, Provigo posted net income of C$6.5 million, or eight Canadian cents a share, compared with C$18.1 million, or 21 Canadian cents a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P6M
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 6:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 6:n) => ((*:<d,<n,d>> months:d 6:n)) => (DURATION,P6M)
Correct. No update.
Sample processing time 0.0020
1160 : ================== [0]
Sample type: TemporalSentence
Phrase:            aug. 12
Sentence:          For the six months ended Aug. 12, Provigo posted net income of C$6.5 million, or eight Canadian cents a share, compared with C$18.1 million, or 21 Canadian cents a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-08-12
Executing the phrase: aug. 12
with logic: (intersect:<s*,s> august:s 12d:s)
and lexical entries: [aug. :- NP : august:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: aug. 12
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 12d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: aug. 12
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 12d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: aug. 12
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 12d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: aug. 12
with logic: (intersect:<s*,s> august:s 12d:s)
and lexical entries: [aug. :- NP : august:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Correct parses:
(intersect:<s*,s> august:s 12d:s) => ((this:<s,<r,s>> (intersect:<s*,s> august:s 12d:s) ref_time:r)) => (DATE,1989-08-12)
Correct. No update.
Sample processing time 0.0020
1161 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          For the six months ended Aug. 12, Provigo posted net income of C$6.5 million, or eight Canadian cents a share, compared with C$18.1 million, or 21 Canadian cents a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-08-12
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-08-12)
Correct. No update.
Sample processing time 0.0040
1162 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          Last month, Canadian Bond Rating Service downgraded Provigo's commercial paper and debentures because of its lackluster performance.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-09
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0010
1163 : ================== [0]
Sample type: TemporalSentence
Phrase:            the fiscal first quarter
Sentence:          Delta Air Lines earnings soared 33% to a record in the fiscal first quarter, bucking the industry trend toward declining profits.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q1
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 1o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)) => (DATE,1989-Q1)
Correct. No update.
Sample processing time 0.0020
1164 : ================== [0]
Sample type: TemporalSentence
Phrase:            last spring
Sentence:          The Atlanta-based airline, the third largest in the U.S., attributed the increase to higher passenger traffic, new international routes and reduced service by rival Eastern Airlines, which is in bankruptcy proceedings in the wake of a strike that began last spring.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-SP
Executing the phrase: last spring
with logic: (previous:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), spring :- NP : spring:s]
Executing the phrase: last spring
with logic: (previous:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), spring :- NP : spring:s]
Executing the phrase: last spring
with logic: (previous:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), spring :- NP : spring:s]
Executing the phrase: last spring
with logic: (previous:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), spring :- NP : spring:s]
Executing the phrase: last spring
with logic: (previous:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), spring :- NP : spring:s]
Correct parses:
(previous:<s,<r,s>> spring:s ref_time:r) => ((previous:<s,<r,s>> spring:s ref_time:r)) => (DATE,1988-SP)
Correct. No update.
Sample processing time 0.0050
1165 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          For the quarter ended Sept. 30, Delta posted net income of $133.1 million, or $2.53 a share, up from $100 million, or $2.03 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-QX
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0010
1166 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          For the quarter ended Sept. 30, Delta posted net income of $133.1 million, or $2.53 a share, up from $100 million, or $2.03 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-09-30
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> september:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30)
Correct. No update.
Sample processing time 0.0020
1167 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          For the quarter ended Sept. 30, Delta posted net income of $133.1 million, or $2.53 a share, up from $100 million, or $2.03 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-09-30
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-09-30)
Correct. No update.
Sample processing time 0.0040
1168 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          During the quarter, Delta issued 2.5 million shares of common stock to Swissair, and repurchased 1.1 million shares for use in a company employee stock ownership plan.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-QX
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0010
1169 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Although Eastern is back to about 80% of its pre-strike schedule now, the Texas Air Corp. subsidiary was only beginning to get back on its feet during the quarter.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0020
1170 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          Although Eastern is back to about 80% of its pre-strike schedule now, the Texas Air Corp. subsidiary was only beginning to get back on its feet during the quarter.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-QX
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0030
1171 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Separately, America West Airlines, Phoenix, Ariz., reported third-quarter profit jumped 45% to $5.8 million, or 28 cents a share, from $4 million, or 24 cents a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
1172 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Separately, America West Airlines, Phoenix, Ariz., reported third-quarter profit jumped 45% to $5.8 million, or 28 cents a share, from $4 million, or 24 cents a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0040
1173 : ================== [0]
Sample type: TemporalSentence
Phrase:            year earlier
Sentence:          Year-earlier results included an extraordinary gain of $1.6 million from a buy-back of convertible subordinated debentures.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1987-Q3))
No correct parses. No update.
Sample processing time 0.0010
1174 : ================== [0]
Sample type: TemporalSentence
Phrase:            the nine months
Sentence:          For the nine months, America West posted earnings of $18.9 million, or 97 cents a share, compared with a loss of $9.7 million, or 74 cents a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0020
1175 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          For the nine months, America West posted earnings of $18.9 million, or 97 cents a share, compared with a loss of $9.7 million, or 74 cents a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,0))
No correct parses. No update.
Sample processing time 0.0030
1176 : ================== [0]
Sample type: TemporalSentence
Phrase:            the third quarter
Sentence:          Columbia Savings amp Loan Association, reeling from thrift-accounting changes mandated by Congress and the recent collapse of the junk-bond market, announced a loss for the third quarter of $226.3 million, or $11.57 a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0040
1177 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter a year ago
Sentence:          For the quarter a year ago, Columbia reported earnings of $16.3 million, or 37 cents a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0010
1178 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest quarter
Sentence:          Total assets increased to $12.7 billion in the latest quarter from $12.4 billion a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-QX
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
No correct parses. No update.
Sample processing time 0.0020
1179 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Total assets increased to $12.7 billion in the latest quarter from $12.4 billion a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-QX
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3))
No correct parses. No update.
Sample processing time 0.0020
1180 : ================== [0]
Sample type: TemporalSentence
Phrase:            recent years
Sentence:          Columbia owes its spectacular growth in recent years to its junk-bond portfolio, the largest of any U.S. thrift.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          PAST_REF
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Correct parses:
past_ref:r => (past_ref:r) => (DATE,PAST_REF)
Correct. No update.
Sample processing time 0.0020
1181 : ================== [0]
Sample type: TemporalSentence
Phrase:            the nine months
Sentence:          For the nine months, losses totaled $212 million, or $10.83 a share, compared with net income of $48.7 million, or $1.11 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P9M
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 9:n) => ((*:<d,<n,d>> months:d 9:n)) => (DURATION,P9M)
Correct. No update.
Sample processing time 0.0010
1182 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          For the nine months, losses totaled $212 million, or $10.83 a share, compared with net income of $48.7 million, or $1.11 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,0))
No correct parses. No update.
Sample processing time 0.0040
1183 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          Columbia also added $227.3 million to reserves for losses on the portfolio, increasing general reserves to $300 million, or about 6.7% of the total portfolio, as of Sept. 30.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-09-30
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> september:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30)
Correct. No update.
Sample processing time 0.0040
1184 : ================== [0]
Sample type: TemporalSentence
Phrase:            june 30
Sentence:          On June 30, loss reserves stood at $108.3 million.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-06-30
Executing the phrase: june 30
with logic: (intersect:<s*,s> june:s 30d:s)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (intersect:<s*,s> june:s 30d:s)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> june:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)) => (DATE,1989-06-30)
Correct. No update.
Sample processing time 0.0010
1185 : ================== [0]
Sample type: TemporalSentence
Phrase:            1994
Sentence:          The adjustments result from the recently passed thrift-industry bailout legislation, which requires thrifts to divest all high-yield bond investments by 1994.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1994
Executing the phrase: 1994
with logic: 1994:r
and lexical entries: [1994 :- NP : 1994:r]
Executing the phrase: 1994
with logic: (previous:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r]
Executing the phrase: 1994
with logic: (this:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r]
Executing the phrase: 1994
with logic: (next:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r]
Executing the phrase: 1994
with logic: 1994:r
and lexical entries: [1994 :- NP : 1994:r]
Correct parses:
1994:r => (1994:r) => (DATE,1994)
Correct. No update.
Sample processing time 0.0020
1186 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Because Columbia now must sell the bonds within five years, accounting rules require the thrift to value the bonds at the lower of cost or market prices.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
1187 : ================== [0]
Sample type: TemporalSentence
Phrase:            five years
Sentence:          Because Columbia now must sell the bonds within five years, accounting rules require the thrift to value the bonds at the lower of cost or market prices.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P5Y
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Correct parses:
(*:<d,<n,d>> years:d 5:n) => ((*:<d,<n,d>> years:d 5:n)) => (DURATION,P5Y)
Correct. No update.
Sample processing time 0.0020
1188 : ================== [0]
Sample type: TemporalSentence
Phrase:            august
Sentence:          The price of Columbia shares has been cut nearly in half since August, when they traded at about $10, as investors apparently realized that the thrift would be forced to take a big write-down.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-08
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (this:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (next:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Correct parses:
august:s => ((this:<s,<r,s>> august:s ref_time:r)) => (DATE,1989-08)
Correct. No update.
Sample processing time 0.0020
1189 : ================== [0]
Sample type: TemporalSentence
Phrase:            the past two weeks
Sentence:          The stock's decline accelerated in the past two weeks, from a price of $8 a share on Oct. 9.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P2W
Executing the phrase: the past two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the past two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the past two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the past two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the past two weeks
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> weeks:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Correct parses:
(*:<d,<n,d>> weeks:d 2:n) => ((*:<d,<n,d>> weeks:d 2:n)) => (DURATION,P2W)
Correct. No update.
Sample processing time 0.0030
1190 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 9
Sentence:          The stock's decline accelerated in the past two weeks, from a price of $8 a share on Oct. 9.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-09
Executing the phrase: oct. 9
with logic: (intersect:<s*,s> october:s 9d:s)
and lexical entries: [oct. :- NP : october:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: oct. 9
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 9d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: oct. 9
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 9d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: oct. 9
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 9d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: oct. 9
with logic: (intersect:<s*,s> october:s 9d:s)
and lexical entries: [oct. :- NP : october:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Correct parses:
(intersect:<s*,s> october:s 9d:s) => ((this:<s,<r,s>> (intersect:<s*,s> october:s 9d:s) ref_time:r)) => (DATE,1989-10-09)
Correct. No update.
Sample processing time 0.0020
1191 : ================== [0]
Sample type: TemporalSentence
Phrase:            year's end
Sentence:          Columbia officials also said the thrift shouldn't face problems meeting regulatory capital requirements, despite the large reserves and write-downs and stiffer regulatory requirements that should be in place by year's end.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
No correct parses. No update.
Sample processing time 0.0000
1192 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          Its ratio of tangible equity to total assets as of Sept. 30 was 3.6%, and total equity was $457.9 million.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-09-30
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> september:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30)
Correct. No update.
Sample processing time 0.0020
1193 : ================== [0]
Sample type: TemporalSentence
Phrase:            days
Sentence:          With the passing of the heady days of swelling industry sales, however, the once-sporadic and brief forays into discounting are becoming standard competitive weapons in the beer industry.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          PXD
Executing the phrase: days
with logic: days:d
and lexical entries: [days :- NP : days:d]
Executing the phrase: days
with logic: days:d
and lexical entries: [days :- NP : days:d]
Executing the phrase: days
with logic: days:d
and lexical entries: [days :- NP : days:d]
Executing the phrase: days
with logic: days:d
and lexical entries: [days :- NP : days:d]
Executing the phrase: days
with logic: days:d
and lexical entries: [days :- NP : days:d]
Correct parses:
days:d => (days:d) => (DURATION,PXD)
Correct. No update.
Sample processing time 0.0020
1194 : ================== [0]
Sample type: TemporalSentence
Phrase:            summer
Sentence:          Over the summer, Anheuser competitors offered more and deeper discounts than industry observers have seen for a long time.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-SU
Executing the phrase: summer
with logic: summer:s
and lexical entries: [summer :- NP : summer:s]
Executing the phrase: summer
with logic: (previous:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [summer :- NP : summer:s]
Executing the phrase: summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [summer :- NP : summer:s]
Executing the phrase: summer
with logic: (next:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [summer :- NP : summer:s]
Executing the phrase: summer
with logic: summer:s
and lexical entries: [summer :- NP : summer:s]
Correct parses:
summer:s => ((this:<s,<r,s>> summer:s ref_time:r)) => (DATE,1989-SU)
Correct. No update.
Sample processing time 0.0010
1195 : ================== [0]
Sample type: TemporalSentence
Phrase:            now
Sentence:          Some experts now predict Anheuser's entry into the fray means near-term earnings trouble for all the industry players.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          PRESENT_REF
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Correct parses:
present_ref:r => (present_ref:r) => (DATE,PRESENT_REF)
Correct. No update.
Sample processing time 0.0010
1196 : ================== [0]
Sample type: TemporalSentence
Phrase:            at least the past 18 months
Sentence:          The St. Louis company said major rivals, Philip Morris Co.'s Miller Brewing unit and Adolph Coors Co. "have been following a policy of continuous and deep discounting for at least the past 18 months" on their premium brands, pricing their product as much as 25 cents a 12-pack below Anheuser's Budweiser label in many markets.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P18M
Executing the phrase: at least the past 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: at least the past 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: at least the past 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: at least the past 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: at least the past 18 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 18:n))
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 18:n) => ((*:<d,<n,d>> months:d 18:n)) => (DURATION,P18M)
Correct. No update.
Sample processing time 0.0060
1197 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Anheuser-Busch announced its plan at the same time it reported third-quarter net income rose a lower-than-anticipated 5.2% to $238.3 million, or 83 cents a share, from $226.5 million, or 78 cents.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
1198 : ================== [0]
Sample type: TemporalSentence
Phrase:            last month
Sentence:          Anheuser said its new strategy -- started in some markets last month and expected to be applied soon in selected markets nationwide -- will mean lower-than-anticipated earnings for the last half of 1989 and for 1990.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-09
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Correct parses:
(previous:<d,<r,s>> month:d ref_time:r) => ((previous:<d,<r,s>> month:d ref_time:r)) => (DATE,1989-09)
Correct. No update.
Sample processing time 0.0020
1199 : ================== [0]
Sample type: TemporalSentence
Phrase:            the last half of 1989
Sentence:          Anheuser said its new strategy -- started in some markets last month and expected to be applied soon in selected markets nationwide -- will mean lower-than-anticipated earnings for the last half of 1989 and for 1990.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-H2
Executing the phrase: the last half of 1989
with logic: 1989:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last half of :- NP/NP : (lambda $0:r $0), 1989 :- NP : 1989:r]
Executing the phrase: the last half of 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last half of :- NP/NP : (lambda $0:r $0), 1989 :- NP : 1989:r]
Executing the phrase: the last half of 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last half of :- NP/NP : (lambda $0:r $0), 1989 :- NP : 1989:r]
Executing the phrase: the last half of 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last half of :- NP/NP : (lambda $0:r $0), 1989 :- NP : 1989:r]
Executing the phrase: the last half of 1989
with logic: 1989:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last half of :- NP/NP : (lambda $0:r $0), 1989 :- NP : 1989:r]
Bad violating parse: (1989:r, ((this:<s,<r,s>> 1989:r ref_time:r)) => (DATE,1989))
No correct parses. No update.
Sample processing time 0.0040
1200 : ================== [0]
Sample type: TemporalSentence
Phrase:            1990
Sentence:          Anheuser said its new strategy -- started in some markets last month and expected to be applied soon in selected markets nationwide -- will mean lower-than-anticipated earnings for the last half of 1989 and for 1990.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0030
1201 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          The projection sent Anheuser shares plunging $4.375 in New York Stock Exchange composite trading yesterday.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0020
1202 : ================== [0]
Sample type: TemporalSentence
Phrase:            1989
Sentence:          Anheuser noted that "beer industry sales volume is 1989 is following the trend that has characterized the last half of the '80s, with sales volume being essentially flat" while consolidation creates fewer, bigger players.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Correct parses:
1989:r => (1989:r) => (DATE,1989)
Correct. No update.
Sample processing time 0.0020
1203 : ================== [0]
Sample type: TemporalSentence
Phrase:            the last half of the '80s
Sentence:          Anheuser noted that "beer industry sales volume is 1989 is following the trend that has characterized the last half of the '80s, with sales volume being essentially flat" while consolidation creates fewer, bigger players.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          198
No correct parses. No update.
Sample processing time 0.0010
1204 : ================== [0]
Sample type: TemporalSentence
Phrase:            the mid 1990s
Sentence:          Anheuser said it continues to hold to its earlier-announced goal of a 50% U.S. market share by the mid-1990s.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          199
Executing the phrase: the mid 1990s
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), mid :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the mid 1990s
with logic: (previous:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), mid :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the mid 1990s
with logic: (this:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), mid :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the mid 1990s
with logic: (next:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), mid :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the mid 1990s
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), mid :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Correct parses:
199:r => (199:r) => (DATE,199)
Correct. No update.
Sample processing time 0.0030
1205 : ================== [0]
Sample type: TemporalSentence
Phrase:            the current year
Sentence:          Beneath the tepid news-release jargon lies a powerful threat from the brewing giant, which last year accounted for about 41% of all U.S. beer sales and is expected to see that grow to 42.5% in the current year.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
Executing the phrase: the current year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the current year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the current year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the current year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the current year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0040
1206 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          But Smith Barney's Mr. Doyle, who yesterday trimmed his 1990 Anheuser earnings projection to $2.95 a share from $3.10, called the market's reaction "justified."
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0020
1207 : ================== [0]
Sample type: TemporalSentence
Phrase:            1990
Sentence:          But Smith Barney's Mr. Doyle, who yesterday trimmed his 1990 Anheuser earnings projection to $2.95 a share from $3.10, called the market's reaction "justified."
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Correct parses:
1990:r => (1990:r) => (DATE,1990)
Correct. No update.
Sample processing time 0.0010
1208 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          While the third-quarter earnings were a "moderate disappointment," he said, "the real bad news is the intensity of price competition" in the premium-beer sector.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0010
1209 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          According to Mr. Steinman, the newsletter publisher, Anheuser's market share is nearly twice that of its nearest competitor, Miller Brewing, which had a 21.2% stake last year.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0040
1210 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Sotheby's Holdings Inc., the parent of the auction house Sotheby's, said its net loss for the seasonally slow third quarter narrowed from a year earlier on a leap in operating revenue.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
1211 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year earlier
Sentence:          Sotheby's Holdings Inc., the parent of the auction house Sotheby's, said its net loss for the seasonally slow third quarter narrowed from a year earlier on a leap in operating revenue.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0030
1212 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          The New York-based company reported a third-quarter net loss of $5.1 million, or 10 cents a share, compared with a year-earlier net loss of $6.2 million, or 12 cents a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0010
1213 : ================== [0]
Sample type: TemporalSentence
Phrase:            year earlier
Sentence:          The New York-based company reported a third-quarter net loss of $5.1 million, or 10 cents a share, compared with a year-earlier net loss of $6.2 million, or 12 cents a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0030
1214 : ================== [0]
Sample type: TemporalSentence
Phrase:            the latest period
Sentence:          Operating revenue surged 54% in the latest period to $42.9 million from $27.7 million.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-QX
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
Bad violating parse: ((previous:<d,<r,s>> quarter:d ref_time:r), ((previous:<d,<r,s>> quarter:d ref_time:r)) => (DATE,1989-Q3))
No correct parses. No update.
Sample processing time 0.0020
1215 : ================== [0]
Sample type: TemporalSentence
Phrase:            second
Sentence:          The company said 80% of its auction business is usually conducted in the second and fourth quarters, with the current quarter having begun " extremely well."
ref_time:          1989-10-26
Gold type:         SET
gold val:          XXXX-Q2
No correct parses. No update.
Sample processing time 0.0000
1216 : ================== [0]
Sample type: TemporalSentence
Phrase:            fourth quarters
Sentence:          The company said 80% of its auction business is usually conducted in the second and fourth quarters, with the current quarter having begun " extremely well."
ref_time:          1989-10-26
Gold type:         SET
gold val:          XXXX-Q4
Executing the phrase: fourth quarters
with logic: (nth:<d,<n,s>> quarters:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarters :- NP : quarters:d]
Executing the phrase: fourth quarters
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarters:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarters :- NP : quarters:d]
Executing the phrase: fourth quarters
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarters:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarters :- NP : quarters:d]
Executing the phrase: fourth quarters
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarters:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarters :- NP : quarters:d]
Executing the phrase: fourth quarters
with logic: (nth:<d,<n,s>> quarters:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarters :- NP : quarters:d]
Bad violating parse: ((nth:<d,<n,s>> quarters:d 4o:n), ((this:<s,<r,s>> (nth:<d,<n,s>> quarters:d 4o:n) ref_time:r)) => (DATE,1989-Q4))
No correct parses. No update.
Sample processing time 0.0030
1217 : ================== [0]
Sample type: TemporalSentence
Phrase:            the current quarter
Sentence:          The company said 80% of its auction business is usually conducted in the second and fourth quarters, with the current quarter having begun " extremely well."
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q4
Executing the phrase: the current quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the current quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the current quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the current quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the current quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Bad violating parse: ((this:<d,<r,s>> quarter:d ref_time:r), ((this:<d,<r,s>> quarter:d ref_time:r)) => (DATE,XXXX-QX))
Bad violating parse: ((this:<d,<r,s>> quarter:d ref_time:r), ((this:<d,<r,s>> quarter:d ref_time:r)) => (DATE,XXXX-QX))
Bad violating parse: ((this:<d,<r,s>> quarter:d ref_time:r), ((this:<d,<r,s>> quarter:d ref_time:r)) => (DATE,XXXX-QX))
Bad violating parse: ((this:<d,<r,s>> quarter:d ref_time:r), ((this:<d,<r,s>> quarter:d ref_time:r)) => (DATE,XXXX-QX))
Bad violating parse: ((this:<d,<r,s>> quarter:d ref_time:r), ((this:<d,<r,s>> quarter:d ref_time:r)) => (DATE,XXXX-QX))
No correct parses. No update.
Sample processing time 0.0020
1218 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 8
Sentence:          The giant foods, tobacco and brewing company said it will issue common-share purchase rights to shareholders of record Nov. 8.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-11-08
Executing the phrase: nov. 8
with logic: (intersect:<s*,s> november:s 8d:s)
and lexical entries: [nov. :- NP : november:s, 8 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 8d:s))]
Executing the phrase: nov. 8
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 8d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 8 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 8d:s))]
Executing the phrase: nov. 8
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 8d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 8 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 8d:s))]
Executing the phrase: nov. 8
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 8d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 8 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 8d:s))]
Executing the phrase: nov. 8
with logic: (intersect:<s*,s> november:s 8d:s)
and lexical entries: [nov. :- NP : november:s, 8 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 8d:s))]
Correct parses:
(intersect:<s*,s> november:s 8d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 8d:s) ref_time:r)) => (DATE,1989-11-08)
Correct. No update.
Sample processing time 0.0030
1219 : ================== [0]
Sample type: TemporalSentence
Phrase:            sept. 30
Sentence:          As of Sept. 30, Philip Morris had 926 million shares outstanding.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-09-30
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Correct parses:
(intersect:<s*,s> september:s 30d:s) => ((this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)) => (DATE,1989-09-30)
Correct. No update.
Sample processing time 0.0010
1220 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          In composite trading on the New York Stock Exchange, Philip Morris shares closed yesterday at $43.50 each, down $1.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0020
1221 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          In New York Stock Exchange composite trading, Esselte closed yesterday at $43.50 a share, up $1.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0020
1222 : ================== [0]
Sample type: TemporalSentence
Phrase:            oct. 31
Sentence:          A committee of outside directors for the Garden City, N.Y., unit is evaluating the proposal; the parent asked it to respond by Oct. 31.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-31
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Correct parses:
(intersect:<s*,s> october:s 31d:s) => ((next:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)) => (DATE,1989-10-31)
Correct. No update.
Sample processing time 0.0030
1223 : ================== [0]
Sample type: TemporalSentence
Phrase:            five years ago
Sentence:          Esselte AB sold the minority stake five years ago in a $40 million international share offering.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1984
Executing the phrase: five years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Correct parses:
(previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r) => ((previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r)) => (DATE,1984)
Correct. No update.
Sample processing time 0.0030
1224 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          The unit, which is the holding company for Esselte's non-Swedish units, accounted for 58% of sales and 71% of operating profit last year.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0030
1225 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Separately, Esselte Business Systems reported third-quarter net income fell 5.9% to $9.5 million, or 46 cents a share, from $10.1 million, or 49 cents a share, in the year-ago period.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
1226 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year ago period
Sentence:          Separately, Esselte Business Systems reported third-quarter net income fell 5.9% to $9.5 million, or 46 cents a share, from $10.1 million, or 49 cents a share, in the year-ago period.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0010
1227 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          reported a 77% drop in third-quarter net income, citing expected losses in its Emery Worldwide shipping business.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0020
1228 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          The Menlo Park, Calif., company said net was $7.4 million, or 22 cents a share, down from $32.3 million, or 86 cents a share, a year ago.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Correct parses:
(*:<d,<n,d>> year:d -1:n) => ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3)
Correct. No update.
Sample processing time 0.0030
1229 : ================== [0]
Sample type: TemporalSentence
Phrase:            earlier this year
Sentence:          Revenue totaled $1.01 billion, a 43% increase from $704.4 million, reflecting the company's acquisition of Emery earlier this year.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(this:<d,<r,s>> year:d ref_time:r) => ((this:<d,<r,s>> year:d ref_time:r)) => (DATE,1989)
Correct. No update.
Sample processing time 0.0030
1230 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          Analysts had expected Consolidated to post a slim profit, and the company's stock was down only 25 cents to $30.25 in New York Stock Exchange composite trading yesterday.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0030
1231 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Benjamin Franklin Federal Savings amp Loan Association said it plans to restructure in the wake of a third-quarter loss of $7.7 million, or $1.01 a share, reflecting an $11 million addition to loan-loss reserves.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
1232 : ================== [0]
Sample type: TemporalSentence
Phrase:            a year ago
Sentence:          A year ago, Benjamin Franklin had profit of $1.8 million, or 23 cents a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Bad violating parse: ((*:<d,<n,d>> year:d -1:n), ((temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))) => (DATE,1988-Q3))
No correct parses. No update.
Sample processing time 0.0010
1233 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          In over-the-counter trading yesterday, Benjamin Franklin rose 25 cents to $4.25.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0010
1234 : ================== [0]
Sample type: TemporalSentence
Phrase:            within 18 months
Sentence:          The plan may include selling branches, consolidating or eliminating departments, and winding down or disposing of unprofitable units within 18 months.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P18M
Executing the phrase: within 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [within :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: within 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [within :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: within 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [within :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: within 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [within :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: within 18 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 18:n))
and lexical entries: [within :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Correct parses:
(*:<d,<n,d>> months:d 18:n) => ((*:<d,<n,d>> months:d 18:n)) => (DURATION,P18M)
Correct. No update.
Sample processing time 0.0030
1235 : ================== [0]
Sample type: TemporalSentence
Phrase:            third quarter
Sentence:          Amdahl Corp., a maker of mainframe computers, reported a sharp decline in net income for its third quarter, citing pricecutting by competitors and adverse effects from a strong U.S. dollar.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Correct parses:
(nth:<d,<n,s>> quarter:d 3o:n) => ((this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)) => (DATE,1989-Q3)
Correct. No update.
Sample processing time 0.0030
1236 : ================== [0]
Sample type: TemporalSentence
Phrase:            the year ago period
Sentence:          Net income fell 37% to $32.9 million, or 30 cents a share, from $52.2 million, or 48 cents a share, in the year-ago period.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No correct parses. No update.
Sample processing time 0.0000
1237 : ================== [0]
Sample type: TemporalSentence
Phrase:            the quarter
Sentence:          Jay Stevens, an analyst with Dean Witter Reynolds, said he expected the Sunnyvale, Calif., company to earn 35 cents a share for the quarter and said the firm's weaker profit was partly the result of increased competition from International Business Machines Corp., Amdahl's principal competitor for mainframe sales.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
Bad violating parse: (quarter:d, (quarter:d) => (DURATION,P1Q))
No correct parses. No update.
Sample processing time 0.0030
1238 : ================== [0]
Sample type: TemporalSentence
Phrase:            dec. 15
Sentence:          declared a 10% stock dividend, payable Dec. 15 to stock of record Nov. 17.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-12-15
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Correct parses:
(intersect:<s*,s> december:s 15d:s) => ((next:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)) => (DATE,1989-12-15)
Correct. No update.
Sample processing time 0.0020
1239 : ================== [0]
Sample type: TemporalSentence
Phrase:            nov. 17
Sentence:          declared a 10% stock dividend, payable Dec. 15 to stock of record Nov. 17.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-11-17
Executing the phrase: nov. 17
with logic: (intersect:<s*,s> november:s 17d:s)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (intersect:<s*,s> november:s 17d:s)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Correct parses:
(intersect:<s*,s> november:s 17d:s) => ((next:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)) => (DATE,1989-11-17)
Correct. No update.
Sample processing time 0.0020
1240 : ================== [0]
Sample type: TemporalSentence
Phrase:            yesterday
Sentence:          In New York Stock Exchange composite trading yesterday, Oneida's shares closed at $18.375 a share, unchanged.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-10-25
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Correct parses:
yesterday:r => (yesterday:r) => (DATE,1989-10-25)
Correct. No update.
Sample processing time 0.0020
1241 : ================== [0]
Sample type: TemporalSentence
Phrase:            90 days
Sentence:          The warrants may be exercised until 90 days after their issue date.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P90D
Executing the phrase: 90 days
with logic: (*:<d,<n,d>> days:d 90:n)
and lexical entries: [90 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 90:n)), days :- NP : days:d]
Executing the phrase: 90 days
with logic: (*:<d,<n,d>> days:d 90:n)
and lexical entries: [90 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 90:n)), days :- NP : days:d]
Executing the phrase: 90 days
with logic: (*:<d,<n,d>> days:d 90:n)
and lexical entries: [90 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 90:n)), days :- NP : days:d]
Executing the phrase: 90 days
with logic: (*:<d,<n,d>> days:d 90:n)
and lexical entries: [90 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 90:n)), days :- NP : days:d]
Executing the phrase: 90 days
with logic: (*:<d,<n,d>> days:d 90:n)
and lexical entries: [90 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 90:n)), days :- NP : days:d]
Correct parses:
(*:<d,<n,d>> days:d 90:n) => ((*:<d,<n,d>> days:d 90:n)) => (DURATION,P90D)
Correct. No update.
Sample processing time 0.0010
1242 : ================== [0]
Sample type: TemporalSentence
Phrase:            last year
Sentence:          The unit makes intravenous pumps used by hospitals and had more than $110 million in sales last year, according to Advanced Medical.
ref_time:          1989-10-25
Gold type:         DATE
gold val:          1988
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Correct parses:
(previous:<d,<r,s>> year:d ref_time:r) => ((previous:<d,<r,s>> year:d ref_time:r)) => (DATE,1988)
Correct. No update.
Sample processing time 0.0020
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: the last twenty four hours
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), twenty four hours :- NP : (*:<d,<n,d>> day:d 1:n)]
Executing the phrase: the last twenty four hours
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), twenty four hours :- NP : (*:<d,<n,d>> day:d 1:n)]
Executing the phrase: the last twenty four hours
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), twenty four hours :- NP : (*:<d,<n,d>> day:d 1:n)]
Executing the phrase: the last twenty four hours
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), twenty four hours :- NP : (*:<d,<n,d>> day:d 1:n)]
Executing the phrase: the last twenty four hours
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> day:d 1:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), twenty four hours :- NP : (*:<d,<n,d>> day:d 1:n)]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: four year
with logic: (*:<d,<n,d>> year:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), year :- NP : year:d]
Executing the phrase: four year
with logic: (*:<d,<n,d>> year:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), year :- NP : year:d]
Executing the phrase: four year
with logic: (*:<d,<n,d>> year:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), year :- NP : year:d]
Executing the phrase: four year
with logic: (*:<d,<n,d>> year:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), year :- NP : year:d]
Executing the phrase: four year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 4:n))
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), year :- NP : year:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: october
with logic: october:s
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (previous:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (this:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (next:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: october:s
and lexical entries: [october :- NP : october:s]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: the past three months
with logic: (*:<d,<n,d>> months:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: (*:<d,<n,d>> months:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: (*:<d,<n,d>> months:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: (*:<d,<n,d>> months:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the past three months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 3:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: ten years
with logic: (*:<d,<n,d>> years:d 10:n)
and lexical entries: [ten :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), years :- NP : years:d]
Executing the phrase: ten years
with logic: (*:<d,<n,d>> years:d 10:n)
and lexical entries: [ten :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), years :- NP : years:d]
Executing the phrase: ten years
with logic: (*:<d,<n,d>> years:d 10:n)
and lexical entries: [ten :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), years :- NP : years:d]
Executing the phrase: ten years
with logic: (*:<d,<n,d>> years:d 10:n)
and lexical entries: [ten :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), years :- NP : years:d]
Executing the phrase: ten years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 10:n))
and lexical entries: [ten :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), years :- NP : years:d]
Executing the phrase: a couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, a couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: a couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, a couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: a couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, a couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: a couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, a couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: a couple of years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, a couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]

Phrase:            a minute and a half
Sentence:          But a minute and a half later, a pilot from a nearby flight calls in.
ref_time:          1998-01-14
Gold type:         DURATION
gold val:          PT1M30S
No parses! Will implement something to throw out words and try again.
Executing the phrase: nearly forty years
with logic: (*:<d,<n,d>> years:d 40:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), forty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 40:n)), years :- NP : years:d]
Executing the phrase: nearly forty years
with logic: (*:<d,<n,d>> years:d 40:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), forty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 40:n)), years :- NP : years:d]
Executing the phrase: nearly forty years
with logic: (*:<d,<n,d>> years:d 40:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), forty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 40:n)), years :- NP : years:d]
Executing the phrase: nearly forty years
with logic: (*:<d,<n,d>> years:d 40:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), forty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 40:n)), years :- NP : years:d]
Executing the phrase: nearly forty years
with logic: (*:<d,<n,d>> years:d 40:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), forty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 40:n)), years :- NP : years:d]

Phrase:            this evening
Sentence:          At the end of the broadcast this evening, one more trip around Havana to see what it's been like since the last time.
ref_time:          1998-01-20
Gold type:         TIME
gold val:          1998-01-20TEV
No parses! Will implement something to throw out words and try again.
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 20:n))
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: some time
with logic: months:d
and lexical entries: [some time :- NP : months:d]
Executing the phrase: some time
with logic: months:d
and lexical entries: [some time :- NP : months:d]
Executing the phrase: some time
with logic: months:d
and lexical entries: [some time :- NP : months:d]
Executing the phrase: some time
with logic: months:d
and lexical entries: [some time :- NP : months:d]
Executing the phrase: some time
with logic: (temporal_ref:<d,s> months:d)
and lexical entries: [some time :- NP : months:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: august 1988
with logic: (intersect:<s*,s> 1988:r august:s)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (intersect:<s*,s> 1988:r august:s)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 8:n))
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: aug. 2
with logic: (intersect:<s*,s> august:s 2d:s)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (intersect:<s*,s> august:s 2d:s)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: up to 180 days
with logic: (*:<d,<n,d>> days:d 180:n)
and lexical entries: [up to :- NP/NP : (lambda $0:d $0), 180 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 180:n)), days :- NP : days:d]
Executing the phrase: up to 180 days
with logic: (*:<d,<n,d>> days:d 180:n)
and lexical entries: [up to :- NP/NP : (lambda $0:d $0), 180 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 180:n)), days :- NP : days:d]
Executing the phrase: up to 180 days
with logic: (*:<d,<n,d>> days:d 180:n)
and lexical entries: [up to :- NP/NP : (lambda $0:d $0), 180 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 180:n)), days :- NP : days:d]
Executing the phrase: up to 180 days
with logic: (*:<d,<n,d>> days:d 180:n)
and lexical entries: [up to :- NP/NP : (lambda $0:d $0), 180 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 180:n)), days :- NP : days:d]
Executing the phrase: up to 180 days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 180:n))
and lexical entries: [up to :- NP/NP : (lambda $0:d $0), 180 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 180:n)), days :- NP : days:d]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: aug. 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: this crucial moment
with logic: present_ref:r
and lexical entries: [this crucial moment :- NP : present_ref:r]
Executing the phrase: this crucial moment
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [this crucial moment :- NP : present_ref:r]
Executing the phrase: this crucial moment
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [this crucial moment :- NP : present_ref:r]
Executing the phrase: this crucial moment
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [this crucial moment :- NP : present_ref:r]
Executing the phrase: this crucial moment
with logic: present_ref:r
and lexical entries: [this crucial moment :- NP : present_ref:r]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: eighth day
with logic: (nth:<d,<n,s>> day:d 8o:n)
and lexical entries: [eighth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 8o:n)), day :- NP : day:d]
Executing the phrase: eighth day
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> day:d 8o:n) ref_time:r)
and lexical entries: [eighth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 8o:n)), day :- NP : day:d]
Executing the phrase: eighth day
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> day:d 8o:n) ref_time:r)
and lexical entries: [eighth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 8o:n)), day :- NP : day:d]
Executing the phrase: eighth day
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> day:d 8o:n) ref_time:r)
and lexical entries: [eighth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 8o:n)), day :- NP : day:d]
Executing the phrase: eighth day
with logic: (nth:<d,<n,s>> day:d 8o:n)
and lexical entries: [eighth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 8o:n)), day :- NP : day:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: weeks
with logic: weeks:d
and lexical entries: [weeks :- NP : weeks:d]
Executing the phrase: weeks
with logic: weeks:d
and lexical entries: [weeks :- NP : weeks:d]
Executing the phrase: weeks
with logic: weeks:d
and lexical entries: [weeks :- NP : weeks:d]
Executing the phrase: weeks
with logic: weeks:d
and lexical entries: [weeks :- NP : weeks:d]
Executing the phrase: weeks
with logic: (temporal_ref:<d,s> weeks:d)
and lexical entries: [weeks :- NP : weeks:d]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> week:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two hour
with logic: (*:<d,<n,d>> hour:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), hour :- NP : hour:d]
Executing the phrase: two hour
with logic: (*:<d,<n,d>> hour:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), hour :- NP : hour:d]
Executing the phrase: two hour
with logic: (*:<d,<n,d>> hour:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), hour :- NP : hour:d]
Executing the phrase: two hour
with logic: (*:<d,<n,d>> hour:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), hour :- NP : hour:d]
Executing the phrase: two hour
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> hour:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), hour :- NP : hour:d]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: aug. 2
with logic: (intersect:<s*,s> august:s 2d:s)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 2d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: aug. 2
with logic: (intersect:<s*,s> august:s 2d:s)
and lexical entries: [aug. :- NP : august:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]

Phrase:            a fairly lengthy period
Sentence:          ``We're there to stay for a fairly lengthy period.''
ref_time:          1990-08-16
Gold type:         DURATION
gold val:          PXX
No parses! Will implement something to throw out words and try again.
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]

Phrase:            a day earlier
Sentence:          A day earlier, scores of trucks, many with Iraqi license plates, streamed north out of Aqaba to Amman and onto the desert highway bound for Iraq.
ref_time:          1990-08-16
Gold type:         DURATION
gold val:          P1D
No parses! Will implement something to throw out words and try again.
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: 210 years
with logic: (*:<d,<n,d>> years:d 210:n)
and lexical entries: [210 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 210:n)), years :- NP : years:d]
Executing the phrase: 210 years
with logic: (*:<d,<n,d>> years:d 210:n)
and lexical entries: [210 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 210:n)), years :- NP : years:d]
Executing the phrase: 210 years
with logic: (*:<d,<n,d>> years:d 210:n)
and lexical entries: [210 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 210:n)), years :- NP : years:d]
Executing the phrase: 210 years
with logic: (*:<d,<n,d>> years:d 210:n)
and lexical entries: [210 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 210:n)), years :- NP : years:d]
Executing the phrase: 210 years
with logic: (*:<d,<n,d>> years:d 210:n)
and lexical entries: [210 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 210:n)), years :- NP : years:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: 2000
with logic: 2000:r
and lexical entries: [2000 :- NP : 2000:r]
Executing the phrase: 2000
with logic: (previous:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [2000 :- NP : 2000:r]
Executing the phrase: 2000
with logic: (this:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [2000 :- NP : 2000:r]
Executing the phrase: 2000
with logic: (next:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [2000 :- NP : 2000:r]
Executing the phrase: 2000
with logic: 2000:r
and lexical entries: [2000 :- NP : 2000:r]
Executing the phrase: several years ago
with logic: past_ref:r
and lexical entries: [several years ago :- NP : past_ref:r]
Executing the phrase: several years ago
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [several years ago :- NP : past_ref:r]
Executing the phrase: several years ago
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [several years ago :- NP : past_ref:r]
Executing the phrase: several years ago
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [several years ago :- NP : past_ref:r]
Executing the phrase: several years ago
with logic: past_ref:r
and lexical entries: [several years ago :- NP : past_ref:r]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: 1901
with logic: 1901:r
and lexical entries: [1901 :- NP : 1901:r]
Executing the phrase: 1901
with logic: (previous:<s,<r,s>> 1901:r ref_time:r)
and lexical entries: [1901 :- NP : 1901:r]
Executing the phrase: 1901
with logic: (this:<s,<r,s>> 1901:r ref_time:r)
and lexical entries: [1901 :- NP : 1901:r]
Executing the phrase: 1901
with logic: (next:<s,<r,s>> 1901:r ref_time:r)
and lexical entries: [1901 :- NP : 1901:r]
Executing the phrase: 1901
with logic: 1901:r
and lexical entries: [1901 :- NP : 1901:r]
Executing the phrase: 20th century
with logic: 19:r
and lexical entries: [20th century :- NP : 19:r]
Executing the phrase: 20th century
with logic: (previous:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [20th century :- NP : 19:r]
Executing the phrase: 20th century
with logic: (this:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [20th century :- NP : 19:r]
Executing the phrase: 20th century
with logic: (next:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [20th century :- NP : 19:r]
Executing the phrase: 20th century
with logic: 19:r
and lexical entries: [20th century :- NP : 19:r]
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> years:d 100:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> years:d 100:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> years:d 100:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (*:<d,<n,d>> years:d 100:n)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: almost a hundred years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 100:n))
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), hundred :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 100:n)), years :- NP : years:d]
Executing the phrase: 1996
with logic: 1996:r
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (previous:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (this:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (next:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: 1996:r
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (this:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (next:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: a month
with logic: month:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: a month
with logic: month:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: a month
with logic: month:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: a month
with logic: month:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: a month
with logic: (temporal_ref:<d,s> month:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]

Phrase:            tuesday nights
Sentence:          In a joint statement with Tourism Minister Andrew Thomson, it said two new flights would leave Bombay on Monday and Tuesday nights from March 30, with the third departing each Thursday from August 6.
ref_time:          1998-02-13
Gold type:         SET
gold val:          XXXX-WXX-2TNI
No parses! Will implement something to throw out words and try again.
Executing the phrase: march 30
with logic: (intersect:<s*,s> march:s 30d:s)
and lexical entries: [march :- NP : march:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: march 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> march:s 30d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: march 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> march:s 30d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: march 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> march:s 30d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: march 30
with logic: (intersect:<s*,s> march:s 30d:s)
and lexical entries: [march :- NP : march:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]

Phrase:            each thursday
Sentence:          In a joint statement with Tourism Minister Andrew Thomson, it said two new flights would leave Bombay on Monday and Tuesday nights from March 30, with the third departing each Thursday from August 6.
ref_time:          1998-02-13
Gold type:         SET
gold val:          XXXX-WXX-4
No parses! Will implement something to throw out words and try again.
Executing the phrase: august 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [august :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: august 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [august :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: august 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [august :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: august 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [august :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: august 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [august :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]

Phrase:            10 p.m. wednesday
Sentence:          Hernandez was kidnapped from his small, neighborhood store in the town of Trujillo Alto at 10 p.m. Wednesday, police said.
ref_time:          1998-02-13
Gold type:         TIME
gold val:          1998-02-11T22:00
No parses! Will implement something to throw out words and try again.

Phrase:            noon thursday
Sentence:          His kidnappers demanded a ransom of dlrs 1 million, but negotiations broke off at noon Thursday.
ref_time:          1998-02-13
Gold type:         TIME
gold val:          1998-02-12T12:00
No parses! Will implement something to throw out words and try again.
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: almost two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: almost two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: almost two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: almost two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: almost two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [almost :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: the next two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> weeks:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the next two weeks
with logic: (next:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: march 1996
with logic: (intersect:<s*,s> march:s 1996:r)
and lexical entries: [march :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 march:s)), 1996 :- NP : 1996:r, march :- NP : march:s, 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 1996
with logic: (previous:<s,<r,s>> (intersect:<s*,s> march:s 1996:r) ref_time:r)
and lexical entries: [march :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 march:s)), 1996 :- NP : 1996:r, march :- NP : march:s, 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 1996
with logic: (this:<s,<r,s>> (intersect:<s*,s> march:s 1996:r) ref_time:r)
and lexical entries: [march :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 march:s)), 1996 :- NP : 1996:r, march :- NP : march:s, 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 1996
with logic: (next:<s,<r,s>> (intersect:<s*,s> march:s 1996:r) ref_time:r)
and lexical entries: [march :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 march:s)), 1996 :- NP : 1996:r, march :- NP : march:s, 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 1996
with logic: (intersect:<s*,s> march:s 1996:r)
and lexical entries: [march :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 march:s)), 1996 :- NP : 1996:r, march :- NP : march:s, 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: 11th century
with logic: 10:r
and lexical entries: [11th century :- NP : 10:r]
Executing the phrase: 11th century
with logic: (previous:<s,<r,s>> 10:r ref_time:r)
and lexical entries: [11th century :- NP : 10:r]
Executing the phrase: 11th century
with logic: (this:<s,<r,s>> 10:r ref_time:r)
and lexical entries: [11th century :- NP : 10:r]
Executing the phrase: 11th century
with logic: (next:<s,<r,s>> 10:r ref_time:r)
and lexical entries: [11th century :- NP : 10:r]
Executing the phrase: 11th century
with logic: 10:r
and lexical entries: [11th century :- NP : 10:r]
Executing the phrase: january this year
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: january this year
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: january this year
with logic: (this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: january this year
with logic: (next:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: january this year
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) january:s)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: weeks or months
with logic: weeks:d
and lexical entries: [weeks or months :- NP : weeks:d]
Executing the phrase: weeks or months
with logic: weeks:d
and lexical entries: [weeks or months :- NP : weeks:d]
Executing the phrase: weeks or months
with logic: weeks:d
and lexical entries: [weeks or months :- NP : weeks:d]
Executing the phrase: weeks or months
with logic: weeks:d
and lexical entries: [weeks or months :- NP : weeks:d]
Executing the phrase: weeks or months
with logic: (temporal_ref:<d,s> weeks:d)
and lexical entries: [weeks or months :- NP : weeks:d]
Executing the phrase: march 26 1996
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r)
and lexical entries: [march :- NP : march:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 26 1996
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 26 1996
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 26 1996
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: march 26 1996
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 26d:s) 1996:r)
and lexical entries: [march :- NP : march:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1996 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1996:r))]
Executing the phrase: 22 months
with logic: (*:<d,<n,d>> months:d 22:n)
and lexical entries: [22 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 22:n)), months :- NP : months:d]
Executing the phrase: 22 months
with logic: (*:<d,<n,d>> months:d 22:n)
and lexical entries: [22 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 22:n)), months :- NP : months:d]
Executing the phrase: 22 months
with logic: (*:<d,<n,d>> months:d 22:n)
and lexical entries: [22 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 22:n)), months :- NP : months:d]
Executing the phrase: 22 months
with logic: (*:<d,<n,d>> months:d 22:n)
and lexical entries: [22 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 22:n)), months :- NP : months:d]
Executing the phrase: 22 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 22:n))
and lexical entries: [22 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 22:n)), months :- NP : months:d]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the late 1970s
with logic: 197:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), late :- NP/NP : (lambda $0:s $0), 1970s :- NP : 197:r]
Executing the phrase: the late 1970s
with logic: (previous:<s,<r,s>> 197:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), late :- NP/NP : (lambda $0:s $0), 1970s :- NP : 197:r]
Executing the phrase: the late 1970s
with logic: (this:<s,<r,s>> 197:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), late :- NP/NP : (lambda $0:s $0), 1970s :- NP : 197:r]
Executing the phrase: the late 1970s
with logic: (next:<s,<r,s>> 197:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), late :- NP/NP : (lambda $0:s $0), 1970s :- NP : 197:r]
Executing the phrase: the late 1970s
with logic: 197:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), late :- NP/NP : (lambda $0:s $0), 1970s :- NP : 197:r]
Executing the phrase: mid 1996
with logic: 1996:r
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), 1996 :- NP : 1996:r]
Executing the phrase: mid 1996
with logic: (previous:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), 1996 :- NP : 1996:r]
Executing the phrase: mid 1996
with logic: (this:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), 1996 :- NP : 1996:r]
Executing the phrase: mid 1996
with logic: (next:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), 1996 :- NP : 1996:r]
Executing the phrase: mid 1996
with logic: 1996:r
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), 1996 :- NP : 1996:r]
Executing the phrase: june last year
with logic: (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: june last year
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: june last year
with logic: (this:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: june last year
with logic: (next:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: june last year
with logic: (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) june:s)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: july last year
with logic: (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: july last year
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: july last year
with logic: (this:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: july last year
with logic: (next:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: july last year
with logic: (intersect:<s*,s> (previous:<d,<r,s>> year:d ref_time:r) july:s)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: february 1947
with logic: (intersect:<s*,s> february:s 1947:r)
and lexical entries: [february :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 february:s)), 1947 :- NP : 1947:r, february :- NP : february:s, 1947 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1947:r))]
Executing the phrase: february 1947
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 1947:r) ref_time:r)
and lexical entries: [february :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 february:s)), 1947 :- NP : 1947:r, february :- NP : february:s, 1947 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1947:r))]
Executing the phrase: february 1947
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 1947:r) ref_time:r)
and lexical entries: [february :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 february:s)), 1947 :- NP : 1947:r, february :- NP : february:s, 1947 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1947:r))]
Executing the phrase: february 1947
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 1947:r) ref_time:r)
and lexical entries: [february :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 february:s)), 1947 :- NP : 1947:r, february :- NP : february:s, 1947 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1947:r))]
Executing the phrase: february 1947
with logic: (intersect:<s*,s> february:s 1947:r)
and lexical entries: [february :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 february:s)), 1947 :- NP : 1947:r, february :- NP : february:s, 1947 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1947:r))]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1995
with logic: 1995:r
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (previous:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (this:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (next:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: 1995:r
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1971
with logic: 1971:r
and lexical entries: [1971 :- NP : 1971:r]
Executing the phrase: 1971
with logic: (previous:<s,<r,s>> 1971:r ref_time:r)
and lexical entries: [1971 :- NP : 1971:r]
Executing the phrase: 1971
with logic: (this:<s,<r,s>> 1971:r ref_time:r)
and lexical entries: [1971 :- NP : 1971:r]
Executing the phrase: 1971
with logic: (next:<s,<r,s>> 1971:r ref_time:r)
and lexical entries: [1971 :- NP : 1971:r]
Executing the phrase: 1971
with logic: 1971:r
and lexical entries: [1971 :- NP : 1971:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: more than four hours
with logic: (*:<d,<n,d>> hour:d 4:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), hours :- NP : hour:d]
Executing the phrase: more than four hours
with logic: (*:<d,<n,d>> hour:d 4:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), hours :- NP : hour:d]
Executing the phrase: more than four hours
with logic: (*:<d,<n,d>> hour:d 4:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), hours :- NP : hour:d]
Executing the phrase: more than four hours
with logic: (*:<d,<n,d>> hour:d 4:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), hours :- NP : hour:d]
Executing the phrase: more than four hours
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> hour:d 4:n))
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), hours :- NP : hour:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: november 1995
with logic: (intersect:<s*,s> november:s 1995:r)
and lexical entries: [november :- NP : november:s, 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: november 1995
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 1995:r) ref_time:r)
and lexical entries: [november :- NP : november:s, 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: november 1995
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 1995:r) ref_time:r)
and lexical entries: [november :- NP : november:s, 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: november 1995
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 1995:r) ref_time:r)
and lexical entries: [november :- NP : november:s, 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: november 1995
with logic: (intersect:<s*,s> november:s 1995:r)
and lexical entries: [november :- NP : november:s, 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: nearly four years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly four years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly four years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly four years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly four years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 4:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: april 6 1994
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r)
and lexical entries: [april :- NP : april:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: april 6 1994
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r) ref_time:r)
and lexical entries: [april :- NP : april:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: april 6 1994
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r) ref_time:r)
and lexical entries: [april :- NP : april:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: april 6 1994
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r) ref_time:r)
and lexical entries: [april :- NP : april:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: april 6 1994
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s 6d:s) 1994:r)
and lexical entries: [april :- NP : april:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]

Phrase:            2 1/2 years
Sentence:          The panel also will look at the exodus of about 2 million Rwanda Hutus to neighboring countries where they lived in U.N.-run refugee camps for 2 1/2 years.
ref_time:          1998-02-27
Gold type:         DURATION
gold val:          P2Y6M
No parses! Will implement something to throw out words and try again.
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 100:n))
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: at least 20 more years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), more :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: at least 20 more years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), more :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: at least 20 more years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), more :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: at least 20 more years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), more :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: at least 20 more years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 20:n))
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), more :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: four day
with logic: (*:<d,<n,d>> day:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), day :- NP : day:d]
Executing the phrase: four day
with logic: (*:<d,<n,d>> day:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), day :- NP : day:d]
Executing the phrase: four day
with logic: (*:<d,<n,d>> day:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), day :- NP : day:d]
Executing the phrase: four day
with logic: (*:<d,<n,d>> day:d 4:n)
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), day :- NP : day:d]
Executing the phrase: four day
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> day:d 4:n))
and lexical entries: [four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), day :- NP : day:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 10:n))
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: 1996
with logic: 1996:r
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (previous:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (this:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: (next:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: 1996
with logic: 1996:r
and lexical entries: [1996 :- NP : 1996:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: 1978
with logic: 1978:r
and lexical entries: [1978 :- NP : 1978:r]
Executing the phrase: 1978
with logic: (previous:<s,<r,s>> 1978:r ref_time:r)
and lexical entries: [1978 :- NP : 1978:r]
Executing the phrase: 1978
with logic: (this:<s,<r,s>> 1978:r ref_time:r)
and lexical entries: [1978 :- NP : 1978:r]
Executing the phrase: 1978
with logic: (next:<s,<r,s>> 1978:r ref_time:r)
and lexical entries: [1978 :- NP : 1978:r]
Executing the phrase: 1978
with logic: 1978:r
and lexical entries: [1978 :- NP : 1978:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (previous:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (this:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (next:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), february :- NP : february:s]
Executing the phrase: last february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), february :- NP : february:s]
Executing the phrase: last february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), february :- NP : february:s]
Executing the phrase: last february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), february :- NP : february:s]
Executing the phrase: last february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), february :- NP : february:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: nearly two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: nearly two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: nearly two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: nearly two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: nearly two years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: six weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: six weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: six weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: six weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: six weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 6:n) -1:n) ref_time:r)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: the time
with logic: past_ref:r
and lexical entries: [the time :- NP : past_ref:r]
Executing the phrase: the time
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the time :- NP : past_ref:r]
Executing the phrase: the time
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the time :- NP : past_ref:r]
Executing the phrase: the time
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the time :- NP : past_ref:r]
Executing the phrase: the time
with logic: past_ref:r
and lexical entries: [the time :- NP : past_ref:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: nearly two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: nearly two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: nearly two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: nearly two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: nearly two months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 2:n))
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: 10 hour
with logic: (*:<d,<n,d>> hour:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), hour :- NP : hour:d]
Executing the phrase: 10 hour
with logic: (*:<d,<n,d>> hour:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), hour :- NP : hour:d]
Executing the phrase: 10 hour
with logic: (*:<d,<n,d>> hour:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), hour :- NP : hour:d]
Executing the phrase: 10 hour
with logic: (*:<d,<n,d>> hour:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), hour :- NP : hour:d]
Executing the phrase: 10 hour
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> hour:d 10:n))
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), hour :- NP : hour:d]
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: over a week
with logic: week:d
and lexical entries: [over :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: over a week
with logic: week:d
and lexical entries: [over :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: over a week
with logic: week:d
and lexical entries: [over :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: over a week
with logic: week:d
and lexical entries: [over :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: over a week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [over :- NP/NP : (lambda $0:d $0), a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: jan. 13
with logic: (intersect:<s*,s> january:s 13d:s)
and lexical entries: [jan. :- NP : january:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: jan. 13
with logic: (previous:<s,<r,s>> (intersect:<s*,s> january:s 13d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: jan. 13
with logic: (this:<s,<r,s>> (intersect:<s*,s> january:s 13d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: jan. 13
with logic: (next:<s,<r,s>> (intersect:<s*,s> january:s 13d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: jan. 13
with logic: (intersect:<s*,s> january:s 13d:s)
and lexical entries: [jan. :- NP : january:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]

Phrase:            daily
Sentence:          The official Iraqi News Agency, which gives the daily tally of inspections, did not mention Ritter by name, but said Friday that team no. 225 _ which Ritter heads _ made surprise visits to a number of sites and was assisted by aerial surveillance.
ref_time:          1998-03-06
Gold type:         SET
gold val:          XXXX-XX-XX
No parses! Will implement something to throw out words and try again.
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: feb. 23
with logic: (intersect:<s*,s> february:s 23d:s)
and lexical entries: [feb. :- NP : february:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: feb. 23
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 23d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: feb. 23
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 23d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: feb. 23
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 23d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: feb. 23
with logic: (intersect:<s*,s> february:s 23d:s)
and lexical entries: [feb. :- NP : february:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: recent days
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), days :- NP : days:d]
Executing the phrase: recent days
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), days :- NP : days:d]
Executing the phrase: recent days
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), days :- NP : days:d]
Executing the phrase: recent days
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), days :- NP : days:d]
Executing the phrase: recent days
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), days :- NP : days:d]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: 8 month old
with logic: (*:<d,<n,d>> month:d 8:n)
and lexical entries: [8 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), month :- NP : month:d, old :- NP\NP : (lambda $0:d $0)]
Executing the phrase: 8 month old
with logic: (*:<d,<n,d>> month:d 8:n)
and lexical entries: [8 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), month :- NP : month:d, old :- NP\NP : (lambda $0:d $0)]
Executing the phrase: 8 month old
with logic: (*:<d,<n,d>> month:d 8:n)
and lexical entries: [8 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), month :- NP : month:d, old :- NP\NP : (lambda $0:d $0)]
Executing the phrase: 8 month old
with logic: (*:<d,<n,d>> month:d 8:n)
and lexical entries: [8 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), month :- NP : month:d, old :- NP\NP : (lambda $0:d $0)]
Executing the phrase: 8 month old
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> month:d 8:n))
and lexical entries: [8 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), month :- NP : month:d, old :- NP\NP : (lambda $0:d $0)]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: feb. 20
with logic: (intersect:<s*,s> february:s 20d:s)
and lexical entries: [feb. :- NP : february:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: feb. 20
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 20d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: feb. 20
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 20d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: feb. 20
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 20d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: feb. 20
with logic: (intersect:<s*,s> february:s 20d:s)
and lexical entries: [feb. :- NP : february:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: may
with logic: may:s
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (this:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (next:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: may:s
and lexical entries: [may :- NP : may:s]
Executing the phrase: two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: 10 days ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), days :- NP : days:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: 10 days ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), days :- NP : days:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: 10 days ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), days :- NP : days:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: 10 days ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), days :- NP : days:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: 10 days ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> days:d 10:n) -1:n) ref_time:r)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), days :- NP : days:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (this:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (next:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: 1972
with logic: 1972:r
and lexical entries: [1972 :- NP : 1972:r]
Executing the phrase: 1972
with logic: (previous:<s,<r,s>> 1972:r ref_time:r)
and lexical entries: [1972 :- NP : 1972:r]
Executing the phrase: 1972
with logic: (this:<s,<r,s>> 1972:r ref_time:r)
and lexical entries: [1972 :- NP : 1972:r]
Executing the phrase: 1972
with logic: (next:<s,<r,s>> 1972:r ref_time:r)
and lexical entries: [1972 :- NP : 1972:r]
Executing the phrase: 1972
with logic: 1972:r
and lexical entries: [1972 :- NP : 1972:r]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]

Phrase:            the past three summers
Sentence:          Confrontations among Catholic protesters, Protestant marchers and the police have provoked widespread violence in Northern Ireland for the past three summers.
ref_time:          1998-03-22
Gold type:         SET
gold val:          XXXX-SU
No parses! Will implement something to throw out words and try again.

Phrase:            each july
Sentence:          The crucible is Portadown, 30 miles (50 kms) southwest of Belfast, where Orangemen march each July from their rural church back downtown _ through the town's main Catholic area.
ref_time:          1998-03-22
Gold type:         SET
gold val:          XXXX-07
No parses! Will implement something to throw out words and try again.
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: earlier sunday
with logic: sunday:s
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), sunday :- NP : sunday:s]
Executing the phrase: earlier sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), sunday :- NP : sunday:s]
Executing the phrase: earlier sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), sunday :- NP : sunday:s]
Executing the phrase: earlier sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), sunday :- NP : sunday:s]
Executing the phrase: earlier sunday
with logic: sunday:s
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), sunday :- NP : sunday:s]
Executing the phrase: saturday
with logic: saturday:s
and lexical entries: [saturday :- NP : saturday:s]
Executing the phrase: saturday
with logic: (previous:<s,<r,s>> saturday:s ref_time:r)
and lexical entries: [saturday :- NP : saturday:s]
Executing the phrase: saturday
with logic: (this:<s,<r,s>> saturday:s ref_time:r)
and lexical entries: [saturday :- NP : saturday:s]
Executing the phrase: saturday
with logic: (next:<s,<r,s>> saturday:s ref_time:r)
and lexical entries: [saturday :- NP : saturday:s]
Executing the phrase: saturday
with logic: saturday:s
and lexical entries: [saturday :- NP : saturday:s]
Executing the phrase: may 26 1980
with logic: (intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r)
and lexical entries: [may :- NP : may:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1980 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1980:r))]
Executing the phrase: may 26 1980
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1980 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1980:r))]
Executing the phrase: may 26 1980
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1980 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1980:r))]
Executing the phrase: may 26 1980
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1980 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1980:r))]
Executing the phrase: may 26 1980
with logic: (intersect:<s*,s> (intersect:<s*,s> may:s 26d:s) 1980:r)
and lexical entries: [may :- NP : may:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s)), 1980 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1980:r))]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 6:n))
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: october 1984
with logic: (intersect:<s*,s> october:s 1984:r)
and lexical entries: [october :- NP : october:s, 1984 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1984:r))]
Executing the phrase: october 1984
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 1984:r) ref_time:r)
and lexical entries: [october :- NP : october:s, 1984 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1984:r))]
Executing the phrase: october 1984
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 1984:r) ref_time:r)
and lexical entries: [october :- NP : october:s, 1984 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1984:r))]
Executing the phrase: october 1984
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 1984:r) ref_time:r)
and lexical entries: [october :- NP : october:s, 1984 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1984:r))]
Executing the phrase: october 1984
with logic: (intersect:<s*,s> october:s 1984:r)
and lexical entries: [october :- NP : october:s, 1984 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1984:r))]
Executing the phrase: may 22 1995
with logic: (intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r)
and lexical entries: [may :- NP : may:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s)), 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: may 22 1995
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s)), 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: may 22 1995
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s)), 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: may 22 1995
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r) ref_time:r)
and lexical entries: [may :- NP : may:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s)), 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: may 22 1995
with logic: (intersect:<s*,s> (intersect:<s*,s> may:s 22d:s) 1995:r)
and lexical entries: [may :- NP : may:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s)), 1995 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1995:r))]
Executing the phrase: the following year
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d]
Executing the phrase: the following year
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d]
Executing the phrase: the following year
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d]
Executing the phrase: the following year
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d]
Executing the phrase: the following year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 1:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: 1995
with logic: 1995:r
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (previous:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (this:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: (next:<s,<r,s>> 1995:r ref_time:r)
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: 1995
with logic: 1995:r
and lexical entries: [1995 :- NP : 1995:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: less than one hour
with logic: (*:<d,<n,d>> hour:d 1:n)
and lexical entries: [less than :- NP/NP : (lambda $0:d $0), one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hour :- NP : hour:d]
Executing the phrase: less than one hour
with logic: (*:<d,<n,d>> hour:d 1:n)
and lexical entries: [less than :- NP/NP : (lambda $0:d $0), one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hour :- NP : hour:d]
Executing the phrase: less than one hour
with logic: (*:<d,<n,d>> hour:d 1:n)
and lexical entries: [less than :- NP/NP : (lambda $0:d $0), one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hour :- NP : hour:d]
Executing the phrase: less than one hour
with logic: (*:<d,<n,d>> hour:d 1:n)
and lexical entries: [less than :- NP/NP : (lambda $0:d $0), one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hour :- NP : hour:d]
Executing the phrase: less than one hour
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> hour:d 1:n))
and lexical entries: [less than :- NP/NP : (lambda $0:d $0), one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), hour :- NP : hour:d]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: the day
with logic: today:r
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: today:r
and lexical entries: [the day :- NP : today:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: three hour
with logic: (*:<d,<n,d>> hour:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), hour :- NP : hour:d]
Executing the phrase: three hour
with logic: (*:<d,<n,d>> hour:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), hour :- NP : hour:d]
Executing the phrase: three hour
with logic: (*:<d,<n,d>> hour:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), hour :- NP : hour:d]
Executing the phrase: three hour
with logic: (*:<d,<n,d>> hour:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), hour :- NP : hour:d]
Executing the phrase: three hour
with logic: (*:<d,<n,d>> hour:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), hour :- NP : hour:d]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]

Phrase:            later this afternoon
Sentence:          He's expected to meet with Iraqi deputy prime minister Tariq Aziz later this afternoon.
ref_time:          1998-02-22
Gold type:         TIME
gold val:          1998-02-22TAF
No parses! Will implement something to throw out words and try again.
Executing the phrase: no more than sixty days
with logic: (*:<d,<n,d>> days:d 60:n)
and lexical entries: [no more than :- NP/NP : (lambda $0:d $0), sixty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 60:n)), days :- NP : days:d]
Executing the phrase: no more than sixty days
with logic: (*:<d,<n,d>> days:d 60:n)
and lexical entries: [no more than :- NP/NP : (lambda $0:d $0), sixty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 60:n)), days :- NP : days:d]
Executing the phrase: no more than sixty days
with logic: (*:<d,<n,d>> days:d 60:n)
and lexical entries: [no more than :- NP/NP : (lambda $0:d $0), sixty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 60:n)), days :- NP : days:d]
Executing the phrase: no more than sixty days
with logic: (*:<d,<n,d>> days:d 60:n)
and lexical entries: [no more than :- NP/NP : (lambda $0:d $0), sixty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 60:n)), days :- NP : days:d]
Executing the phrase: no more than sixty days
with logic: (*:<d,<n,d>> days:d 60:n)
and lexical entries: [no more than :- NP/NP : (lambda $0:d $0), sixty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 60:n)), days :- NP : days:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: the middle of october
with logic: october:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), middle of :- NP/NP : (lambda $0:s $0), october :- NP : october:s]
Executing the phrase: the middle of october
with logic: (previous:<s,<r,s>> october:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), middle of :- NP/NP : (lambda $0:s $0), october :- NP : october:s]
Executing the phrase: the middle of october
with logic: (this:<s,<r,s>> october:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), middle of :- NP/NP : (lambda $0:s $0), october :- NP : october:s]
Executing the phrase: the middle of october
with logic: (next:<s,<r,s>> october:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), middle of :- NP/NP : (lambda $0:s $0), october :- NP : october:s]
Executing the phrase: the middle of october
with logic: october:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), middle of :- NP/NP : (lambda $0:s $0), october :- NP : october:s]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: the winter of nineteen ninety four
with logic: (intersect:<s*,s> 1994:r winter:s)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), winter of :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 winter:s)), nineteen ninety four :- NP : 1994:r]
Executing the phrase: the winter of nineteen ninety four
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1994:r winter:s) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), winter of :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 winter:s)), nineteen ninety four :- NP : 1994:r]
Executing the phrase: the winter of nineteen ninety four
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1994:r winter:s) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), winter of :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 winter:s)), nineteen ninety four :- NP : 1994:r]
Executing the phrase: the winter of nineteen ninety four
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1994:r winter:s) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), winter of :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 winter:s)), nineteen ninety four :- NP : 1994:r]
Executing the phrase: the winter of nineteen ninety four
with logic: (intersect:<s*,s> 1994:r winter:s)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), winter of :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 winter:s)), nineteen ninety four :- NP : 1994:r]
Executing the phrase: the last two weeks
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the last two weeks
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the last two weeks
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the last two weeks
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the last two weeks
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> weeks:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: nineteen ninety six
with logic: 1996:r
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (previous:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (this:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (next:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: 1996:r
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: january nineteen ninety seven
with logic: (intersect:<s*,s> 1997:r january:s)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), nineteen ninety seven :- NP : 1997:r]
Executing the phrase: january nineteen ninety seven
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1997:r january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), nineteen ninety seven :- NP : 1997:r]
Executing the phrase: january nineteen ninety seven
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1997:r january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), nineteen ninety seven :- NP : 1997:r]
Executing the phrase: january nineteen ninety seven
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1997:r january:s) ref_time:r)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), nineteen ninety seven :- NP : 1997:r]
Executing the phrase: january nineteen ninety seven
with logic: (intersect:<s*,s> 1997:r january:s)
and lexical entries: [january :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 january:s)), nineteen ninety seven :- NP : 1997:r]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: nineteen ninety seven
with logic: 1997:r
and lexical entries: [nineteen ninety seven :- NP : 1997:r]
Executing the phrase: nineteen ninety seven
with logic: (previous:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [nineteen ninety seven :- NP : 1997:r]
Executing the phrase: nineteen ninety seven
with logic: (this:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [nineteen ninety seven :- NP : 1997:r]
Executing the phrase: nineteen ninety seven
with logic: (next:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [nineteen ninety seven :- NP : 1997:r]
Executing the phrase: nineteen ninety seven
with logic: 1997:r
and lexical entries: [nineteen ninety seven :- NP : 1997:r]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]

Phrase:            hourly
Sentence:          Average hourly earnings of production and nonsupervisory employees rose 4 cents, to $12.51.
ref_time:          1998-02-06
Gold type:         SET
gold val:          PT1H
No parses! Will implement something to throw out words and try again.
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the last decade
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), decade :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: the last decade
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), decade :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: the last decade
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), decade :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: the last decade
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), decade :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: the last decade
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d 10:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), decade :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: coming months
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), months :- NP : months:d]
Executing the phrase: coming months
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), months :- NP : months:d]
Executing the phrase: coming months
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), months :- NP : months:d]
Executing the phrase: coming months
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), months :- NP : months:d]
Executing the phrase: coming months
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), months :- NP : months:d]
Executing the phrase: aug. 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 6d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: aug. 6
with logic: (intersect:<s*,s> august:s 6d:s)
and lexical entries: [aug. :- NP : august:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 30:n))
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: last fall
with logic: (previous:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: last fall
with logic: (previous:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: last fall
with logic: (previous:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: last fall
with logic: (previous:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: last fall
with logic: (previous:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: the last four months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), months :- NP : months:d]
Executing the phrase: the last four months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), months :- NP : months:d]
Executing the phrase: the last four months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), months :- NP : months:d]
Executing the phrase: the last four months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), months :- NP : months:d]
Executing the phrase: the last four months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), months :- NP : months:d]
Executing the phrase: the last three months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the last three months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the last three months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the last three months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the last three months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: 1997
with logic: 1997:r
and lexical entries: [1997 :- NP : 1997:r]
Executing the phrase: 1997
with logic: (previous:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [1997 :- NP : 1997:r]
Executing the phrase: 1997
with logic: (this:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [1997 :- NP : 1997:r]
Executing the phrase: 1997
with logic: (next:<s,<r,s>> 1997:r ref_time:r)
and lexical entries: [1997 :- NP : 1997:r]
Executing the phrase: 1997
with logic: 1997:r
and lexical entries: [1997 :- NP : 1997:r]
Executing the phrase: the last few months
with logic: months:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), last few :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: the last few months
with logic: months:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), last few :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: the last few months
with logic: months:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), last few :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: the last few months
with logic: months:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), last few :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: the last few months
with logic: (temporal_ref:<d,s> months:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), last few :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: two decades
with logic: (*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), decades :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: two decades
with logic: (*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), decades :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: two decades
with logic: (*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), decades :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: two decades
with logic: (*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), decades :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: two decades
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> (*:<d,<n,d>> year:d 10:n) 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), decades :- NP : (*:<d,<n,d>> year:d 10:n)]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: the past few weeks
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, past few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the past few weeks
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, past few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the past few weeks
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, past few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the past few weeks
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, past few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the past few weeks
with logic: (temporal_ref:<d,s> weeks:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, past few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]

Phrase:            this morning
Sentence:          I was pleased that Ms. Currie's lawyers stated unambiguously this morning _ unambiguously _ that she's not aware of any unethical conduct.
ref_time:          1998-02-06
Gold type:         TIME
gold val:          1998-02-06TMO
No parses! Will implement something to throw out words and try again.

Phrase:            thursday evening
Sentence:          NEW YORK _ A Brooklyn woman who was watching her clothes dry in a laundromat was killed Thursday evening when two would-be robbers emptied their pistols into the store, the police said.
ref_time:          1998-02-12
Gold type:         TIME
gold val:          1998-02-12TEV
No parses! Will implement something to throw out words and try again.

Phrase:            around 7:15 p.m.
Sentence:          The men appeared in the store at 469 Vermont St. in Brownsville around 7:15 p.m., after the victim, Linda Sanders, 35, had finished her cleaning and was waiting for her clothes to dry, detectives said.
ref_time:          1998-02-12
Gold type:         TIME
gold val:          1998-02-12T19:15
No parses! Will implement something to throw out words and try again.
Executing the phrase: a few years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a few years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a few years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a few years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a few years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: the last five years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: the last five years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: the last five years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: the last five years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: the last five years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 5:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: recent months
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (previous:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (this:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (next:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: saturday april 25
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s 25d:s) saturday:s)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s) ref_time:r)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: saturday april 25
with logic: (intersect:<s*,s> (intersect:<s*,s> april:s saturday:s) 25d:s)
and lexical entries: [saturday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 saturday:s)), april :- NP : april:s, 25 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 25d:s))]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: two years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 2:n) -1:n) ref_time:r)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: nineteen ninety one
with logic: 1991:r
and lexical entries: [nineteen ninety one :- NP : 1991:r]
Executing the phrase: nineteen ninety one
with logic: (previous:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [nineteen ninety one :- NP : 1991:r]
Executing the phrase: nineteen ninety one
with logic: (this:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [nineteen ninety one :- NP : 1991:r]
Executing the phrase: nineteen ninety one
with logic: (next:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [nineteen ninety one :- NP : 1991:r]
Executing the phrase: nineteen ninety one
with logic: 1991:r
and lexical entries: [nineteen ninety one :- NP : 1991:r]
Executing the phrase: nineteen ninety six
with logic: 1996:r
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (previous:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (this:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: (next:<s,<r,s>> 1996:r ref_time:r)
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: nineteen ninety six
with logic: 1996:r
and lexical entries: [nineteen ninety six :- NP : 1996:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: nineteen seventy nine
with logic: 1979:r
and lexical entries: [nineteen seventy nine :- NP : 1979:r]
Executing the phrase: nineteen seventy nine
with logic: (previous:<s,<r,s>> 1979:r ref_time:r)
and lexical entries: [nineteen seventy nine :- NP : 1979:r]
Executing the phrase: nineteen seventy nine
with logic: (this:<s,<r,s>> 1979:r ref_time:r)
and lexical entries: [nineteen seventy nine :- NP : 1979:r]
Executing the phrase: nineteen seventy nine
with logic: (next:<s,<r,s>> 1979:r ref_time:r)
and lexical entries: [nineteen seventy nine :- NP : 1979:r]
Executing the phrase: nineteen seventy nine
with logic: 1979:r
and lexical entries: [nineteen seventy nine :- NP : 1979:r]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (*:<d,<n,d>> year:d 100:n)
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: centuries
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 100:n))
and lexical entries: [centuries :- NP : (*:<d,<n,d>> year:d 100:n)]
Executing the phrase: more than two thousand years
with logic: (*:<d,<n,d>> years:d 2000:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), two thousand :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2000:n)), years :- NP : years:d]
Executing the phrase: more than two thousand years
with logic: (*:<d,<n,d>> years:d 2000:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), two thousand :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2000:n)), years :- NP : years:d]
Executing the phrase: more than two thousand years
with logic: (*:<d,<n,d>> years:d 2000:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), two thousand :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2000:n)), years :- NP : years:d]
Executing the phrase: more than two thousand years
with logic: (*:<d,<n,d>> years:d 2000:n)
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), two thousand :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2000:n)), years :- NP : years:d]
Executing the phrase: more than two thousand years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2000:n))
and lexical entries: [more than :- NP/NP : (lambda $0:d $0), two thousand :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2000:n)), years :- NP : years:d]

Phrase:            a few minutes
Sentence:          Well, frankly, I don't, but the answer is coming up in just a few minutes.
ref_time:          1998-01-21
Gold type:         DURATION
gold val:          PXM
No parses! Will implement something to throw out words and try again.
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: this september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), september :- NP : september:s]
Executing the phrase: the year two thousand
with logic: 2000:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (previous:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (this:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (next:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: 2000:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (previous:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (this:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (next:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (previous:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (this:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (next:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> day:d 1:n))
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: the second day
with logic: (nth:<d,<n,s>> day:d 2o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), day :- NP : day:d]
Executing the phrase: the second day
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> day:d 2o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), day :- NP : day:d]
Executing the phrase: the second day
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> day:d 2o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), day :- NP : day:d]
Executing the phrase: the second day
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> day:d 2o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), day :- NP : day:d]
Executing the phrase: the second day
with logic: (nth:<d,<n,s>> day:d 2o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), day :- NP : day:d]

Phrase:            mid afternoon
Sentence:          By mid afternoon, official Serb sources were saying the operation was over, but that has not yet been confirmed from Belgrade, the capital of Serbia, which is where the whole attack is thought to have been planned.
ref_time:          1998-03-06
Gold type:         TIME
gold val:          1998-03-06TAF
No parses! Will implement something to throw out words and try again.
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (previous:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (this:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: (next:<s,<r,s>> sunday:s ref_time:r)
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: sunday
with logic: sunday:s
and lexical entries: [sunday :- NP : sunday:s]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early tuesday
with logic: tuesday:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), tuesday :- NP : tuesday:s]
Executing the phrase: early tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), tuesday :- NP : tuesday:s]
Executing the phrase: early tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), tuesday :- NP : tuesday:s]
Executing the phrase: early tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), tuesday :- NP : tuesday:s]
Executing the phrase: early tuesday
with logic: tuesday:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), tuesday :- NP : tuesday:s]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (*:<d,<n,d>> day:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two day
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> day:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), day :- NP : day:d]
Executing the phrase: two days
with logic: (*:<d,<n,d>> days:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), days :- NP : days:d]
Executing the phrase: two days
with logic: (*:<d,<n,d>> days:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), days :- NP : days:d]
Executing the phrase: two days
with logic: (*:<d,<n,d>> days:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), days :- NP : days:d]
Executing the phrase: two days
with logic: (*:<d,<n,d>> days:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), days :- NP : days:d]
Executing the phrase: two days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), days :- NP : days:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: more recently
with logic: past_ref:r
and lexical entries: [more :- NP/NP : (lambda $0:r $0), recently :- NP : past_ref:r]
Executing the phrase: more recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [more :- NP/NP : (lambda $0:r $0), recently :- NP : past_ref:r]
Executing the phrase: more recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [more :- NP/NP : (lambda $0:r $0), recently :- NP : past_ref:r]
Executing the phrase: more recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [more :- NP/NP : (lambda $0:r $0), recently :- NP : past_ref:r]
Executing the phrase: more recently
with logic: past_ref:r
and lexical entries: [more :- NP/NP : (lambda $0:r $0), recently :- NP : past_ref:r]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the nineties
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), nineties :- NP : 199:r]
Executing the phrase: the nineties
with logic: (previous:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), nineties :- NP : 199:r]
Executing the phrase: the nineties
with logic: (this:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), nineties :- NP : 199:r]
Executing the phrase: the nineties
with logic: (next:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), nineties :- NP : 199:r]
Executing the phrase: the nineties
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), nineties :- NP : 199:r]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year two thousand
with logic: 2000:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (previous:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (this:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: (next:<s,<r,s>> 2000:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: the year two thousand
with logic: 2000:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), year two thousand :- NP : 2000:r]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]

Phrase:            this coming sunday march eighth
Sentence:          International Women's Day is this coming Sunday, March eighth.
ref_time:          1998-03-05
Gold type:         DATE
gold val:          1998-03-08
No parses! Will implement something to throw out words and try again.
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past twenty years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 20:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), twenty :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]

Phrase:            two
Sentence:          It's between two to six days for every one uh of the sickest patients across the country.
ref_time:          1998-03-31
Gold type:         DURATION
gold val:          P2D
No parses! Will implement something to throw out words and try again.
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: six days
with logic: (*:<d,<n,d>> days:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), days :- NP : days:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: a year or two
with logic: future_ref:r
and lexical entries: [a year or two :- NP : future_ref:r]
Executing the phrase: a year or two
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a year or two :- NP : future_ref:r]
Executing the phrase: a year or two
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a year or two :- NP : future_ref:r]
Executing the phrase: a year or two
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a year or two :- NP : future_ref:r]
Executing the phrase: a year or two
with logic: future_ref:r
and lexical entries: [a year or two :- NP : future_ref:r]
Executing the phrase: the years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the early years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), early :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the early years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), early :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the early years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), early :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the early years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), early :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: the early years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), early :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: each year
with logic: year:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: each year
with logic: year:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: each year
with logic: year:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: each year
with logic: year:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: each year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [each :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: five months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> months:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five months
with logic: (*:<d,<n,d>> months:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d]
Executing the phrase: five months
with logic: (*:<d,<n,d>> months:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d]
Executing the phrase: five months
with logic: (*:<d,<n,d>> months:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d]
Executing the phrase: five months
with logic: (*:<d,<n,d>> months:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d]
Executing the phrase: five months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), months :- NP : months:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: 23 year
with logic: (*:<d,<n,d>> year:d 23:n)
and lexical entries: [23 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 23:n)), year :- NP : year:d]
Executing the phrase: 23 year
with logic: (*:<d,<n,d>> year:d 23:n)
and lexical entries: [23 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 23:n)), year :- NP : year:d]
Executing the phrase: 23 year
with logic: (*:<d,<n,d>> year:d 23:n)
and lexical entries: [23 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 23:n)), year :- NP : year:d]
Executing the phrase: 23 year
with logic: (*:<d,<n,d>> year:d 23:n)
and lexical entries: [23 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 23:n)), year :- NP : year:d]
Executing the phrase: 23 year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 23:n))
and lexical entries: [23 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 23:n)), year :- NP : year:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]

Phrase:            the weekend
Sentence:          The Saudi "window of vulnerability... is closing very fast," Prince Bandar bin Sultan, the Saudi ambassador to Washington, said over the weekend.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-W32-WE
No parses! Will implement something to throw out words and try again.
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: the end of the month
with logic: month:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: the end of the month
with logic: month:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: the end of the month
with logic: month:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: the end of the month
with logic: month:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: the end of the month
with logic: (temporal_ref:<d,s> month:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]

Phrase:            the weekend
Sentence:          Over the weekend, Pentagon officials confirmed reports that a fourth U.S. aircraft carrier -- the John F. Kennedy -- and its powerful group of support ships could head for the Middle East within a few days.
ref_time:          1990-08-13
Gold type:         DATE
gold val:          1990-W32-WE
No parses! Will implement something to throw out words and try again.
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (previous:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (this:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (next:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: late yesterday
with logic: yesterday:r
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: yesterday:r
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]

Phrase:            the weekend
Sentence:          Nevertheless, American officials over the weekend became more open in declaring that by destroying Saddam Hussein's military machine they hope to destroy his regime -- a goal likely to be supported by most Americans.
ref_time:          1991-02-25
Gold type:         DATE
gold val:          1991-W08-WE
No parses! Will implement something to throw out words and try again.
Executing the phrase: feb. 11
with logic: (intersect:<s*,s> february:s 11d:s)
and lexical entries: [feb. :- NP : february:s, 11 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 11d:s))]
Executing the phrase: feb. 11
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 11d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 11 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 11d:s))]
Executing the phrase: feb. 11
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 11d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 11 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 11d:s))]
Executing the phrase: feb. 11
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 11d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 11 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 11d:s))]
Executing the phrase: feb. 11
with logic: (intersect:<s*,s> february:s 11d:s)
and lexical entries: [feb. :- NP : february:s, 11 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 11d:s))]
Executing the phrase: a week or so ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d, or so :- NP\NP : (lambda $0:d $0), ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a week or so ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d, or so :- NP\NP : (lambda $0:d $0), ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a week or so ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d, or so :- NP\NP : (lambda $0:d $0), ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a week or so ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d, or so :- NP\NP : (lambda $0:d $0), ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a week or so ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> week:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d, or so :- NP\NP : (lambda $0:d $0), ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]

Phrase:            saturday night
Sentence:          Then, a week or so ago, Gen. Schwarzkopf secretly picked Saturday night as the optimal time to start the offensive.
ref_time:          1991-02-25
Gold type:         TIME
gold val:          1991-02-23TNI
No parses! Will implement something to throw out words and try again.
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]

Phrase:            noon saturday
Sentence:          Mr. Bush forestalled further diplomatic maneuvering by issuing an ultimatum on behalf of the allies demanding that Iraq withdraw within a week, starting at noon Saturday.
ref_time:          1991-02-25
Gold type:         TIME
gold val:          1991-02-16T12:00
No parses! Will implement something to throw out words and try again.
Executing the phrase: last august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), august :- NP : august:s]
Executing the phrase: last august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), august :- NP : august:s]
Executing the phrase: last august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), august :- NP : august:s]
Executing the phrase: last august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), august :- NP : august:s]
Executing the phrase: last august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), august :- NP : august:s]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the four days
with logic: (*:<d,<n,d>> days:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), days :- NP : days:d]
Executing the phrase: the four days
with logic: (*:<d,<n,d>> days:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), days :- NP : days:d]
Executing the phrase: the four days
with logic: (*:<d,<n,d>> days:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), days :- NP : days:d]
Executing the phrase: the four days
with logic: (*:<d,<n,d>> days:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), days :- NP : days:d]
Executing the phrase: the four days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 4:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), days :- NP : days:d]
Executing the phrase: nearly an hour
with logic: hour:d
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), an :- NP/NP : (lambda $0:d $0), hour :- NP : hour:d]
Executing the phrase: nearly an hour
with logic: hour:d
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), an :- NP/NP : (lambda $0:d $0), hour :- NP : hour:d]
Executing the phrase: nearly an hour
with logic: hour:d
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), an :- NP/NP : (lambda $0:d $0), hour :- NP : hour:d]
Executing the phrase: nearly an hour
with logic: hour:d
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), an :- NP/NP : (lambda $0:d $0), hour :- NP : hour:d]
Executing the phrase: nearly an hour
with logic: (temporal_ref:<d,s> hour:d)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), an :- NP/NP : (lambda $0:d $0), hour :- NP : hour:d]

Phrase:            saturday night
Sentence:          Finally, when Iraq failed to respond to the U.S. ultimatum, Mr. Bush let the ground offensive begin as previously planned Saturday night.
ref_time:          1991-02-25
Gold type:         TIME
gold val:          1991-02-16TNI
No parses! Will implement something to throw out words and try again.
Executing the phrase: the first hours
with logic: hour:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), hours :- NP : hour:d]
Executing the phrase: the first hours
with logic: hour:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), hours :- NP : hour:d]
Executing the phrase: the first hours
with logic: hour:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), hours :- NP : hour:d]
Executing the phrase: the first hours
with logic: hour:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), hours :- NP : hour:d]
Executing the phrase: the first hours
with logic: hour:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), hours :- NP : hour:d]
Executing the phrase: the next few days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), days :- NP : days:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), days :- NP : days:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), days :- NP : days:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), days :- NP : days:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few days
with logic: (temporal_ref:<d,s> days:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), days :- NP : days:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (*:<d,<n,d>> year:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: eight year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 8:n))
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), year :- NP : year:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]

Phrase:            last night
Sentence:          CBS News first reported last night that the tomb may contain the remains of Air Force pilot Michael Blassie.
ref_time:          1998-01-20
Gold type:         TIME
gold val:          1998-01-19TNI
No parses! Will implement something to throw out words and try again.
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: the next several days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: days:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: (next:<d,<r,s>> days:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: (next:<d,<r,s>> days:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: (next:<d,<r,s>> days:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: (next:<d,<r,s>> days:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: the next several days
with logic: (next:<d,<r,s>> days:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), several :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]

Phrase:            a while
Sentence:          In Maine, about a half million people still don't have power and they're going to have to live without it for a while.
ref_time:          1998-01-11
Gold type:         DURATION
gold val:          PXX
No parses! Will implement something to throw out words and try again.
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (next:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: that year
with logic: year:d
and lexical entries: [that year :- NP : year:d]
Executing the phrase: that year
with logic: year:d
and lexical entries: [that year :- NP : year:d]
Executing the phrase: that year
with logic: year:d
and lexical entries: [that year :- NP : year:d]
Executing the phrase: that year
with logic: year:d
and lexical entries: [that year :- NP : year:d]
Executing the phrase: that year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [that year :- NP : year:d]
Executing the phrase: each of the past three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [each of the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: each of the past three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [each of the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: each of the past three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [each of the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: each of the past three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [each of the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: each of the past three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [each of the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: 52 week
with logic: (*:<d,<n,d>> week:d 52:n)
and lexical entries: [52 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 52:n)), week :- NP : week:d]
Executing the phrase: 52 week
with logic: (*:<d,<n,d>> week:d 52:n)
and lexical entries: [52 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 52:n)), week :- NP : week:d]
Executing the phrase: 52 week
with logic: (*:<d,<n,d>> week:d 52:n)
and lexical entries: [52 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 52:n)), week :- NP : week:d]
Executing the phrase: 52 week
with logic: (*:<d,<n,d>> week:d 52:n)
and lexical entries: [52 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 52:n)), week :- NP : week:d]
Executing the phrase: 52 week
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> week:d 52:n))
and lexical entries: [52 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 52:n)), week :- NP : week:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: the end of november
with logic: november:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: the end of november
with logic: (previous:<s,<r,s>> november:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: the end of november
with logic: (this:<s,<r,s>> november:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: the end of november
with logic: (next:<s,<r,s>> november:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: the end of november
with logic: november:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: jan. 2
with logic: (intersect:<s*,s> january:s 2d:s)
and lexical entries: [jan. :- NP : january:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: jan. 2
with logic: (previous:<s,<r,s>> (intersect:<s*,s> january:s 2d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: jan. 2
with logic: (this:<s,<r,s>> (intersect:<s*,s> january:s 2d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: jan. 2
with logic: (next:<s,<r,s>> (intersect:<s*,s> january:s 2d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: jan. 2
with logic: (intersect:<s*,s> january:s 2d:s)
and lexical entries: [jan. :- NP : january:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the end of this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: the end of this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: the end of this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: the end of this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: the end of this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (previous:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (this:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (next:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: nov. 21
with logic: (intersect:<s*,s> november:s 21d:s)
and lexical entries: [nov. :- NP : november:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: nov. 21
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 21d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: nov. 21
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 21d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: nov. 21
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 21d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: nov. 21
with logic: (intersect:<s*,s> november:s 21d:s)
and lexical entries: [nov. :- NP : november:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: nov. 13
with logic: (intersect:<s*,s> november:s 13d:s)
and lexical entries: [nov. :- NP : november:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: nov. 13
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 13d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: nov. 13
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 13d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: nov. 13
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 13d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: nov. 13
with logic: (intersect:<s*,s> november:s 13d:s)
and lexical entries: [nov. :- NP : november:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (previous:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (this:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (next:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: sept. 27 1989
with logic: (intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r)
and lexical entries: [sept. :- NP : september:s, 27 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 27d:s)), 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: sept. 27 1989
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 27 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 27d:s)), 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: sept. 27 1989
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 27 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 27d:s)), 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: sept. 27 1989
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 27 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 27d:s)), 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: sept. 27 1989
with logic: (intersect:<s*,s> (intersect:<s*,s> september:s 27d:s) 1989:r)
and lexical entries: [sept. :- NP : september:s, 27 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 27d:s)), 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: oct. 1
with logic: (intersect:<s*,s> october:s 1d:s)
and lexical entries: [oct. :- NP : october:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: oct. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 1d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: oct. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 1d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: oct. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 1d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: oct. 1
with logic: (intersect:<s*,s> october:s 1d:s)
and lexical entries: [oct. :- NP : october:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: june 30 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: june 30 1990
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: june 30 1990
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: june 30 1990
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: june 30 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> june:s 30d:s) 1990:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]

Phrase:            the current fiscal year
Sentence:          The Rockford, Ill., maker of fasteners also said it expects to post sales in the current fiscal year that are " slightly above" fiscal 1989 sales of $155 million.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
No parses! Will implement something to throw out words and try again.
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]

Phrase:            the fiscal year
Sentence:          The truck maker said the significant drop in net income will result in lower earnings for the fiscal year.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1989
No parses! Will implement something to throw out words and try again.
Executing the phrase: fiscal 1988
with logic: 1988:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r]
Executing the phrase: fiscal 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r]
Executing the phrase: fiscal 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r]
Executing the phrase: fiscal 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r]
Executing the phrase: fiscal 1988
with logic: 1988:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]

Phrase:            the 1988 period
Sentence:          In the first nine months, net was $306 million, compared with a loss of $195 million in the 1988 period.
ref_time:          1989-11-02
Gold type:         DATE
gold val:          1988
No parses! Will implement something to throw out words and try again.
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: the 1988 second quarter
with logic: (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n))
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n)))), quarter :- NP : quarter:d, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n))))]
Executing the phrase: the 1988 second quarter
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n)))), quarter :- NP : quarter:d, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n))))]
Executing the phrase: the 1988 second quarter
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n)))), quarter :- NP : quarter:d, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n))))]
Executing the phrase: the 1988 second quarter
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n)))), quarter :- NP : quarter:d, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n))))]
Executing the phrase: the 1988 second quarter
with logic: (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 2o:n))
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n)))), quarter :- NP : quarter:d, second :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 2o:n))))]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]

Phrase:            5 p.m. est nov. 9
Sentence:          said it extended its $18-a-share offer for Telerate Inc. common stock until 5 p.m. EST Nov. 9.
ref_time:          1989-11-02
Gold type:         TIME
gold val:          1989-11-09T17:00
No parses! Will implement something to throw out words and try again.
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: previously
with logic: past_ref:r
and lexical entries: [previously :- NP : past_ref:r]
Executing the phrase: the first two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the first two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the first two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the first two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the first two years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: 27 year
with logic: (*:<d,<n,d>> year:d 27:n)
and lexical entries: [27 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 27:n)), year :- NP : year:d]
Executing the phrase: 27 year
with logic: (*:<d,<n,d>> year:d 27:n)
and lexical entries: [27 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 27:n)), year :- NP : year:d]
Executing the phrase: 27 year
with logic: (*:<d,<n,d>> year:d 27:n)
and lexical entries: [27 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 27:n)), year :- NP : year:d]
Executing the phrase: 27 year
with logic: (*:<d,<n,d>> year:d 27:n)
and lexical entries: [27 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 27:n)), year :- NP : year:d]
Executing the phrase: 27 year
with logic: (*:<d,<n,d>> year:d 27:n)
and lexical entries: [27 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 27:n)), year :- NP : year:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 6:n))
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: several year
with logic: years:d
and lexical entries: [several year :- NP : years:d]
Executing the phrase: several year
with logic: years:d
and lexical entries: [several year :- NP : years:d]
Executing the phrase: several year
with logic: years:d
and lexical entries: [several year :- NP : years:d]
Executing the phrase: several year
with logic: years:d
and lexical entries: [several year :- NP : years:d]
Executing the phrase: several year
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [several year :- NP : years:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: nov. 20
with logic: (intersect:<s*,s> november:s 20d:s)
and lexical entries: [nov. :- NP : november:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: nov. 20
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 20d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: nov. 20
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 20d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: nov. 20
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 20d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: nov. 20
with logic: (intersect:<s*,s> november:s 20d:s)
and lexical entries: [nov. :- NP : november:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: already
with logic: present_ref:r
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: present_ref:r
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: nov. 10
with logic: (intersect:<s*,s> november:s 10d:s)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (intersect:<s*,s> november:s 10d:s)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: one year term
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d, term :- NP\NP : (lambda $0:d $0)]
Executing the phrase: one year term
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d, term :- NP\NP : (lambda $0:d $0)]
Executing the phrase: one year term
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d, term :- NP\NP : (lambda $0:d $0)]
Executing the phrase: one year term
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d, term :- NP\NP : (lambda $0:d $0)]
Executing the phrase: one year term
with logic: (*:<d,<n,d>> year:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), year :- NP : year:d, term :- NP\NP : (lambda $0:d $0)]

Phrase:            an additional year
Sentence:          The loan may be extended by the McAlpine group for an additional year with an increase in the conversion price to $2.50 a share.
ref_time:          1989-11-02
Gold type:         DURATION
gold val:          P1Y
No parses! Will implement something to throw out words and try again.

Phrase:            mid afternoon yesterday
Sentence:          In London at mid-afternoon yesterday, Ratners's shares were up 2 pence (1.26 cents), at 260 pence ($1.64).
ref_time:          1989-11-02
Gold type:         TIME
gold val:          1989-11-01TAF
No parses! Will implement something to throw out words and try again.
Executing the phrase: dec. 10
with logic: (intersect:<s*,s> december:s 10d:s)
and lexical entries: [dec. :- NP : december:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: dec. 10
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 10d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: dec. 10
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 10d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: dec. 10
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 10d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: dec. 10
with logic: (intersect:<s*,s> december:s 10d:s)
and lexical entries: [dec. :- NP : december:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: already
with logic: present_ref:r
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: already
with logic: present_ref:r
and lexical entries: [already :- NP : present_ref:r]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: future
with logic: future_ref:r
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: future_ref:r
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: early 1990
with logic: 1990:r
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: early 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: early 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: early 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: early 1990
with logic: 1990:r
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: once
with logic: past_ref:r
and lexical entries: [once :- NP : past_ref:r]
Executing the phrase: once
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [once :- NP : past_ref:r]
Executing the phrase: once
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [once :- NP : past_ref:r]
Executing the phrase: once
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [once :- NP : past_ref:r]
Executing the phrase: once
with logic: past_ref:r
and lexical entries: [once :- NP : past_ref:r]
Executing the phrase: the early 1980s
with logic: 198:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), 1980s :- NP : 198:r]
Executing the phrase: the early 1980s
with logic: (previous:<s,<r,s>> 198:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), 1980s :- NP : 198:r]
Executing the phrase: the early 1980s
with logic: (this:<s,<r,s>> 198:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), 1980s :- NP : 198:r]
Executing the phrase: the early 1980s
with logic: (next:<s,<r,s>> 198:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), 1980s :- NP : 198:r]
Executing the phrase: the early 1980s
with logic: 198:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), 1980s :- NP : 198:r]
Executing the phrase: 1983
with logic: 1983:r
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (previous:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (this:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (next:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: 1983:r
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (previous:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (this:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (next:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: july 1988
with logic: (intersect:<s*,s> 1988:r july:s)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), 1988 :- NP : 1988:r, july :- NP : july:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: july 1988
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1988:r july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), 1988 :- NP : 1988:r, july :- NP : july:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: july 1988
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1988:r july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), 1988 :- NP : 1988:r, july :- NP : july:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: july 1988
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1988:r july:s) ref_time:r)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), 1988 :- NP : 1988:r, july :- NP : july:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: july 1988
with logic: (intersect:<s*,s> 1988:r july:s)
and lexical entries: [july :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 july:s)), 1988 :- NP : 1988:r, july :- NP : july:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: early this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: early this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: early this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: early this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: early this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: the next three quarters
with logic: (*:<d,<n,d>> quarters:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (*:<d,<n,d>> quarters:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (*:<d,<n,d>> quarters:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (*:<d,<n,d>> quarters:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> quarters:d 3:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (next:<d,<r,s>> (*:<d,<n,d>> quarters:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (next:<d,<r,s>> (*:<d,<n,d>> quarters:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (next:<d,<r,s>> (*:<d,<n,d>> quarters:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (next:<d,<r,s>> (*:<d,<n,d>> quarters:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the next three quarters
with logic: (next:<d,<r,s>> (*:<d,<n,d>> quarters:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), quarters :- NP : quarters:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: recent quarters
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), quarters :- NP : quarters:d]
Executing the phrase: recent quarters
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), quarters :- NP : quarters:d]
Executing the phrase: recent quarters
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), quarters :- NP : quarters:d]
Executing the phrase: recent quarters
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), quarters :- NP : quarters:d]
Executing the phrase: recent quarters
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), quarters :- NP : quarters:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: earlier
with logic: past_ref:r
and lexical entries: [earlier :- NP : past_ref:r]
Executing the phrase: earlier
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [earlier :- NP : past_ref:r]
Executing the phrase: earlier
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [earlier :- NP : past_ref:r]
Executing the phrase: earlier
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [earlier :- NP : past_ref:r]
Executing the phrase: earlier
with logic: past_ref:r
and lexical entries: [earlier :- NP : past_ref:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: the next year or so
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), year :- NP : year:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), year :- NP : year:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), year :- NP : year:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), year :- NP : year:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), year :- NP : year:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d, or so :- NP\NP : (lambda $0:s $0), or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d, or so :- NP\NP : (lambda $0:s $0), or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d, or so :- NP\NP : (lambda $0:s $0), or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d, or so :- NP\NP : (lambda $0:s $0), or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next year or so
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d, or so :- NP\NP : (lambda $0:s $0), or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: jan. 3
with logic: (intersect:<s*,s> january:s 3d:s)
and lexical entries: [jan. :- NP : january:s, 3 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 3d:s))]
Executing the phrase: jan. 3
with logic: (previous:<s,<r,s>> (intersect:<s*,s> january:s 3d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 3 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 3d:s))]
Executing the phrase: jan. 3
with logic: (this:<s,<r,s>> (intersect:<s*,s> january:s 3d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 3 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 3d:s))]
Executing the phrase: jan. 3
with logic: (next:<s,<r,s>> (intersect:<s*,s> january:s 3d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 3 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 3d:s))]
Executing the phrase: jan. 3
with logic: (intersect:<s*,s> january:s 3d:s)
and lexical entries: [jan. :- NP : january:s, 3 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 3d:s))]
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: aug. 26
with logic: (intersect:<s*,s> august:s 26d:s)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (intersect:<s*,s> august:s 26d:s)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: oct. 23
with logic: (intersect:<s*,s> october:s 23d:s)
and lexical entries: [oct. :- NP : october:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: oct. 23
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 23d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: oct. 23
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 23d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: oct. 23
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 23d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]
Executing the phrase: oct. 23
with logic: (intersect:<s*,s> october:s 23d:s)
and lexical entries: [oct. :- NP : october:s, 23 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 23d:s))]

Phrase:            about two years ago
Sentence:          Actually, about two years ago, the Journal listed the creation of the money fund as one of the 10 most significant events in the world of finance in the 20th century.
ref_time:          1989-11-01
Gold type:         DURATION
gold val:          P2Y
No parses! Will implement something to throw out words and try again.
Executing the phrase: the 20th century
with logic: 19:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 20th century :- NP : 19:r]
Executing the phrase: the 20th century
with logic: (previous:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 20th century :- NP : 19:r]
Executing the phrase: the 20th century
with logic: (this:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 20th century :- NP : 19:r]
Executing the phrase: the 20th century
with logic: (next:<s,<r,s>> 19:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 20th century :- NP : 19:r]
Executing the phrase: the 20th century
with logic: 19:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 20th century :- NP : 19:r]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a flat second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [a :- NP/NP : (lambda $0:s $0), flat :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: a flat second quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:s $0), flat :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: a flat second quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:s $0), flat :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: a flat second quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:s $0), flat :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: a flat second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [a :- NP/NP : (lambda $0:s $0), flat :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]

Phrase:            the year earlier period
Sentence:          The quarter-to-quarter comparison was also enhanced by charges taken in the year-earlier period, including $11 million related to the modernization of a pulp and newsprint mill in Alabama.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.

Phrase:            the 1989 period
Sentence:          In the 1989 period also, interest expense and tax rates were lower than a year ago.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the near future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near future :- NP : future_ref:r]
Executing the phrase: the near future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near future :- NP : future_ref:r]
Executing the phrase: the near future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near future :- NP : future_ref:r]
Executing the phrase: the near future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near future :- NP : future_ref:r]
Executing the phrase: the near future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near future :- NP : future_ref:r]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: year ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r)
and lexical entries: [year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: each month
with logic: month:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: each month
with logic: month:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: each month
with logic: month:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: each month
with logic: month:d
and lexical entries: [each :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: each month
with logic: (temporal_ref:<d,s> month:d)
and lexical entries: [each :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: last wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), wednesday :- NP : wednesday:s]
Executing the phrase: last wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), wednesday :- NP : wednesday:s]
Executing the phrase: last wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), wednesday :- NP : wednesday:s]
Executing the phrase: last wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), wednesday :- NP : wednesday:s]
Executing the phrase: last wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), wednesday :- NP : wednesday:s]
Executing the phrase: earlier yesterday
with logic: yesterday:r
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: earlier yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: earlier yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: earlier yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: earlier yesterday
with logic: yesterday:r
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]

Phrase:            the corresponding period last year
Sentence:          These results compare with net income of $1.8 million, or 44 cents a share, for the corresponding period last year.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: this quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: this quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: this quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: this quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: this quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]

Phrase:            this year's third quarter
Sentence:          Net sales for this year's third quarter were $14 million, down from $21.4 million last year.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1989-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]

Phrase:            last year's quarter
Sentence:          U.K. sales for last year's quarter were about $3 million.
ref_time:          1989-11-01
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: march 31
with logic: (intersect:<s*,s> march:s 31d:s)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (intersect:<s*,s> march:s 31d:s)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (this:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (next:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: this summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), summer :- NP : summer:s]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]

Phrase:            next year's first quarter
Sentence:          The establishment of the separate company, to be called Courtaulds Textiles, could be effective as early as next year's first quarter.
ref_time:          1989-10-31
Gold type:         DATE
gold val:          1990-Q1
No parses! Will implement something to throw out words and try again.
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: march 31
with logic: (intersect:<s*,s> march:s 31d:s)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> march:s 31d:s) ref_time:r)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: march 31
with logic: (intersect:<s*,s> march:s 31d:s)
and lexical entries: [march :- NP : march:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]

Phrase:            the fiscal year
Sentence:          In the fiscal year ended Jan. 31, the company reported sales of $59.5 million and pretax profit of $2.9 million.
ref_time:          1989-10-31
Gold type:         DURATION
gold val:          P1Y
No parses! Will implement something to throw out words and try again.
Executing the phrase: jan. 31
with logic: (intersect:<s*,s> january:s 31d:s)
and lexical entries: [jan. :- NP : january:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: jan. 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> january:s 31d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: jan. 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> january:s 31d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: jan. 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> january:s 31d:s) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: jan. 31
with logic: (intersect:<s*,s> january:s 31d:s)
and lexical entries: [jan. :- NP : january:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: 1992
with logic: 1992:r
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (previous:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (this:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (next:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: 1992:r
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (this:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (next:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (previous:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (this:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (next:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (previous:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (this:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (next:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: sept. 29
with logic: (intersect:<s*,s> september:s 29d:s)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (intersect:<s*,s> september:s 29d:s)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: early november
with logic: november:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: early november
with logic: (previous:<s,<r,s>> november:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: early november
with logic: (this:<s,<r,s>> november:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: early november
with logic: (next:<s,<r,s>> november:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: early november
with logic: november:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: last thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), thursday :- NP : thursday:s]
Executing the phrase: last thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), thursday :- NP : thursday:s]
Executing the phrase: last thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), thursday :- NP : thursday:s]
Executing the phrase: last thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), thursday :- NP : thursday:s]
Executing the phrase: last thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), thursday :- NP : thursday:s]
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]

Phrase:            friday evening
Sentence:          It had been due to expire Friday evening.
ref_time:          1989-10-30
Gold type:         TIME
gold val:          1989-10-27TEV
No parses! Will implement something to throw out words and try again.
Executing the phrase: mid november
with logic: november:s
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (previous:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (this:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (next:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: november:s
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: nov. 30
with logic: (intersect:<s*,s> november:s 30d:s)
and lexical entries: [nov. :- NP : november:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: nov. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 30d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: nov. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 30d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: nov. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 30d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: nov. 30
with logic: (intersect:<s*,s> november:s 30d:s)
and lexical entries: [nov. :- NP : november:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]

Phrase:            then
Sentence:          Until then, Conseco said the stock remains convertible into common stock at the rate of 1.439 shares of common stock for each share of preferred stock, which is equivalent to a conversion price of $17.50 a common share.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-11-30
No parses! Will implement something to throw out words and try again.
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 16d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: nov. 16
with logic: (intersect:<s*,s> november:s 16d:s)
and lexical entries: [nov. :- NP : november:s, 16 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 16d:s))]
Executing the phrase: march 1 2011
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r)
and lexical entries: [march :- NP : march:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2011 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2011:r))]
Executing the phrase: march 1 2011
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2011 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2011:r))]
Executing the phrase: march 1 2011
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2011 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2011:r))]
Executing the phrase: march 1 2011
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2011 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2011:r))]
Executing the phrase: march 1 2011
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 1d:s) 2011:r)
and lexical entries: [march :- NP : march:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2011 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2011:r))]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: last monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), monday :- NP : monday:s]
Executing the phrase: last monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), monday :- NP : monday:s]
Executing the phrase: last monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), monday :- NP : monday:s]
Executing the phrase: last monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), monday :- NP : monday:s]
Executing the phrase: last monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), monday :- NP : monday:s]

Phrase:            5 p.m. est nov. 6
Sentence:          extended its tender offer of $18 a share, or about $576 million, for the 33% of Telerate Inc. that it doesn't already own until 5 p.m. EST, Nov. 6.
ref_time:          1989-10-30
Gold type:         TIME
gold val:          1989-11-06T17
No parses! Will implement something to throw out words and try again.

Phrase:            midnight friday
Sentence:          The offer, which Telerate's two independent directors have rejected as inadequate, previously had been scheduled to expire at midnight Friday.
ref_time:          1989-10-30
Gold type:         TIME
gold val:          1989-10-27T24
No parses! Will implement something to throw out words and try again.
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: sept. 26
with logic: (intersect:<s*,s> september:s 26d:s)
and lexical entries: [sept. :- NP : september:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: sept. 26
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 26d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: sept. 26
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 26d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: sept. 26
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 26d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: sept. 26
with logic: (intersect:<s*,s> september:s 26d:s)
and lexical entries: [sept. :- NP : september:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: late last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: late last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: late last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: late last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: late last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (this:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (next:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Executing the phrase: around year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [around :- NP/NP : (lambda $0:s $0), year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: around year end
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: around year end
with logic: (this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: around year end
with logic: (next:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: around year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [around :- NP/NP : (lambda $0:s $0), year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: march 15 2007
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r)
and lexical entries: [march :- NP : march:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 2007 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2007:r))]
Executing the phrase: march 15 2007
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 2007 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2007:r))]
Executing the phrase: march 15 2007
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 2007 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2007:r))]
Executing the phrase: march 15 2007
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r) ref_time:r)
and lexical entries: [march :- NP : march:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 2007 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2007:r))]
Executing the phrase: march 15 2007
with logic: (intersect:<s*,s> (intersect:<s*,s> march:s 15d:s) 2007:r)
and lexical entries: [march :- NP : march:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 2007 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2007:r))]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), december :- NP : december:s]
Executing the phrase: last december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), december :- NP : december:s]
Executing the phrase: last december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), december :- NP : december:s]
Executing the phrase: last december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), december :- NP : december:s]
Executing the phrase: last december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), december :- NP : december:s]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (this:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (next:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (this:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (next:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: nearly two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: nearly two weeks ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> weeks:d 2:n) -1:n) ref_time:r)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: nearly three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: nearly three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: nearly three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: nearly three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: nearly three years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 3:n))
and lexical entries: [nearly :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (this:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (next:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]

Phrase:            the year earlier quarter
Sentence:          Unisys, whose revenue inched up 3.7% in the quarter to $2.35 billion from $2.27 billion in the year-earlier quarter, had an operating loss of about $30 million.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: a month ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a month ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a month ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a month ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: a month ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> month:d -1:n) ref_time:r)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), month :- NP : month:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), a :- NP/NP : (lambda $0:s $0)]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: future quarters
with logic: future_ref:r
and lexical entries: [future :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: future quarters
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: future quarters
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: future quarters
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: future quarters
with logic: future_ref:r
and lexical entries: [future :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the end of the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the end of the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the end of the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the end of the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the end of the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), end of :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the past several quarters
with logic: quarters:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: the past several quarters
with logic: quarters:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: the past several quarters
with logic: quarters:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: the past several quarters
with logic: quarters:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: the past several quarters
with logic: (temporal_ref:<d,s> quarters:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: every quarter
with logic: quarter:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: every quarter
with logic: quarter:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: every quarter
with logic: quarter:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: every quarter
with logic: quarter:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: every quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [every :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the near term
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near term :- NP : future_ref:r]
Executing the phrase: the near term
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near term :- NP : future_ref:r]
Executing the phrase: the near term
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near term :- NP : future_ref:r]
Executing the phrase: the near term
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near term :- NP : future_ref:r]
Executing the phrase: the near term
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), near term :- NP : future_ref:r]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: the past
with logic: past_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), past :- NP : past_ref:r, the past :- NP : past_ref:r]
Executing the phrase: from time to time
with logic: future_ref:r
and lexical entries: [from time to time :- NP : future_ref:r]
Executing the phrase: from time to time
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [from time to time :- NP : future_ref:r]
Executing the phrase: from time to time
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [from time to time :- NP : future_ref:r]
Executing the phrase: from time to time
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [from time to time :- NP : future_ref:r]
Executing the phrase: from time to time
with logic: future_ref:r
and lexical entries: [from time to time :- NP : future_ref:r]
Executing the phrase: sept. 14
with logic: (intersect:<s*,s> september:s 14d:s)
and lexical entries: [sept. :- NP : september:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: sept. 14
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 14d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: sept. 14
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 14d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: sept. 14
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 14d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: sept. 14
with logic: (intersect:<s*,s> september:s 14d:s)
and lexical entries: [sept. :- NP : september:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: may
with logic: may:s
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (this:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: (next:<s,<r,s>> may:s ref_time:r)
and lexical entries: [may :- NP : may:s]
Executing the phrase: may
with logic: may:s
and lexical entries: [may :- NP : may:s]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (previous:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (this:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: (next:<s,<r,s>> february:s ref_time:r)
and lexical entries: [february :- NP : february:s]
Executing the phrase: february
with logic: february:s
and lexical entries: [february :- NP : february:s]
Executing the phrase: early september
with logic: september:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: september:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: july
with logic: july:s
and lexical entries: [july :- NP : july:s]
Executing the phrase: july
with logic: (previous:<s,<r,s>> july:s ref_time:r)
and lexical entries: [july :- NP : july:s]
Executing the phrase: july
with logic: (this:<s,<r,s>> july:s ref_time:r)
and lexical entries: [july :- NP : july:s]
Executing the phrase: july
with logic: (next:<s,<r,s>> july:s ref_time:r)
and lexical entries: [july :- NP : july:s]
Executing the phrase: july
with logic: july:s
and lexical entries: [july :- NP : july:s]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: the next four years
with logic: (*:<d,<n,d>> years:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (*:<d,<n,d>> years:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (*:<d,<n,d>> years:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (*:<d,<n,d>> years:d 4:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 4:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the next four years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 4:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), four :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 4:n)), years :- NP : years:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)
and lexical entries: [months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)
and lexical entries: [months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)
and lexical entries: [months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)
and lexical entries: [months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: months ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d -1:n) ref_time:r)
and lexical entries: [months :- NP : months:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (*:<d,<n,d>> year:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]
Executing the phrase: five year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), year :- NP : year:d]

Phrase:            that time
Sentence:          During that time, Control Data had losses of more than $1 billion.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P5Y
No parses! Will implement something to throw out words and try again.
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: a good part of 1990
with logic: 1990:r
and lexical entries: [a good part of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: a good part of 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [a good part of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: a good part of 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [a good part of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: a good part of 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [a good part of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: a good part of 1990
with logic: 1990:r
and lexical entries: [a good part of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: recent months
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: recent months
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), months :- NP : months:d]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: several quarters
with logic: quarters:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: several quarters
with logic: quarters:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: several quarters
with logic: quarters:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: several quarters
with logic: quarters:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: several quarters
with logic: (temporal_ref:<d,s> quarters:d)
and lexical entries: [several :- NP/NP : (lambda $0:d $0), quarters :- NP : quarters:d]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: the end of 1990
with logic: 1990:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: 1990:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: this past spring
with logic: (this:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), past :- NP/NP : (lambda $0:s $0), spring :- NP : spring:s]
Executing the phrase: this past spring
with logic: (this:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), past :- NP/NP : (lambda $0:s $0), spring :- NP : spring:s]
Executing the phrase: this past spring
with logic: (this:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), past :- NP/NP : (lambda $0:s $0), spring :- NP : spring:s]
Executing the phrase: this past spring
with logic: (this:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), past :- NP/NP : (lambda $0:s $0), spring :- NP : spring:s]
Executing the phrase: this past spring
with logic: (this:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), past :- NP/NP : (lambda $0:s $0), spring :- NP : spring:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (previous:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (this:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: (next:<s,<r,s>> tomorrow:r ref_time:r)
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: tomorrow
with logic: tomorrow:r
and lexical entries: [tomorrow :- NP : tomorrow:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: the future
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), future :- NP : future_ref:r]
Executing the phrase: 1980
with logic: 1980:r
and lexical entries: [1980 :- NP : 1980:r]
Executing the phrase: 1980
with logic: (previous:<s,<r,s>> 1980:r ref_time:r)
and lexical entries: [1980 :- NP : 1980:r]
Executing the phrase: 1980
with logic: (this:<s,<r,s>> 1980:r ref_time:r)
and lexical entries: [1980 :- NP : 1980:r]
Executing the phrase: 1980
with logic: (next:<s,<r,s>> 1980:r ref_time:r)
and lexical entries: [1980 :- NP : 1980:r]
Executing the phrase: 1980
with logic: 1980:r
and lexical entries: [1980 :- NP : 1980:r]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: the short term
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), short term :- NP : future_ref:r]
Executing the phrase: the short term
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), short term :- NP : future_ref:r]
Executing the phrase: the short term
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), short term :- NP : future_ref:r]
Executing the phrase: the short term
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), short term :- NP : future_ref:r]
Executing the phrase: the short term
with logic: future_ref:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), short term :- NP : future_ref:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: 1994 or later
with logic: 1994:r
and lexical entries: [1994 :- NP : 1994:r, or later :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1994 or later
with logic: (previous:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r, or later :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1994 or later
with logic: (this:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r, or later :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1994 or later
with logic: (next:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r, or later :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1994 or later
with logic: 1994:r
and lexical entries: [1994 :- NP : 1994:r, or later :- NP\NP : (lambda $0:r $0)]

Phrase:            the weekend
Sentence:          Over the weekend, McCaw continued to call for an auction of LIN.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-W43-WE
No parses! Will implement something to throw out words and try again.
Executing the phrase: june 1994
with logic: (intersect:<s*,s> 1994:r june:s)
and lexical entries: [june :- NP : june:s, 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r)), june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1994 :- NP : 1994:r]
Executing the phrase: june 1994
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1994:r june:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r)), june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1994 :- NP : 1994:r]
Executing the phrase: june 1994
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1994:r june:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r)), june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1994 :- NP : 1994:r]
Executing the phrase: june 1994
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1994:r june:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r)), june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1994 :- NP : 1994:r]
Executing the phrase: june 1994
with logic: (intersect:<s*,s> 1994:r june:s)
and lexical entries: [june :- NP : june:s, 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r)), june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1994 :- NP : 1994:r]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1991
with logic: 1991:r
and lexical entries: [1991 :- NP : 1991:r]
Executing the phrase: 1991
with logic: (previous:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [1991 :- NP : 1991:r]
Executing the phrase: 1991
with logic: (this:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [1991 :- NP : 1991:r]
Executing the phrase: 1991
with logic: (next:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [1991 :- NP : 1991:r]
Executing the phrase: 1991
with logic: 1991:r
and lexical entries: [1991 :- NP : 1991:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: 1984
with logic: 1984:r
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (previous:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (this:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (next:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: 1984:r
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: past years
with logic: past_ref:r
and lexical entries: [past :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d, past years :- NP : past_ref:r]
Executing the phrase: past years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [past :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d, past years :- NP : past_ref:r]
Executing the phrase: past years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [past :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d, past years :- NP : past_ref:r]
Executing the phrase: past years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [past :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d, past years :- NP : past_ref:r]
Executing the phrase: past years
with logic: past_ref:r
and lexical entries: [past :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d, past years :- NP : past_ref:r]
Executing the phrase: these days
with logic: present_ref:r
and lexical entries: [these days :- NP : present_ref:r]
Executing the phrase: these days
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [these days :- NP : present_ref:r]
Executing the phrase: these days
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [these days :- NP : present_ref:r]
Executing the phrase: these days
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [these days :- NP : present_ref:r]
Executing the phrase: these days
with logic: present_ref:r
and lexical entries: [these days :- NP : present_ref:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (previous:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (this:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (next:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: eight trading days
with logic: (*:<d,<n,d>> days:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), trading :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: eight trading days
with logic: (*:<d,<n,d>> days:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), trading :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: eight trading days
with logic: (*:<d,<n,d>> days:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), trading :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: eight trading days
with logic: (*:<d,<n,d>> days:d 8:n)
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), trading :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: eight trading days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 8:n))
and lexical entries: [eight :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 8:n)), trading :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: oct. 12
with logic: (intersect:<s*,s> october:s 12d:s)
and lexical entries: [oct. :- NP : october:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: oct. 12
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 12d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: oct. 12
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 12d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: oct. 12
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 12d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: oct. 12
with logic: (intersect:<s*,s> october:s 12d:s)
and lexical entries: [oct. :- NP : october:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: the day
with logic: today:r
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [the day :- NP : today:r]
Executing the phrase: the day
with logic: today:r
and lexical entries: [the day :- NP : today:r]
Executing the phrase: three days
with logic: (*:<d,<n,d>> days:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), days :- NP : days:d]
Executing the phrase: three days
with logic: (*:<d,<n,d>> days:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), days :- NP : days:d]
Executing the phrase: three days
with logic: (*:<d,<n,d>> days:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), days :- NP : days:d]
Executing the phrase: three days
with logic: (*:<d,<n,d>> days:d 3:n)
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), days :- NP : days:d]
Executing the phrase: three days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 3:n))
and lexical entries: [three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), days :- NP : days:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: october
with logic: october:s
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (previous:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (this:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: (next:<s,<r,s>> october:s ref_time:r)
and lexical entries: [october :- NP : october:s]
Executing the phrase: october
with logic: october:s
and lexical entries: [october :- NP : october:s]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]

Phrase:            two to three weeks
Sentence:          Intel told analysts that the company will resume shipments of the chips within two to three weeks.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          P2W
No parses! Will implement something to throw out words and try again.
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]

Phrase:            the 1988 quarter
Sentence:          Kirschner earned $376,000 on revenue of $14.5 million in the 1988 quarter.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]

Phrase:            overnight
Sentence:          London shares were depressed initially by overnight losses in New York and by the drop in sterling after Mr. Lawson's resignation.
ref_time:          1989-10-30
Gold type:         TIME
gold val:          1989-10-26TNI
No parses! Will implement something to throw out words and try again.

Phrase:            the previous friday
Sentence:          The Financial Times 100-share index shed 47.3 points to close at 2082.1, down 4.5% from the previous Friday and 6.8% from Oct. 13, when Wall Street's plunge helped spark the current weakness in London.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-10-20
No parses! Will implement something to throw out words and try again.
Executing the phrase: oct. 13
with logic: (intersect:<s*,s> october:s 13d:s)
and lexical entries: [oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: oct. 13
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 13d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: oct. 13
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 13d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: oct. 13
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 13d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: oct. 13
with logic: (intersect:<s*,s> october:s 13d:s)
and lexical entries: [oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (*:<d,<n,d>> week:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: two week
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> week:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), week :- NP : week:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (*:<d,<n,d>> day:d 1:n)
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: one day
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> day:d 1:n))
and lexical entries: [one :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), day :- NP : day:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]

Phrase:            the morning
Sentence:          Dealers placed heavy buy orders in the morning to start the first trading day for November transactions.
ref_time:          1989-10-30
Gold type:         TIME
gold val:          1989-10-27TMO
No parses! Will implement something to throw out words and try again.
Executing the phrase: day
with logic: day:d
and lexical entries: [day :- NP : day:d]
Executing the phrase: day
with logic: day:d
and lexical entries: [day :- NP : day:d]
Executing the phrase: day
with logic: day:d
and lexical entries: [day :- NP : day:d]
Executing the phrase: day
with logic: day:d
and lexical entries: [day :- NP : day:d]
Executing the phrase: day
with logic: day:d
and lexical entries: [day :- NP : day:d]
Executing the phrase: november
with logic: november:s
and lexical entries: [november :- NP : november:s]
Executing the phrase: november
with logic: (previous:<s,<r,s>> november:s ref_time:r)
and lexical entries: [november :- NP : november:s]
Executing the phrase: november
with logic: (this:<s,<r,s>> november:s ref_time:r)
and lexical entries: [november :- NP : november:s]
Executing the phrase: november
with logic: (next:<s,<r,s>> november:s ref_time:r)
and lexical entries: [november :- NP : november:s]
Executing the phrase: november
with logic: november:s
and lexical entries: [november :- NP : november:s]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: week:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: the week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: the past five days
with logic: (*:<d,<n,d>> days:d 5:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), days :- NP : days:d]
Executing the phrase: the past five days
with logic: (*:<d,<n,d>> days:d 5:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), days :- NP : days:d]
Executing the phrase: the past five days
with logic: (*:<d,<n,d>> days:d 5:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), days :- NP : days:d]
Executing the phrase: the past five days
with logic: (*:<d,<n,d>> days:d 5:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), days :- NP : days:d]
Executing the phrase: the past five days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 5:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), days :- NP : days:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: week:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: a week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), week :- NP : week:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]

Phrase:            the weekend
Sentence:          They said contributing to the downward drift was the fact that many professional traders had chosen to square positions ahead of the weekend.
ref_time:          1989-10-30
Gold type:         DATE
gold val:          1989-W44-WE
No parses! Will implement something to throw out words and try again.
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (next:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (previous:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (this:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: (next:<s,<r,s>> 1993:r ref_time:r)
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: 1993
with logic: 1993:r
and lexical entries: [1993 :- NP : 1993:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: right now
with logic: present_ref:r
and lexical entries: [right now :- NP : present_ref:r]
Executing the phrase: right now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [right now :- NP : present_ref:r]
Executing the phrase: right now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [right now :- NP : present_ref:r]
Executing the phrase: right now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [right now :- NP : present_ref:r]
Executing the phrase: right now
with logic: present_ref:r
and lexical entries: [right now :- NP : present_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the next two years or so
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next two years or so
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next two years or so
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next two years or so
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next two years or so
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the next two years or so
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0), or so :- NP\NP : (lambda $0:s $0)]
Executing the phrase: the next two years or so
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0), or so :- NP\NP : (lambda $0:s $0)]
Executing the phrase: the next two years or so
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0), or so :- NP\NP : (lambda $0:s $0)]
Executing the phrase: the next two years or so
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0), or so :- NP\NP : (lambda $0:s $0)]
Executing the phrase: the next two years or so
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, or so :- NP\NP : (lambda $0:d $0), or so :- NP\NP : (lambda $0:s $0)]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: recent weeks
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), weeks :- NP : weeks:d]
Executing the phrase: recent weeks
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), weeks :- NP : weeks:d]
Executing the phrase: recent weeks
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), weeks :- NP : weeks:d]
Executing the phrase: recent weeks
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), weeks :- NP : weeks:d]
Executing the phrase: recent weeks
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), weeks :- NP : weeks:d]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: last friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), friday :- NP : friday:s]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: 1992
with logic: 1992:r
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (previous:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (this:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: (next:<s,<r,s>> 1992:r ref_time:r)
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: 1992
with logic: 1992:r
and lexical entries: [1992 :- NP : 1992:r]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the full year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), full :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: oct. 15 1999
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (previous:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (this:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: (next:<s,<r,s>> thursday:s ref_time:r)
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: thursday
with logic: thursday:s
and lexical entries: [thursday :- NP : thursday:s]
Executing the phrase: nov. 1 2009
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2009 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2009:r))]
Executing the phrase: nov. 1 2009
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2009 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2009:r))]
Executing the phrase: nov. 1 2009
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2009 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2009:r))]
Executing the phrase: nov. 1 2009
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2009 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2009:r))]
Executing the phrase: nov. 1 2009
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2009:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2009 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2009:r))]
Executing the phrase: 1999
with logic: 1999:r
and lexical entries: [1999 :- NP : 1999:r]
Executing the phrase: 1999
with logic: (previous:<s,<r,s>> 1999:r ref_time:r)
and lexical entries: [1999 :- NP : 1999:r]
Executing the phrase: 1999
with logic: (this:<s,<r,s>> 1999:r ref_time:r)
and lexical entries: [1999 :- NP : 1999:r]
Executing the phrase: 1999
with logic: (next:<s,<r,s>> 1999:r ref_time:r)
and lexical entries: [1999 :- NP : 1999:r]
Executing the phrase: 1999
with logic: 1999:r
and lexical entries: [1999 :- NP : 1999:r]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (*:<d,<n,d>> year:d 10:n)
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: 10 year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 10:n))
and lexical entries: [10 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 10:n)), year :- NP : year:d]
Executing the phrase: nov. 17 1992
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s)), 1992 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1992:r))]
Executing the phrase: nov. 17 1992
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s)), 1992 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1992:r))]
Executing the phrase: nov. 17 1992
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s)), 1992 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1992:r))]
Executing the phrase: nov. 17 1992
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s)), 1992 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1992:r))]
Executing the phrase: nov. 17 1992
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 17d:s) 1992:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s)), 1992 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1992:r))]
Executing the phrase: around nov. 1
with logic: (intersect:<s*,s> november:s 1d:s)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: around nov. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: around nov. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: around nov. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: around nov. 1
with logic: (intersect:<s*,s> november:s 1d:s)
and lexical entries: [around :- NP/NP : (lambda $0:s $0), nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: 30 day
with logic: (*:<d,<n,d>> day:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), day :- NP : day:d]
Executing the phrase: 30 day
with logic: (*:<d,<n,d>> day:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), day :- NP : day:d]
Executing the phrase: 30 day
with logic: (*:<d,<n,d>> day:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), day :- NP : day:d]
Executing the phrase: 30 day
with logic: (*:<d,<n,d>> day:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), day :- NP : day:d]
Executing the phrase: 30 day
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> day:d 30:n))
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), day :- NP : day:d]
Executing the phrase: dec. 31 1994
with logic: (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: dec. 31 1994
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: dec. 31 1994
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: dec. 31 1994
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: dec. 31 1994
with logic: (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1994:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1994 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1994:r))]
Executing the phrase: the end of 1994
with logic: 1994:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1994 :- NP : 1994:r]
Executing the phrase: the end of 1994
with logic: (previous:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1994 :- NP : 1994:r]
Executing the phrase: the end of 1994
with logic: (this:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1994 :- NP : 1994:r]
Executing the phrase: the end of 1994
with logic: (next:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1994 :- NP : 1994:r]
Executing the phrase: the end of 1994
with logic: 1994:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1994 :- NP : 1994:r]

Phrase:            the next 12 to 18 months
Sentence:          Mr. Vaux said the share issue is part of a strategy to strengthen Labatt's balance sheet in anticipation of acquisitions to be made during the next 12 to 18 months.
ref_time:          1989-10-30
Gold type:         DURATION
gold val:          PXM
No parses! Will implement something to throw out words and try again.
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: oct. 15 1999
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: oct. 15 1999
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 15d:s) 1999:r)
and lexical entries: [oct. :- NP : october:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s)), 1999 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1999:r))]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: as soon as possible
with logic: future_ref:r
and lexical entries: [as soon as possible :- NP : future_ref:r]
Executing the phrase: as soon as possible
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [as soon as possible :- NP : future_ref:r]
Executing the phrase: as soon as possible
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [as soon as possible :- NP : future_ref:r]
Executing the phrase: as soon as possible
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [as soon as possible :- NP : future_ref:r]
Executing the phrase: as soon as possible
with logic: future_ref:r
and lexical entries: [as soon as possible :- NP : future_ref:r]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: july 31
with logic: (intersect:<s*,s> july:s 31d:s)
and lexical entries: [july :- NP : july:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: july 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> july:s 31d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: july 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> july:s 31d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: july 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> july:s 31d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: july 31
with logic: (intersect:<s*,s> july:s 31d:s)
and lexical entries: [july :- NP : july:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the year ago third quarter
with logic: (intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, the :- NP/NP : (lambda $0:s $0), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the year ago third quarter
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, the :- NP/NP : (lambda $0:s $0), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the year ago third quarter
with logic: (this:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, the :- NP/NP : (lambda $0:s $0), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the year ago third quarter
with logic: (next:<s,<r,s>> (intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, the :- NP/NP : (lambda $0:s $0), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the year ago third quarter
with logic: (intersect:<s*,s> (previous:<d,<r,s>> (*:<d,<n,d>> year:d -1:n) ref_time:r) (nth:<d,<n,s>> quarter:d 3o:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r)), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, the :- NP/NP : (lambda $0:s $0), third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the next two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the next two years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: fiscal 1989
with logic: 1989:r
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), 1989 :- NP : 1989:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: aug. 31
with logic: (intersect:<s*,s> august:s 31d:s)
and lexical entries: [aug. :- NP : august:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: aug. 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 31d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: aug. 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 31d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: aug. 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 31d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: aug. 31
with logic: (intersect:<s*,s> august:s 31d:s)
and lexical entries: [aug. :- NP : august:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [september :- NP : september:s]
Executing the phrase: september
with logic: september:s
and lexical entries: [september :- NP : september:s]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: this fall
with logic: (this:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: this fall
with logic: (this:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: this fall
with logic: (this:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: this fall
with logic: (this:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: this fall
with logic: (this:<s,<r,s>> fall:s ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:s (this:<s,<r,s>> $0 ref_time:r)), fall :- NP : fall:s]
Executing the phrase: future
with logic: future_ref:r
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: future
with logic: future_ref:r
and lexical entries: [future :- NP : future_ref:r]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the past year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: aug. 26
with logic: (intersect:<s*,s> august:s 26d:s)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 26d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: aug. 26
with logic: (intersect:<s*,s> august:s 26d:s)
and lexical entries: [aug. :- NP : august:s, 26 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 26d:s))]
Executing the phrase: oct. 20
with logic: (intersect:<s*,s> october:s 20d:s)
and lexical entries: [oct. :- NP : october:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: oct. 20
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 20d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: oct. 20
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 20d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: oct. 20
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 20d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: oct. 20
with logic: (intersect:<s*,s> october:s 20d:s)
and lexical entries: [oct. :- NP : october:s, 20 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 20d:s))]
Executing the phrase: aug. 10 1988
with logic: (intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r)
and lexical entries: [aug. :- NP : august:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s)), 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: aug. 10 1988
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s)), 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: aug. 10 1988
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s)), 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: aug. 10 1988
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s)), 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: aug. 10 1988
with logic: (intersect:<s*,s> (intersect:<s*,s> august:s 10d:s) 1988:r)
and lexical entries: [aug. :- NP : august:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s)), 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: 18 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 18:n))
and lexical entries: [18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: late yesterday
with logic: yesterday:r
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: late yesterday
with logic: yesterday:r
and lexical entries: [late :- NP/NP : (lambda $0:s $0), yesterday :- NP : yesterday:r]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: year:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: the year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: july 2
with logic: (intersect:<s*,s> july:s 2d:s)
and lexical entries: [july :- NP : july:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: july 2
with logic: (previous:<s,<r,s>> (intersect:<s*,s> july:s 2d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: july 2
with logic: (this:<s,<r,s>> (intersect:<s*,s> july:s 2d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: july 2
with logic: (next:<s,<r,s>> (intersect:<s*,s> july:s 2d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: july 2
with logic: (intersect:<s*,s> july:s 2d:s)
and lexical entries: [july :- NP : july:s, 2 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2d:s))]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: mid november
with logic: november:s
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (previous:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (this:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: (next:<s,<r,s>> november:s ref_time:r)
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: mid november
with logic: november:s
and lexical entries: [mid :- NP/NP : (lambda $0:s $0), november :- NP : november:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (previous:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (this:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: (next:<s,<r,s>> december:s ref_time:r)
and lexical entries: [december :- NP : december:s]
Executing the phrase: december
with logic: december:s
and lexical entries: [december :- NP : december:s]

Phrase:            the comparable year ago quarter
Sentence:          In the comparable year-ago quarter, the second quarter ended Oct. 31, Service Corp.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-Q2
No parses! Will implement something to throw out words and try again.
Executing the phrase: second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: second quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: second quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: second quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]

Phrase:            that quarter
Sentence:          Results for that quarter included a $30 million, or 40 cents a share, write-down associated with the consolidation of a facility.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-Q2
No parses! Will implement something to throw out words and try again.
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: nov. 17
with logic: (intersect:<s*,s> november:s 17d:s)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (intersect:<s*,s> november:s 17d:s)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: jan. 1 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r)
and lexical entries: [jan. :- NP : january:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: jan. 1 1990
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: jan. 1 1990
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: jan. 1 1990
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r) ref_time:r)
and lexical entries: [jan. :- NP : january:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: jan. 1 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> january:s 1d:s) 1990:r)
and lexical entries: [jan. :- NP : january:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: aug. 21
with logic: (intersect:<s*,s> august:s 21d:s)
and lexical entries: [aug. :- NP : august:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: aug. 21
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 21d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: aug. 21
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 21d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: aug. 21
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 21d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: aug. 21
with logic: (intersect:<s*,s> august:s 21d:s)
and lexical entries: [aug. :- NP : august:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]

Phrase:            the year earlier third quarter
Sentence:          In the year-earlier third quarter, Poughkeepsie Savings had net income of $2.8 million, or 77 cents a share.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (this:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: (next:<s,<r,s>> june:s ref_time:r)
and lexical entries: [june :- NP : june:s]
Executing the phrase: june
with logic: june:s
and lexical entries: [june :- NP : june:s]
Executing the phrase: nov. 1
with logic: (intersect:<s*,s> november:s 1d:s)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: nov. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: nov. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: nov. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 1d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: nov. 1
with logic: (intersect:<s*,s> november:s 1d:s)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: yet
with logic: present_ref:r
and lexical entries: [yet :- NP : present_ref:r]
Executing the phrase: yet
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [yet :- NP : present_ref:r]
Executing the phrase: yet
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [yet :- NP : present_ref:r]
Executing the phrase: yet
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [yet :- NP : present_ref:r]
Executing the phrase: yet
with logic: present_ref:r
and lexical entries: [yet :- NP : present_ref:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: dec. 31 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: dec. 31 1990
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: dec. 31 1990
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: dec. 31 1990
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: dec. 31 1990
with logic: (intersect:<s*,s> (intersect:<s*,s> december:s 31d:s) 1990:r)
and lexical entries: [dec. :- NP : december:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s)), 1990 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1990:r))]
Executing the phrase: the next 14 months
with logic: (*:<d,<n,d>> months:d 14:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (*:<d,<n,d>> months:d 14:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (*:<d,<n,d>> months:d 14:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (*:<d,<n,d>> months:d 14:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 14:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: the next 14 months
with logic: (next:<d,<r,s>> (*:<d,<n,d>> months:d 14:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), 14 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 14:n)), months :- NP : months:d]
Executing the phrase: 1984
with logic: 1984:r
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (previous:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (this:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: (next:<s,<r,s>> 1984:r ref_time:r)
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: 1984
with logic: 1984:r
and lexical entries: [1984 :- NP : 1984:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: at least 30 days
with logic: (*:<d,<n,d>> days:d 30:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), days :- NP : days:d]
Executing the phrase: at least 30 days
with logic: (*:<d,<n,d>> days:d 30:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), days :- NP : days:d]
Executing the phrase: at least 30 days
with logic: (*:<d,<n,d>> days:d 30:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), days :- NP : days:d]
Executing the phrase: at least 30 days
with logic: (*:<d,<n,d>> days:d 30:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), days :- NP : days:d]
Executing the phrase: at least 30 days
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> days:d 30:n))
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), 30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), days :- NP : days:d]
Executing the phrase: august 1988
with logic: (intersect:<s*,s> 1988:r august:s)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1988:r august:s) ref_time:r)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: august 1988
with logic: (intersect:<s*,s> 1988:r august:s)
and lexical entries: [august :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 august:s)), 1988 :- NP : 1988:r, august :- NP : august:s, 1988 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1988:r))]
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 7d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: dec. 7
with logic: (intersect:<s*,s> december:s 7d:s)
and lexical entries: [dec. :- NP : december:s, 7 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 7d:s))]
Executing the phrase: nov. 22
with logic: (intersect:<s*,s> november:s 22d:s)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (intersect:<s*,s> november:s 22d:s)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]

Phrase:            the year earlier quarter
Sentence:          In the year-earlier quarter, the tax credit was $3.3 million.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: earlier this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]

Phrase:            the year earlier period
Sentence:          In the year-earlier period, the company had net of $77.2 million, or $3.68 a share, and a tax credit of $7.7 million.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P9M
No parses! Will implement something to throw out words and try again.
Executing the phrase: dec. 1
with logic: (intersect:<s*,s> december:s 1d:s)
and lexical entries: [dec. :- NP : december:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: dec. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 1d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: dec. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 1d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: dec. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 1d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: dec. 1
with logic: (intersect:<s*,s> december:s 1d:s)
and lexical entries: [dec. :- NP : december:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: nov. 10
with logic: (intersect:<s*,s> november:s 10d:s)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 10d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: nov. 10
with logic: (intersect:<s*,s> november:s 10d:s)
and lexical entries: [nov. :- NP : november:s, 10 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 10d:s))]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1990 and beyond
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r, and beyond :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1990 and beyond
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r, and beyond :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1990 and beyond
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r, and beyond :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1990 and beyond
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r, and beyond :- NP\NP : (lambda $0:r $0)]
Executing the phrase: 1990 and beyond
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r, and beyond :- NP\NP : (lambda $0:r $0)]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: the weeks ahead
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, ahead :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the weeks ahead
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, ahead :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the weeks ahead
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, ahead :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the weeks ahead
with logic: weeks:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, ahead :- NP\NP : (lambda $0:d $0)]
Executing the phrase: the weeks ahead
with logic: (temporal_ref:<d,s> weeks:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), weeks :- NP : weeks:d, ahead :- NP\NP : (lambda $0:d $0)]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: week:d
and lexical entries: [week :- NP : week:d]
Executing the phrase: week
with logic: (temporal_ref:<d,s> week:d)
and lexical entries: [week :- NP : week:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: every month
with logic: month:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: every month
with logic: month:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: every month
with logic: month:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: every month
with logic: month:d
and lexical entries: [every :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: every month
with logic: (temporal_ref:<d,s> month:d)
and lexical entries: [every :- NP/NP : (lambda $0:d $0), month :- NP : month:d]
Executing the phrase: the last three years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the last three years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the last three years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the last three years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the last three years
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: early september
with logic: september:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: early september
with logic: september:s
and lexical entries: [early :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: friday oct. 13
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s 13d:s) friday:s)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s) ref_time:r)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: friday oct. 13
with logic: (intersect:<s*,s> (intersect:<s*,s> october:s friday:s) 13d:s)
and lexical entries: [friday :- NP/NP : (lambda $0:s (intersect:<s*,s> $0 friday:s)), oct. :- NP : october:s, 13 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 13d:s))]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (*:<d,<n,d>> months:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the past two months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (this:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (next:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: the last two months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the last two months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the last two months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the last two months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: the last two months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 2:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), months :- NP : months:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: oct. 19
with logic: (intersect:<s*,s> october:s 19d:s)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (intersect:<s*,s> october:s 19d:s)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: oct. 19
with logic: (intersect:<s*,s> october:s 19d:s)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 19d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: oct. 19
with logic: (intersect:<s*,s> october:s 19d:s)
and lexical entries: [oct. :- NP : october:s, 19 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 19d:s))]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: recent weeks and months
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r, weeks and months :- NP\NP : (lambda $0:r $0)]
Executing the phrase: recent weeks and months
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r, weeks and months :- NP\NP : (lambda $0:r $0)]
Executing the phrase: recent weeks and months
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r, weeks and months :- NP\NP : (lambda $0:r $0)]
Executing the phrase: recent weeks and months
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r, weeks and months :- NP\NP : (lambda $0:r $0)]
Executing the phrase: recent weeks and months
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r, weeks and months :- NP\NP : (lambda $0:r $0)]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: last june
with logic: (previous:<s,<r,s>> june:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), june :- NP : june:s]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: this week
with logic: (this:<d,<r,s>> week:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: recent
with logic: past_ref:r
and lexical entries: [recent :- NP : past_ref:r]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]

Phrase:            a three year period
Sentence:          In that suit, the SEC accused Mr. Antar of engaging in a "massive financial fraud" to overstate the earnings of Crazy Eddie, Edison, N.J., over a three-year period.
ref_time:          1989-10-27
Gold type:         DURATION
gold val:          P3Y
No parses! Will implement something to throw out words and try again.
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (previous:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (this:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (next:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (previous:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (this:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (next:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]

Phrase:            sometime next year
Sentence:          Computer experts familiar with the flaws, found in Intel's 80486 chip, say the defects don't affect the average user and are likely to be cleared up before most computers using the chip as their " brains " appear on the market sometime next year.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1990-XX-XX
No parses! Will implement something to throw out words and try again.
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (previous:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (this:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: (next:<s,<r,s>> friday:s ref_time:r)
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: friday
with logic: friday:s
and lexical entries: [friday :- NP : friday:s]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: last week
with logic: (previous:<d,<r,s>> week:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: next week
with logic: (next:<d,<r,s>> week:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), week :- NP : week:d]
Executing the phrase: late september
with logic: september:s
and lexical entries: [late :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: late september
with logic: (previous:<s,<r,s>> september:s ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: late september
with logic: (this:<s,<r,s>> september:s ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: late september
with logic: (next:<s,<r,s>> september:s ref_time:r)
and lexical entries: [late :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: late september
with logic: september:s
and lexical entries: [late :- NP/NP : (lambda $0:s $0), september :- NP : september:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 6d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: nov. 6
with logic: (intersect:<s*,s> november:s 6d:s)
and lexical entries: [nov. :- NP : november:s, 6 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 6d:s))]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: years:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: several years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [several :- NP/NP : (lambda $0:d $0), years :- NP : years:d]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the next few years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few years
with logic: years:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: the next few years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next few :- NP/NP : (lambda $0:d $0), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0)]
Executing the phrase: months
with logic: months:d
and lexical entries: [months :- NP : months:d]
Executing the phrase: months
with logic: months:d
and lexical entries: [months :- NP : months:d]
Executing the phrase: months
with logic: months:d
and lexical entries: [months :- NP : months:d]
Executing the phrase: months
with logic: months:d
and lexical entries: [months :- NP : months:d]
Executing the phrase: months
with logic: months:d
and lexical entries: [months :- NP : months:d]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: days:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: a few days
with logic: (temporal_ref:<d,s> days:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), few :- NP/NP : (lambda $0:d $0), days :- NP : days:d]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (previous:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (this:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: (next:<s,<r,s>> march:s ref_time:r)
and lexical entries: [march :- NP : march:s]
Executing the phrase: march
with logic: march:s
and lexical entries: [march :- NP : march:s]
Executing the phrase: the following month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: the following month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: the following month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: the following month
with logic: (*:<d,<n,d>> month:d 1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: the following month
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> month:d 1:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), following :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 1:n)), month :- NP : month:d]
Executing the phrase: early this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: early this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: early this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: early this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: early this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: the past two quarters
with logic: (*:<d,<n,d>> quarters:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), quarters :- NP : quarters:d]
Executing the phrase: the past two quarters
with logic: (*:<d,<n,d>> quarters:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), quarters :- NP : quarters:d]
Executing the phrase: the past two quarters
with logic: (*:<d,<n,d>> quarters:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), quarters :- NP : quarters:d]
Executing the phrase: the past two quarters
with logic: (*:<d,<n,d>> quarters:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), quarters :- NP : quarters:d]
Executing the phrase: the past two quarters
with logic: (*:<d,<n,d>> quarters:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), quarters :- NP : quarters:d]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]

Phrase:            the beginning of october
Sentence:          Also involved in the group is Robert F. Angelo, formerly Phoenix's senior vice president, field operations, who left Phoenix at the beginning of October.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1989-10
No parses! Will implement something to throw out words and try again.
Executing the phrase: nov. 9
with logic: (intersect:<s*,s> november:s 9d:s)
and lexical entries: [nov. :- NP : november:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: nov. 9
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 9d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: nov. 9
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 9d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: nov. 9
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 9d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: nov. 9
with logic: (intersect:<s*,s> november:s 9d:s)
and lexical entries: [nov. :- NP : november:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]

Phrase:            annually
Sentence:          Gary Lukassen, chief financial officer, said redemption of the preferred shares, originally issued at C$25 each, will eliminate dividend payments of C$17.9 million annually.
ref_time:          1989-10-27
Gold type:         SET
gold val:          XXXX
No parses! Will implement something to throw out words and try again.
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (previous:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (this:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: (next:<s,<r,s>> today:r ref_time:r)
and lexical entries: [today :- NP : today:r]
Executing the phrase: today
with logic: today:r
and lexical entries: [today :- NP : today:r]
Executing the phrase: later this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: later this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: later this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: later this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: later this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]

Phrase:            the third quarter of 1984
Sentence:          The Dearborn, Mich., energy company stopped paying a dividend in the third quarter of 1984 because of troubles at its Midland nuclear plant.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1984-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: currently
with logic: present_ref:r
and lexical entries: [currently :- NP : present_ref:r]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (previous:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (this:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: (next:<s,<r,s>> tuesday:s ref_time:r)
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: tuesday
with logic: tuesday:s
and lexical entries: [tuesday :- NP : tuesday:s]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]

Phrase:            last
Sentence:          Mr. Fournier said the exceptional gain would mean nearly twice as high a dividend this year as last.
ref_time:          1989-10-27
Gold type:         DATE
gold val:          1988
No parses! Will implement something to throw out words and try again.
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the past 20 years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past 20 years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past 20 years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past 20 years
with logic: (*:<d,<n,d>> years:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: the past 20 years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 20:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), years :- NP : years:d]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (previous:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (this:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (next:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (previous:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (this:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: (next:<s,<r,s>> monday:s ref_time:r)
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: monday
with logic: monday:s
and lexical entries: [monday :- NP : monday:s]
Executing the phrase: july 1
with logic: (intersect:<s*,s> july:s 1d:s)
and lexical entries: [july :- NP : july:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: july 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> july:s 1d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: july 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> july:s 1d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: july 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> july:s 1d:s) ref_time:r)
and lexical entries: [july :- NP : july:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: july 1
with logic: (intersect:<s*,s> july:s 1d:s)
and lexical entries: [july :- NP : july:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: nov. 1 2004
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2004 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2004:r))]
Executing the phrase: nov. 1 2004
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2004 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2004:r))]
Executing the phrase: nov. 1 2004
with logic: (this:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2004 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2004:r))]
Executing the phrase: nov. 1 2004
with logic: (next:<s,<r,s>> (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2004 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2004:r))]
Executing the phrase: nov. 1 2004
with logic: (intersect:<s*,s> (intersect:<s*,s> november:s 1d:s) 2004:r)
and lexical entries: [nov. :- NP : november:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s)), 2004 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 2004:r))]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: later yesterday
with logic: yesterday:r
and lexical entries: [later :- NP/NP : (lambda $0:r $0), yesterday :- NP : yesterday:r]
Executing the phrase: later yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), yesterday :- NP : yesterday:r]
Executing the phrase: later yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), yesterday :- NP : yesterday:r]
Executing the phrase: later yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [later :- NP/NP : (lambda $0:r $0), yesterday :- NP : yesterday:r]
Executing the phrase: later yesterday
with logic: yesterday:r
and lexical entries: [later :- NP/NP : (lambda $0:r $0), yesterday :- NP : yesterday:r]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: coming weeks
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), weeks :- NP : weeks:d]
Executing the phrase: coming weeks
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), weeks :- NP : weeks:d]
Executing the phrase: coming weeks
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), weeks :- NP : weeks:d]
Executing the phrase: coming weeks
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), weeks :- NP : weeks:d]
Executing the phrase: coming weeks
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), weeks :- NP : weeks:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (*:<d,<n,d>> year:d 30:n)
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: 30 year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 30:n))
and lexical entries: [30 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 30:n)), year :- NP : year:d]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (previous:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (this:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: (next:<s,<r,s>> wednesday:s ref_time:r)
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: wednesday
with logic: wednesday:s
and lexical entries: [wednesday :- NP : wednesday:s]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]

Phrase:            the year earlier nine months
Sentence:          Net for the year-earlier nine months also included a gain of $9.7 million, or 15 cents a share, in the carrying value of the Conner investment.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P9M
No parses! Will implement something to throw out words and try again.
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the next couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: the next couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: the next couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: the next couple of years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: the next couple of years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d, next :- NP/NP : (lambda $0:d $0), couple of :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n))]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]

Phrase:            the year earlier quarter
Sentence:          In the year-earlier quarter, the automobile and trucking insurer had earnings of $1.4 million, or 48 cents a share on a restated basis, on revenue of $16.5 million.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: june 1989
with logic: (intersect:<s*,s> 1989:r june:s)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1989 :- NP : 1989:r, june :- NP : june:s, 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: june 1989
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1989:r june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1989 :- NP : 1989:r, june :- NP : june:s, 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: june 1989
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1989:r june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1989 :- NP : 1989:r, june :- NP : june:s, 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: june 1989
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1989:r june:s) ref_time:r)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1989 :- NP : 1989:r, june :- NP : june:s, 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: june 1989
with logic: (intersect:<s*,s> 1989:r june:s)
and lexical entries: [june :- NP/NP : (lambda $0:r (intersect:<s*,s> $0 june:s)), 1989 :- NP : 1989:r, june :- NP : june:s, 1989 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1989:r))]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]

Phrase:            the year earlier period
Sentence:          In the year-earlier period, the company earned $461 million, or $1.91 a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: several months
with logic: months:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: several months
with logic: months:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: several months
with logic: months:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: several months
with logic: months:d
and lexical entries: [several :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: several months
with logic: (temporal_ref:<d,s> months:d)
and lexical entries: [several :- NP/NP : (lambda $0:d $0), months :- NP : months:d]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: current
with logic: present_ref:r
and lexical entries: [current :- NP : present_ref:r]
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (this:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (next:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: year:d
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: a year
with logic: (temporal_ref:<d,s> year:d)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year :- NP : year:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: earlier in the year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier in the :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier in the year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier in the :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier in the year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier in the :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier in the year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier in the :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier in the year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier in the :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: dec. 14
with logic: (intersect:<s*,s> december:s 14d:s)
and lexical entries: [dec. :- NP : december:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: dec. 14
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 14d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: dec. 14
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 14d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: dec. 14
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 14d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: dec. 14
with logic: (intersect:<s*,s> december:s 14d:s)
and lexical entries: [dec. :- NP : december:s, 14 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 14d:s))]
Executing the phrase: nov. 15
with logic: (intersect:<s*,s> november:s 15d:s)
and lexical entries: [nov. :- NP : november:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: nov. 15
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 15d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: nov. 15
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 15d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: nov. 15
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 15d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: nov. 15
with logic: (intersect:<s*,s> november:s 15d:s)
and lexical entries: [nov. :- NP : november:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (previous:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (this:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: (next:<s,<r,s>> january:s ref_time:r)
and lexical entries: [january :- NP : january:s]
Executing the phrase: january
with logic: january:s
and lexical entries: [january :- NP : january:s]
Executing the phrase: dec. 21
with logic: (intersect:<s*,s> december:s 21d:s)
and lexical entries: [dec. :- NP : december:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: dec. 21
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 21d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: dec. 21
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 21d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: dec. 21
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 21d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: dec. 21
with logic: (intersect:<s*,s> december:s 21d:s)
and lexical entries: [dec. :- NP : december:s, 21 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 21d:s))]
Executing the phrase: aug. 9
with logic: (intersect:<s*,s> august:s 9d:s)
and lexical entries: [aug. :- NP : august:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: aug. 9
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 9d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: aug. 9
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 9d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: aug. 9
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 9d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: aug. 9
with logic: (intersect:<s*,s> august:s 9d:s)
and lexical entries: [aug. :- NP : august:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: then current
with logic: past_ref:r
and lexical entries: [then current :- NP : past_ref:r]
Executing the phrase: then current
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [then current :- NP : past_ref:r]
Executing the phrase: then current
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [then current :- NP : past_ref:r]
Executing the phrase: then current
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [then current :- NP : past_ref:r]
Executing the phrase: then current
with logic: past_ref:r
and lexical entries: [then current :- NP : past_ref:r]
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: feb. 1
with logic: (intersect:<s*,s> february:s 1d:s)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (intersect:<s*,s> february:s 1d:s)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: quarterly
with logic: (*:<d,<n,d>> month:d 3:n)
and lexical entries: [quarterly :- NP : (*:<d,<n,d>> month:d 3:n)]
Executing the phrase: quarterly
with logic: (*:<d,<n,d>> month:d 3:n)
and lexical entries: [quarterly :- NP : (*:<d,<n,d>> month:d 3:n)]
Executing the phrase: quarterly
with logic: (*:<d,<n,d>> month:d 3:n)
and lexical entries: [quarterly :- NP : (*:<d,<n,d>> month:d 3:n)]
Executing the phrase: quarterly
with logic: (*:<d,<n,d>> month:d 3:n)
and lexical entries: [quarterly :- NP : (*:<d,<n,d>> month:d 3:n)]
Executing the phrase: quarterly
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> month:d 3:n))
and lexical entries: [quarterly :- NP : (*:<d,<n,d>> month:d 3:n)]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (previous:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (this:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: (next:<s,<r,s>> 1987:r ref_time:r)
and lexical entries: [1987 :- NP : 1987:r]
Executing the phrase: 1987
with logic: 1987:r
and lexical entries: [1987 :- NP : 1987:r]

Phrase:            this year's third quarter
Sentence:          In this year's third quarter, for example, net was $10.5 million, or $1.05 a share, compared with $10.3 million, or $1.02 a share, a year earlier.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1974
with logic: 1974:r
and lexical entries: [1974 :- NP : 1974:r]
Executing the phrase: 1974
with logic: (previous:<s,<r,s>> 1974:r ref_time:r)
and lexical entries: [1974 :- NP : 1974:r]
Executing the phrase: 1974
with logic: (this:<s,<r,s>> 1974:r ref_time:r)
and lexical entries: [1974 :- NP : 1974:r]
Executing the phrase: 1974
with logic: (next:<s,<r,s>> 1974:r ref_time:r)
and lexical entries: [1974 :- NP : 1974:r]
Executing the phrase: 1974
with logic: 1974:r
and lexical entries: [1974 :- NP : 1974:r]
Executing the phrase: feb. 1
with logic: (intersect:<s*,s> february:s 1d:s)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> february:s 1d:s) ref_time:r)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: feb. 1
with logic: (intersect:<s*,s> february:s 1d:s)
and lexical entries: [feb. :- NP : february:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: sept. 29
with logic: (intersect:<s*,s> september:s 29d:s)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 29d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: sept. 29
with logic: (intersect:<s*,s> september:s 29d:s)
and lexical entries: [sept. :- NP : september:s, 29 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 29d:s))]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]

Phrase:            the 1988 period
Sentence:          In the 1988 period, the company earned $20.6 million, or 26 cents a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q1
No parses! Will implement something to throw out words and try again.
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (this:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (next:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (this:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: (next:<s,<r,s>> april:s ref_time:r)
and lexical entries: [april :- NP : april:s]
Executing the phrase: april
with logic: april:s
and lexical entries: [april :- NP : april:s]
Executing the phrase: the summer
with logic: summer:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the summer
with logic: (previous:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the summer
with logic: (next:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the summer
with logic: summer:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: its fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [its :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: its fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [its :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: its fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [its :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: its fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [its :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: its fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [its :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: june 30
with logic: (intersect:<s*,s> june:s 30d:s)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (intersect:<s*,s> june:s 30d:s)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]

Phrase:            the fiscal year
Sentence:          Mr. McNealy said the issues that hurt Sun's performance earlier this year are now " largely" behind the firm, and he indicated that Sun's profitability should increase throughout the fiscal year.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P1Y
No parses! Will implement something to throw out words and try again.
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: early next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: nov. 22
with logic: (intersect:<s*,s> november:s 22d:s)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 22d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: nov. 22
with logic: (intersect:<s*,s> november:s 22d:s)
and lexical entries: [nov. :- NP : november:s, 22 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 22d:s))]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last may
with logic: (previous:<s,<r,s>> may:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), may :- NP : may:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: last april
with logic: (previous:<s,<r,s>> april:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), april :- NP : april:s]
Executing the phrase: two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: two years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]

Phrase:            this morning
Sentence:          Earnings for GM common stock, reflecting the performance of GM's core automotive operations, will be disclosed this morning.
ref_time:          1989-10-26
Gold type:         TIME
gold val:          1989-10-26TMO
No parses! Will implement something to throw out words and try again.
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (previous:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (this:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (next:<s,<r,s>> (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s)) ref_time:r)
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: year end
with logic: (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))
and lexical entries: [year end :- NP : (intersect:<s*,s> (this:<d,<r,s>> year:d ref_time:r) (intersect:<s*,s> december:s 31d:s))]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the first nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), first :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the latest nine months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the latest nine months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the latest nine months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the latest nine months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the latest nine months
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> months:d 9:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the end of 1990
with logic: 1990:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: the end of 1990
with logic: 1990:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), end of :- NP/NP : (lambda $0:s $0), 1990 :- NP : 1990:r]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: next year
with logic: (next:<d,<r,s>> year:d ref_time:r)
and lexical entries: [next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the next three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (*:<d,<n,d>> years:d 3:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 3:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), next :- NP/NP : (lambda $0:d $0), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: the next three years
with logic: (next:<d,<r,s>> (*:<d,<n,d>> years:d 3:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), next :- NP/NP : (lambda $0:d (next:<d,<r,s>> $0 ref_time:r)), three :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 3:n)), years :- NP : years:d]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (previous:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (this:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: (next:<s,<r,s>> 1988:r ref_time:r)
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1988
with logic: 1988:r
and lexical entries: [1988 :- NP : 1988:r]
Executing the phrase: 1983
with logic: 1983:r
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (previous:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (this:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: (next:<s,<r,s>> 1983:r ref_time:r)
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: 1983
with logic: 1983:r
and lexical entries: [1983 :- NP : 1983:r]
Executing the phrase: the past 20 months
with logic: (*:<d,<n,d>> months:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), months :- NP : months:d]
Executing the phrase: the past 20 months
with logic: (*:<d,<n,d>> months:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), months :- NP : months:d]
Executing the phrase: the past 20 months
with logic: (*:<d,<n,d>> months:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), months :- NP : months:d]
Executing the phrase: the past 20 months
with logic: (*:<d,<n,d>> months:d 20:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), months :- NP : months:d]
Executing the phrase: the past 20 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 20:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 20 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 20:n)), months :- NP : months:d]
Executing the phrase: years
with logic: years:d
and lexical entries: [years :- NP : years:d]
Executing the phrase: years
with logic: years:d
and lexical entries: [years :- NP : years:d]
Executing the phrase: years
with logic: years:d
and lexical entries: [years :- NP : years:d]
Executing the phrase: years
with logic: years:d
and lexical entries: [years :- NP : years:d]
Executing the phrase: years
with logic: (temporal_ref:<d,s> years:d)
and lexical entries: [years :- NP : years:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]

Phrase:            about a decade
Sentence:          While Westinghouse hasn't had a nuclear power plant order from a U.S. utility in about a decade, excess capacity is beginning to shrink.
ref_time:          1989-10-26
Gold type:         DURATION
gold val:          P1E
No parses! Will implement something to throw out words and try again.
Executing the phrase: the 1990s
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the 1990s
with logic: (previous:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the 1990s
with logic: (this:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the 1990s
with logic: (next:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the 1990s
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: recently
with logic: past_ref:r
and lexical entries: [recently :- NP : past_ref:r]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: soon
with logic: future_ref:r
and lexical entries: [soon :- NP : future_ref:r]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: a later date
with logic: future_ref:r
and lexical entries: [a later date :- NP : future_ref:r]
Executing the phrase: a later date
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a later date :- NP : future_ref:r]
Executing the phrase: a later date
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a later date :- NP : future_ref:r]
Executing the phrase: a later date
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [a later date :- NP : future_ref:r]
Executing the phrase: a later date
with logic: future_ref:r
and lexical entries: [a later date :- NP : future_ref:r]
Executing the phrase: early 1991
with logic: 1991:r
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1991 :- NP : 1991:r]
Executing the phrase: early 1991
with logic: (previous:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1991 :- NP : 1991:r]
Executing the phrase: early 1991
with logic: (this:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1991 :- NP : 1991:r]
Executing the phrase: early 1991
with logic: (next:<s,<r,s>> 1991:r ref_time:r)
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1991 :- NP : 1991:r]
Executing the phrase: early 1991
with logic: 1991:r
and lexical entries: [early :- NP/NP : (lambda $0:s $0), 1991 :- NP : 1991:r]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: this month
with logic: (this:<d,<r,s>> month:d ref_time:r)
and lexical entries: [this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the 1988 third quarter
with logic: (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n))
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the 1988 third quarter
with logic: (previous:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the 1988 third quarter
with logic: (this:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the 1988 third quarter
with logic: (next:<s,<r,s>> (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n)) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: the 1988 third quarter
with logic: (intersect:<s*,s> 1988:r (nth:<d,<n,s>> quarter:d 3o:n))
and lexical entries: [the :- NP/NP : (lambda $0:s $0), 1988 :- NP : 1988:r, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:r (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n)))), quarter :- NP : quarter:d, third :- (NP\NP)/NP : (lambda $0:d (lambda $1:s (intersect:<s*,s> $1 (nth:<d,<n,s>> $0 3o:n))))]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (*:<d,<n,d>> year:d 2:n)
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: two year
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d 2:n))
and lexical entries: [two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), year :- NP : year:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]

Phrase:            first two quarters of 1990
Sentence:          Wall Street analysts expect the disappointing trend to continue into the fourth quarter and through at least the first two quarters of 1990, when the industry will increasingly see the effect of price erosion in major product lines, such as rolled sheet used for cars, appliances and construction.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990-H1
No parses! Will implement something to throw out words and try again.
Executing the phrase: coming quarters
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: coming quarters
with logic: (previous:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: coming quarters
with logic: (this:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: coming quarters
with logic: (next:<s,<r,s>> future_ref:r ref_time:r)
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]
Executing the phrase: coming quarters
with logic: future_ref:r
and lexical entries: [coming :- NP/NP : (lambda $0:d future_ref:r), quarters :- NP : quarters:d]

Phrase:            the third quarter of 1990
Sentence:          In fact, he thinks several steelmakers will report actual losses through the third quarter of 1990.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1990-Q3
No parses! Will implement something to throw out words and try again.

Phrase:            year ago period
Sentence:          In the year-ago period, Bethlehem earned $101.4 million, or $1.27 a share, including a $3.8 million gain from early retirement of debt.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: june 1
with logic: (intersect:<s*,s> june:s 1d:s)
and lexical entries: [june :- NP : june:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: june 1
with logic: (previous:<s,<r,s>> (intersect:<s*,s> june:s 1d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: june 1
with logic: (this:<s,<r,s>> (intersect:<s*,s> june:s 1d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: june 1
with logic: (next:<s,<r,s>> (intersect:<s*,s> june:s 1d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: june 1
with logic: (intersect:<s*,s> june:s 1d:s)
and lexical entries: [june :- NP : june:s, 1 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 1d:s))]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 4o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fourth quarter
with logic: (nth:<d,<n,s>> quarter:d 4o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarter :- NP : quarter:d]
Executing the phrase: the early summer
with logic: summer:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the early summer
with logic: (previous:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the early summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the early summer
with logic: (next:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: the early summer
with logic: summer:s
and lexical entries: [the :- NP/NP : (lambda $0:s $0), early :- NP/NP : (lambda $0:s $0), summer :- NP : summer:s]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the year ago quarter
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), year ago quarter :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: fiscal second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: fiscal second quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: fiscal second quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: fiscal second quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 2o:n) ref_time:r)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: fiscal second quarter
with logic: (nth:<d,<n,s>> quarter:d 2o:n)
and lexical entries: [fiscal :- NP/NP : (lambda $0:s $0), second :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 2o:n)), quarter :- NP : quarter:d]
Executing the phrase: quarter
with logic: quarter:d
and lexical entries: [quarter :- NP : quarter:d]
Executing the phrase: quarter
with logic: quarter:d
and lexical entries: [quarter :- NP : quarter:d]
Executing the phrase: quarter
with logic: quarter:d
and lexical entries: [quarter :- NP : quarter:d]
Executing the phrase: quarter
with logic: quarter:d
and lexical entries: [quarter :- NP : quarter:d]
Executing the phrase: quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [quarter :- NP : quarter:d]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]

Phrase:            the latest fiscal year
Sentence:          The non-food operations accounted for about 27% of Provigo's 7.38 billion Canadian dollars (US$6.3 billion) in sales in the latest fiscal year.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988
No parses! Will implement something to throw out words and try again.
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (previous:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (this:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: (next:<s,<r,s>> 1985:r ref_time:r)
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: 1985
with logic: 1985:r
and lexical entries: [1985 :- NP : 1985:r]
Executing the phrase: the past two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the past two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the past two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the past two years
with logic: (*:<d,<n,d>> years:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the past two years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), years :- NP : years:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (*:<d,<n,d>> months:d 6:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: the six months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 6:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), six :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 6:n)), months :- NP : months:d]
Executing the phrase: aug. 12
with logic: (intersect:<s*,s> august:s 12d:s)
and lexical entries: [aug. :- NP : august:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: aug. 12
with logic: (previous:<s,<r,s>> (intersect:<s*,s> august:s 12d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: aug. 12
with logic: (this:<s,<r,s>> (intersect:<s*,s> august:s 12d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: aug. 12
with logic: (next:<s,<r,s>> (intersect:<s*,s> august:s 12d:s) ref_time:r)
and lexical entries: [aug. :- NP : august:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: aug. 12
with logic: (intersect:<s*,s> august:s 12d:s)
and lexical entries: [aug. :- NP : august:s, 12 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 12d:s))]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 1o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: the fiscal first quarter
with logic: (nth:<d,<n,s>> quarter:d 1o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), fiscal :- NP/NP : (lambda $0:s $0), first :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 1o:n)), quarter :- NP : quarter:d]
Executing the phrase: last spring
with logic: (previous:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), spring :- NP : spring:s]
Executing the phrase: last spring
with logic: (previous:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), spring :- NP : spring:s]
Executing the phrase: last spring
with logic: (previous:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), spring :- NP : spring:s]
Executing the phrase: last spring
with logic: (previous:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), spring :- NP : spring:s]
Executing the phrase: last spring
with logic: (previous:<s,<r,s>> spring:s ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:s (previous:<s,<r,s>> $0 ref_time:r)), spring :- NP : spring:s]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: (temporal_ref:<d,s> quarter:d)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: the third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]

Phrase:            the quarter a year ago
Sentence:          For the quarter a year ago, Columbia reported earnings of $16.3 million, or 37 cents a share.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the latest quarter
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (previous:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (this:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: (next:<s,<r,s>> past_ref:r ref_time:r)
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: recent years
with logic: past_ref:r
and lexical entries: [recent :- NP/NP : (lambda $0:d past_ref:r), years :- NP : years:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (*:<d,<n,d>> months:d 9:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: the nine months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 9:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), nine :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 9:n)), months :- NP : months:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (intersect:<s*,s> june:s 30d:s)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> june:s 30d:s) ref_time:r)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: june 30
with logic: (intersect:<s*,s> june:s 30d:s)
and lexical entries: [june :- NP : june:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: 1994
with logic: 1994:r
and lexical entries: [1994 :- NP : 1994:r]
Executing the phrase: 1994
with logic: (previous:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r]
Executing the phrase: 1994
with logic: (this:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r]
Executing the phrase: 1994
with logic: (next:<s,<r,s>> 1994:r ref_time:r)
and lexical entries: [1994 :- NP : 1994:r]
Executing the phrase: 1994
with logic: 1994:r
and lexical entries: [1994 :- NP : 1994:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (*:<d,<n,d>> years:d 5:n)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: five years
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> years:d 5:n))
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (previous:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (this:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: (next:<s,<r,s>> august:s ref_time:r)
and lexical entries: [august :- NP : august:s]
Executing the phrase: august
with logic: august:s
and lexical entries: [august :- NP : august:s]
Executing the phrase: the past two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the past two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the past two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the past two weeks
with logic: (*:<d,<n,d>> weeks:d 2:n)
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: the past two weeks
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> weeks:d 2:n))
and lexical entries: [the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), two :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 2:n)), weeks :- NP : weeks:d]
Executing the phrase: oct. 9
with logic: (intersect:<s*,s> october:s 9d:s)
and lexical entries: [oct. :- NP : october:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: oct. 9
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 9d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: oct. 9
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 9d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: oct. 9
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 9d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]
Executing the phrase: oct. 9
with logic: (intersect:<s*,s> october:s 9d:s)
and lexical entries: [oct. :- NP : october:s, 9 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 9d:s))]

Phrase:            year's end
Sentence:          Columbia officials also said the thrift shouldn't face problems meeting regulatory capital requirements, despite the large reserves and write-downs and stiffer regulatory requirements that should be in place by year's end.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1989
No parses! Will implement something to throw out words and try again.
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: days
with logic: days:d
and lexical entries: [days :- NP : days:d]
Executing the phrase: days
with logic: days:d
and lexical entries: [days :- NP : days:d]
Executing the phrase: days
with logic: days:d
and lexical entries: [days :- NP : days:d]
Executing the phrase: days
with logic: days:d
and lexical entries: [days :- NP : days:d]
Executing the phrase: days
with logic: days:d
and lexical entries: [days :- NP : days:d]
Executing the phrase: summer
with logic: summer:s
and lexical entries: [summer :- NP : summer:s]
Executing the phrase: summer
with logic: (previous:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [summer :- NP : summer:s]
Executing the phrase: summer
with logic: (this:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [summer :- NP : summer:s]
Executing the phrase: summer
with logic: (next:<s,<r,s>> summer:s ref_time:r)
and lexical entries: [summer :- NP : summer:s]
Executing the phrase: summer
with logic: summer:s
and lexical entries: [summer :- NP : summer:s]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (previous:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (this:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: (next:<s,<r,s>> present_ref:r ref_time:r)
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: now
with logic: present_ref:r
and lexical entries: [now :- NP : present_ref:r]
Executing the phrase: at least the past 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: at least the past 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: at least the past 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: at least the past 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: at least the past 18 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 18:n))
and lexical entries: [at least :- NP/NP : (lambda $0:d $0), the :- NP/NP : (lambda $0:d $0), past :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: last month
with logic: (previous:<d,<r,s>> month:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), month :- NP : month:d]
Executing the phrase: the last half of 1989
with logic: 1989:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last half of :- NP/NP : (lambda $0:r $0), 1989 :- NP : 1989:r]
Executing the phrase: the last half of 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last half of :- NP/NP : (lambda $0:r $0), 1989 :- NP : 1989:r]
Executing the phrase: the last half of 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last half of :- NP/NP : (lambda $0:r $0), 1989 :- NP : 1989:r]
Executing the phrase: the last half of 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last half of :- NP/NP : (lambda $0:r $0), 1989 :- NP : 1989:r]
Executing the phrase: the last half of 1989
with logic: 1989:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), last half of :- NP/NP : (lambda $0:r $0), 1989 :- NP : 1989:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (previous:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (this:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: (next:<s,<r,s>> 1989:r ref_time:r)
and lexical entries: [1989 :- NP : 1989:r]
Executing the phrase: 1989
with logic: 1989:r
and lexical entries: [1989 :- NP : 1989:r]

Phrase:            the last half of the '80s
Sentence:          Anheuser noted that "beer industry sales volume is 1989 is following the trend that has characterized the last half of the '80s, with sales volume being essentially flat" while consolidation creates fewer, bigger players.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          198
No parses! Will implement something to throw out words and try again.
Executing the phrase: the mid 1990s
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), mid :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the mid 1990s
with logic: (previous:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), mid :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the mid 1990s
with logic: (this:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), mid :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the mid 1990s
with logic: (next:<s,<r,s>> 199:r ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), mid :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the mid 1990s
with logic: 199:r
and lexical entries: [the :- NP/NP : (lambda $0:s $0), mid :- NP/NP : (lambda $0:s $0), 1990s :- NP : 199:r]
Executing the phrase: the current year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the current year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the current year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the current year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: the current year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (previous:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (this:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: (next:<s,<r,s>> 1990:r ref_time:r)
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: 1990
with logic: 1990:r
and lexical entries: [1990 :- NP : 1990:r]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a :- NP/NP : (lambda $0:d $0), year earlier :- NP : (*:<d,<n,d>> year:d -1:n), a year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: year earlier
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [year earlier :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]
Executing the phrase: the latest period
with logic: (previous:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), latest :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), period :- NP : quarter:d]

Phrase:            second
Sentence:          The company said 80% of its auction business is usually conducted in the second and fourth quarters, with the current quarter having begun " extremely well."
ref_time:          1989-10-26
Gold type:         SET
gold val:          XXXX-Q2
No parses! Will implement something to throw out words and try again.
Executing the phrase: fourth quarters
with logic: (nth:<d,<n,s>> quarters:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarters :- NP : quarters:d]
Executing the phrase: fourth quarters
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarters:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarters :- NP : quarters:d]
Executing the phrase: fourth quarters
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarters:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarters :- NP : quarters:d]
Executing the phrase: fourth quarters
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarters:d 4o:n) ref_time:r)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarters :- NP : quarters:d]
Executing the phrase: fourth quarters
with logic: (nth:<d,<n,s>> quarters:d 4o:n)
and lexical entries: [fourth :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 4o:n)), quarters :- NP : quarters:d]
Executing the phrase: the current quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the current quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the current quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the current quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: the current quarter
with logic: (this:<d,<r,s>> quarter:d ref_time:r)
and lexical entries: [the :- NP/NP : (lambda $0:s $0), current :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), quarter :- NP : quarter:d]
Executing the phrase: nov. 8
with logic: (intersect:<s*,s> november:s 8d:s)
and lexical entries: [nov. :- NP : november:s, 8 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 8d:s))]
Executing the phrase: nov. 8
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 8d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 8 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 8d:s))]
Executing the phrase: nov. 8
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 8d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 8 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 8d:s))]
Executing the phrase: nov. 8
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 8d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 8 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 8d:s))]
Executing the phrase: nov. 8
with logic: (intersect:<s*,s> november:s 8d:s)
and lexical entries: [nov. :- NP : november:s, 8 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 8d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (previous:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (this:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (next:<s,<r,s>> (intersect:<s*,s> september:s 30d:s) ref_time:r)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: sept. 30
with logic: (intersect:<s*,s> september:s 30d:s)
and lexical entries: [sept. :- NP : september:s, 30 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 30d:s))]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (previous:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (this:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (next:<s,<r,s>> (intersect:<s*,s> october:s 31d:s) ref_time:r)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: oct. 31
with logic: (intersect:<s*,s> october:s 31d:s)
and lexical entries: [oct. :- NP : october:s, 31 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 31d:s))]
Executing the phrase: five years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: five years ago
with logic: (previous:<d,<r,s>> (*:<d,<n,d>> (*:<d,<n,d>> years:d 5:n) -1:n) ref_time:r)
and lexical entries: [five :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 5:n)), years :- NP : years:d, ago :- NP\NP : (lambda $0:d (previous:<d,<r,s>> (*:<d,<n,d>> $0 -1:n) ref_time:r))]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]

Phrase:            the year ago period
Sentence:          Separately, Esselte Business Systems reported third-quarter net income fell 5.9% to $9.5 million, or 46 cents a share, from $10.1 million, or 49 cents a share, in the year-ago period.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: earlier this year
with logic: (this:<d,<r,s>> year:d ref_time:r)
and lexical entries: [earlier :- NP/NP : (lambda $0:s $0), this :- NP/NP : (lambda $0:d (this:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (*:<d,<n,d>> year:d -1:n)
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: a year ago
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> year:d -1:n))
and lexical entries: [a year ago :- NP : (*:<d,<n,d>> year:d -1:n)]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: within 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [within :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: within 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [within :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: within 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [within :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: within 18 months
with logic: (*:<d,<n,d>> months:d 18:n)
and lexical entries: [within :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: within 18 months
with logic: (temporal_ref:<d,s> (*:<d,<n,d>> months:d 18:n))
and lexical entries: [within :- NP/NP : (lambda $0:d $0), 18 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 18:n)), months :- NP : months:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (previous:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (this:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (next:<s,<r,s>> (nth:<d,<n,s>> quarter:d 3o:n) ref_time:r)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]
Executing the phrase: third quarter
with logic: (nth:<d,<n,s>> quarter:d 3o:n)
and lexical entries: [third :- NP/NP : (lambda $0:d (nth:<d,<n,s>> $0 3o:n)), quarter :- NP : quarter:d]

Phrase:            the year ago period
Sentence:          Net income fell 37% to $32.9 million, or 30 cents a share, from $52.2 million, or 48 cents a share, in the year-ago period.
ref_time:          1989-10-26
Gold type:         DATE
gold val:          1988-Q3
No parses! Will implement something to throw out words and try again.
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: the quarter
with logic: quarter:d
and lexical entries: [the :- NP/NP : (lambda $0:d $0), quarter :- NP : quarter:d]
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (previous:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (this:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (next:<s,<r,s>> (intersect:<s*,s> december:s 15d:s) ref_time:r)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: dec. 15
with logic: (intersect:<s*,s> december:s 15d:s)
and lexical entries: [dec. :- NP : december:s, 15 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 15d:s))]
Executing the phrase: nov. 17
with logic: (intersect:<s*,s> november:s 17d:s)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (previous:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (this:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (next:<s,<r,s>> (intersect:<s*,s> november:s 17d:s) ref_time:r)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: nov. 17
with logic: (intersect:<s*,s> november:s 17d:s)
and lexical entries: [nov. :- NP : november:s, 17 :- NP\NP : (lambda $0:s (intersect:<s*,s> $0 17d:s))]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (previous:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (this:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: (next:<s,<r,s>> yesterday:r ref_time:r)
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: yesterday
with logic: yesterday:r
and lexical entries: [yesterday :- NP : yesterday:r]
Executing the phrase: 90 days
with logic: (*:<d,<n,d>> days:d 90:n)
and lexical entries: [90 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 90:n)), days :- NP : days:d]
Executing the phrase: 90 days
with logic: (*:<d,<n,d>> days:d 90:n)
and lexical entries: [90 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 90:n)), days :- NP : days:d]
Executing the phrase: 90 days
with logic: (*:<d,<n,d>> days:d 90:n)
and lexical entries: [90 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 90:n)), days :- NP : days:d]
Executing the phrase: 90 days
with logic: (*:<d,<n,d>> days:d 90:n)
and lexical entries: [90 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 90:n)), days :- NP : days:d]
Executing the phrase: 90 days
with logic: (*:<d,<n,d>> days:d 90:n)
and lexical entries: [90 :- NP/NP : (lambda $0:d (*:<d,<n,d>> $0 90:n)), days :- NP : days:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]
Executing the phrase: last year
with logic: (previous:<d,<r,s>> year:d ref_time:r)
and lexical entries: [last :- NP/NP : (lambda $0:d (previous:<d,<r,s>> $0 ref_time:r)), year :- NP : year:d]



Total phrases: 1243
Number correctly parsed and executed, with correct type and val: 974, which is 78.35880933226066 percent
Number parsed with correct val, but not type: 13, which is 1.0458567980691875 percent.
Number parsed with correct type, but not val: 117, which is 9.412711182622687 percent.
Number parsed, but with incorrect type and val: 53, which his 4.263877715205149 percent
Number with too many parses: 0
Number with no parses: 86
