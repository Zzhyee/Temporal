\relax 
\ifx\hyper@anchor\@undefined
\global \let \oldcontentsline\contentsline
\gdef \contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global \let \oldnewlabel\newlabel
\gdef \newlabel#1#2{\newlabelxx{#1}#2}
\gdef \newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\let \contentsline\oldcontentsline
\let \newlabel\oldnewlabel}
\else
\global \let \hyper@last\relax 
\fi

\citation{ParsingTime}
\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}}
\newlabel{sec:introduction}{{1}{1}{Introduction\relax }{section.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {2}previousWork}{1}{section.2}}
\newlabel{sec:previousWork}{{2}{1}{previousWork\relax }{section.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Representation}{2}{section.3}}
\newlabel{sec:representation}{{3}{2}{Representation\relax }{section.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Types within CCG}{2}{subsection.3.1}}
\newlabel{sec:CCGtypes}{{3.1}{2}{Types within CCG\relax }{subsection.3.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Above we can see three example parses. Each of these parses represents a base parse for the given temporal phrase. We can see how the base parse is built from the individual categories drawn from the lexicon. In the first example, we are parsing the phrase \emph  {third quarter}. The entries in the lexicon that are being used in this parse are $\lambda x.nth(x,3)$ and $quarter$, which correspond to \emph  {third} and \emph  {quarter}, respectively. These combine to create the base parse for the first phrase, $nth(quarter,3)$. The second example is very similar to the frist. However, the third example first does forward composition (combining $\lambda x*(x,1)$ with $year$) then does backward composition (combining $\lambda x.*(x,-1)$ with $*(year,1)$). The first context-independent parse, $nth(quarter,3)$ represents the sequence of all third quarters, which needs additional logic to be correctly ground to a single third quarter. The second parse, $*(weeks, 5)$, can be fully ground to a duration of five weeks without needing an additional context step. The third parse, $*(*(year,1),-1)$, can't actually be ground to a date at all without additional contextual information. }}{2}{figure.1}}
\newlabel{fig:language-venn}{{1}{2}{Above we can see three example parses. Each of these parses represents a base parse for the given temporal phrase. We can see how the base parse is built from the individual categories drawn from the lexicon. In the first example, we are parsing the phrase \emph {third quarter}. The entries in the lexicon that are being used in this parse are $\lambda x.nth(x,3)$ and $quarter$, which correspond to \emph {third} and \emph {quarter}, respectively. These combine to create the base parse for the first phrase, $nth(quarter,3)$. The second example is very similar to the frist. However, the third example first does forward composition (combining $\lambda x*(x,1)$ with $year$) then does backward composition (combining $\lambda x.*(x,-1)$ with $*(year,1)$). The first context-independent parse, $nth(quarter,3)$ represents the sequence of all third quarters, which needs additional logic to be correctly ground to a single third quarter. The second parse, $*(weeks, 5)$, can be fully ground to a duration of five weeks without needing an additional context step. The third parse, $*(*(year,1),-1)$, can't actually be ground to a date at all without additional contextual information. \relax }{figure.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Lexicon}{2}{subsection.3.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}Pasing Using CCG}{2}{subsection.3.3}}
\citation{kTailsOrigin}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}Building Context-Dependent Parse}{3}{subsection.3.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.5}Building Context-Dependent Parse}{3}{subsection.3.5}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Generalizing the Technique}{3}{section.4}}
\newlabel{sec:generalizing}{{4}{3}{Generalizing the Technique\relax }{section.4}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces A sample trace graph and its corresponding models using InvariMint for kTails for k = 0 and k = 1.}}{3}{figure.2}}
\newlabel{fig:ktails}{{2}{3}{A sample trace graph and its corresponding models using InvariMint for kTails for k = 0 and k = 1}{figure.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Invariant DFAs for the tails in Figure\nobreakspace  {}\ref  {fig:ktails}a for $k = 1$.}}{3}{figure.3}}
\newlabel{fig:tails}{{3}{3}{Invariant DFAs for the tails in Figure~\ref {fig:ktails}a for $k = 1$}{figure.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}kTails}{3}{subsection.4.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Representing kTails using InvariMint}{3}{subsection.4.2}}
\citation{ReverseTraceroute}
\@writefile{toc}{\contentsline {section}{\numberline {5}Evaluation}{4}{section.5}}
\newlabel{sec:evaluation}{{5}{4}{Evaluation\relax }{section.5}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1}Addressing Synoptic limitations}{4}{subsection.5.1}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Run time of Synoptic versus InvariMint as the size of the input log increased.}}{4}{figure.4}}
\newlabel{fig:performanceLogLine}{{4}{4}{Run time of Synoptic versus InvariMint as the size of the input log increased}{figure.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2}Performance}{4}{subsection.5.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3}Model comparisons}{5}{subsection.5.3}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {5.3.1}Union of Synoptic models}{5}{subsubsection.5.3.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {5.3.2}Spurious Edges}{5}{subsubsection.5.3.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {5.3.3}Removing spurious edges}{5}{subsubsection.5.3.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Models a and b are possible final Synoptic models given the provided input traces. Next to each model is an example of a synthetic trace accepted by that model but not the other. The corresponding InvariMint model, c, accepts the union of synthetic traces accepted by both Synoptic models.}}{6}{figure.5}}
\newlabel{fig:synthetic}{{5}{6}{Models a and b are possible final Synoptic models given the provided input traces. Next to each model is an example of a synthetic trace accepted by that model but not the other. The corresponding InvariMint model, c, accepts the union of synthetic traces accepted by both Synoptic models}{figure.5}{}}
\bibstyle{acm}
\bibdata{paper}
\bibcite{ParsingTime}{1}
\bibcite{BeschastnikhBSSE2011}{2}
\bibcite{kTailsOrigin}{3}
\bibcite{dwyer_spec_patterns_1999}{4}
\bibcite{hopcroft_minimization_tr1971}{5}
\bibcite{ReverseTraceroute}{6}
\bibcite{automaton}{7}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces An abstract example of a spurious edge in an InvariMint model. The input traces and mined invariants are shown at left. Each edge in the Synoptic model (translated to an InvariMint-style DFA for easier comparison) corresponds directly to an event in some input trace. The InvariMint model is almost identical to the Synoptic model but includes an additional $z$ edge from $a$ to $TERMINAL$. This transition does not map to any event in the input logs so violates the edge-coverage property and is spurious. This spurious $z$ edge is allowed by InvariMint because elsewhere an event $z$ immediately followed an event $a$ and none of the other invariants restrict this particular instance of $z$.}}{7}{figure.6}}
\newlabel{fig:spurious}{{6}{7}{An abstract example of a spurious edge in an InvariMint model. The input traces and mined invariants are shown at left. Each edge in the Synoptic model (translated to an InvariMint-style DFA for easier comparison) corresponds directly to an event in some input trace. The InvariMint model is almost identical to the Synoptic model but includes an additional $z$ edge from $a$ to $TERMINAL$. This transition does not map to any event in the input logs so violates the edge-coverage property and is spurious. This spurious $z$ edge is allowed by InvariMint because elsewhere an event $z$ immediately followed an event $a$ and none of the other invariants restrict this particular instance of $z$}{figure.6}{}}
\@writefile{toc}{\contentsline {section}{\numberline {6}Conclusion}{7}{section.6}}
\newlabel{sec:conclusion}{{6}{7}{Conclusion\relax }{section.6}{}}
